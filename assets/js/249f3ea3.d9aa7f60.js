"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[8436],{8212:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>x,frontMatter:()=>a,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"tutorials/getting-started/notebooks","title":"Using notebooks","description":"A .NET notebook is a .dib file that contains snippets of code, called cells, which you can individually run to immediately see their outputs.","source":"@site/docs/tutorials/getting-started/notebooks.mdx","sourceDirName":"tutorials/getting-started","slug":"/tutorials/getting-started/notebooks","permalink":"/nancy/docs/tutorials/getting-started/notebooks","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"hide_title":true,"title":"Using notebooks","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/nancy/docs/tutorials/getting-started/installation"},"next":{"title":"Main types","permalink":"/nancy/docs/tutorials/first-tutorial/upp-types"}}');var i=s(4848),o=s(8453),l=s(3554),r=s.n(l),c=s(6025);const a={hide_title:!0,title:"Using notebooks",sidebar_position:2},d="Using notebooks",h={},u=[{value:"How to plot",id:"how-to-plot",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"using-notebooks",children:"Using notebooks"})}),"\n",(0,i.jsxs)(n.p,{children:["A .NET notebook is a ",(0,i.jsx)(n.code,{children:".dib"})," file that contains snippets of code, called ",(0,i.jsx)(n.em,{children:"cells"}),", which you can individually run to immediately see their outputs."]}),"\n",(0,i.jsxs)(n.p,{children:["They are useful to show and discuss code step by step, as we do in our ",(0,i.jsx)(n.a,{href:"https://github.com/rzippo/nancy/tree/master/examples",children:"examples"}),", but also to be modified and try things out."]}),"\n",(0,i.jsxs)("figure",{children:[(0,i.jsx)(r(),{preload:!0,playing:!0,loop:!0,controls:!0,muted:!0,width:"100%",height:"auto",url:(0,c.Ay)("/img/tutorials/plot-gif.webm")}),(0,i.jsx)("figcaption",{children:(0,i.jsx)(n.p,{children:"Running a cell in VS Code."})})]}),"\n",(0,i.jsxs)(n.p,{children:["The plotting functionality in .NET notebooks is provided with the ",(0,i.jsx)(n.code,{children:"Nancy.Interactive"})," package. This is how you import it into a notebook:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'#r "nuget: Unipi.Nancy.Interactive"\n\nusing Unipi.Nancy.Interactive;\n'})}),"\n",(0,i.jsx)(n.h2,{id:"how-to-plot",children:"How to plot"}),"\n",(0,i.jsxs)(n.p,{children:["The main way to plot your curves is the ",(0,i.jsx)(n.code,{children:"Plots.Plot()"})," methods,\nwhich has various overloads to make it easier and immediate to use."]}),"\n",(0,i.jsxs)("figure",{children:[(0,i.jsx)("img",{src:(0,c.Ay)("/img/tutorials/plot-example.png")}),(0,i.jsxs)("figcaption",{children:["Example of use: the call to ",(0,i.jsx)("code",{children:"Plots.Plot()"})," generates the image below the notebook cell."]})]}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Plots.Plot()"})," is designed and tested only for simple visualizations in notebooks. For other contexts and uses you may need something different.\n",(0,i.jsx)(n.code,{children:"Plots.GetPlot()"})," and ",(0,i.jsx)(n.code,{children:"Plots.GetPlotHtml()"})," return objects than can be used to render the plot elsewhere, e.g. in a browser page.\nFor TikZ plots, see ",(0,i.jsx)(n.code,{children:"ToTikzPlot()"}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["You can use ",(0,i.jsx)(n.code,{children:"Plots.Plot()"})," to visualize one or more ",(0,i.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy/Unipi.Nancy.MinPlusAlgebra/Curve",children:"Curve"})," or ",(0,i.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy/Unipi.Nancy.MinPlusAlgebra/Sequence",children:"Sequence"})," objects. Many overloads are available:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Plots.Plot(curve, name, limit)"}),": plots the given curve from ",(0,i.jsx)(n.code,{children:"0"})," to ",(0,i.jsx)(n.code,{children:"limit"}),", using ",(0,i.jsx)(n.code,{children:"name"})," for the legend."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Plots.Plot(curves, names, limit)"}),": plots the given list of curves from ",(0,i.jsx)(n.code,{children:"0"})," to ",(0,i.jsx)(n.code,{children:"limit"}),", using the corresponding ",(0,i.jsx)(n.code,{children:"names"})," for the legend."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Plots.Plot(sequence, name, limit)"}),": plots the given sequence, using ",(0,i.jsx)(n.code,{children:"name"})," for the legend."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Plots.Plot(sequences, names, limit)"}),": plots the given list of sequences, using the corresponding ",(0,i.jsx)(n.code,{children:"names"})," for the legend."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Names can be omitted.\nFor the overloads for single curve or sequence will, the default name will capture the name of the variable passed as argument, e.g. ",(0,i.jsx)(n.code,{children:"Plots.Plot(beta)"}),' will show "beta" in the legend.\nFor the overloads for multiple curves or sequences, names ',(0,i.jsx)(n.em,{children:"f"}),", ",(0,i.jsx)(n.em,{children:"g"}),", ",(0,i.jsx)(n.em,{children:"h"}),", and so on, will be used instead."]}),"\n",(0,i.jsxs)(n.p,{children:["For ",(0,i.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy/Unipi.Nancy.MinPlusAlgebra/Curve",children:"Curve"}),"s, you can omit the time limit, in which case the function will compute a default one."]}),"\n",(0,i.jsx)(n.p,{children:"With the overloads described above, you can either explicitly declare the lists or arrays (both are fine), e.g."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'var sc = new Curve( ... );\nvar ac = new Curve( ... );\nPlots.Plot(\n    new Curve[]{sc, ac},\n    new string[]{"sc", "ac"}, // string[]\n);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["or use ",(0,i.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/collection-expressions",children:"collection expressions"}),", e.g."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Plots.Plot([sc, ac],["sc", "ac"]);\n'})}),"\n",(0,i.jsx)(n.p,{children:"However, if none of the optional arguments is provided, you can use an even simpler syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Plots.Plot(sc, ac);   // they will be called "f" and "g" in the legend\n'})})]})}function x(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);