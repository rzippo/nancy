"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[8423],{3905:function(n,e,t){t.d(e,{Zo:function(){return l},kt:function(){return y}});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var u=r.createContext({}),s=function(n){var e=r.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},l=function(n){var e=s(n.components);return r.createElement(u.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,u=n.parentName,l=c(n,["components","mdxType","originalType","parentName"]),d=s(t),y=i,m=d["".concat(u,".").concat(y)]||d[y]||p[y]||o;return t?r.createElement(m,a(a({ref:e},l),{},{components:t})):r.createElement(m,a({ref:e},l))}));function y(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,a=new Array(o);a[0]=d;var c={};for(var u in e)hasOwnProperty.call(e,u)&&(c[u]=e[u]);c.originalType=n,c.mdxType="string"==typeof n?n:i,a[1]=c;for(var s=2;s<o;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5775:function(n,e,t){t.r(e),t.d(e,{assets:function(){return l},contentTitle:function(){return u},default:function(){return y},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],c={hide_title:!0,sidebar_position:1,title:"Introduction"},u="Introduction",s={unversionedId:"nancy/introduction",id:"nancy/introduction",title:"Introduction",description:"Here you will find the full documentation for Nancy.",source:"@site/docs/nancy/introduction.md",sourceDirName:"nancy",slug:"/nancy/introduction",permalink:"/nancy/docs/nancy/introduction",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{hide_title:!0,sidebar_position:1,title:"Introduction"},sidebar:"docsSidebar",next:{title:"Unipi.Nancy.MinPlusAlgebra",permalink:"/nancy/docs/category/unipinancyminplusalgebra"}},l={},p=[{value:"Unipi.Nancy.MinPlusAlgebra",id:"unipinancyminplusalgebra",level:2},{value:"Unipi.Nancy.NetworkCalculus",id:"unipinancynetworkcalculus",level:2},{value:"Unipi.Nancy.Numerics",id:"unipinancynumerics",level:2}],d={toc:p};function y(n){var e=n.components,t=(0,i.Z)(n,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Here you will find the full documentation for Nancy."),(0,o.kt)("h2",{id:"unipinancyminplusalgebra"},"Unipi.Nancy.MinPlusAlgebra"),(0,o.kt)("p",null,"This namespace contains the main types of the library, supporting NC operations for generic UPP curves."),(0,o.kt)("h2",{id:"unipinancynetworkcalculus"},"Unipi.Nancy.NetworkCalculus"),(0,o.kt)("p",null,"This namespace contains the derived types for common types of curves."),(0,o.kt)("p",null,"These types provide simplified constructors and optimized operations, so it's generally advised to use these when you can. "),(0,o.kt)("h2",{id:"unipinancynumerics"},"Unipi.Nancy.Numerics"),(0,o.kt)("p",null,"This namespace contains the numeric types used in Nancy."),(0,o.kt)("p",null,"Nancy uses rational numbers, to ensure correctness of computations."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/nancy/docs/nancy/Unipi.Nancy.Numerics/LongRational"},"LongRational")," represents rational numbers using 64 bit integers as numerator and denominator. It is fast, but the precision is limited and can result in arithmetic overflows.  "),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/nancy/docs/nancy/Unipi.Nancy.Numerics/BigRational"},"BigRational")," uses instead ",(0,o.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger"},"BigInteger"),"s for numerator and denominator. This type represents integers with an unlimited amount of bits, ensuring arithmetic overflows are never a problem at the cost of lower speed."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/nancy/docs/nancy/Unipi.Nancy.Numerics/Rational"},"Rational")," is equal to either of those two, based on which of these compilation flags is used:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"BIG_RATIONAL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LONG_RATIONAL"))),(0,o.kt)("p",null,"By default, Nancy is compiled using ",(0,o.kt)("inlineCode",{parentName:"p"},"BIG_RATIONAL"),"."))}y.isMDXComponent=!0}}]);