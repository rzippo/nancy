"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[665],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var o=r.createContext({}),l=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),h=l(t),d=s,m=h["".concat(o,".").concat(d)]||h[d]||u[d]||i;return t?r.createElement(m,a(a({ref:n},c),{},{components:t})):r.createElement(m,a({ref:n},c))}));function d(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,a=new Array(i);a[0]=h;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p.mdxType="string"==typeof e?e:s,a[1]=p;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},5561:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var r=t(7462),s=(t(7294),t(3905));const i={hide_title:!0},a="IGenericExpression&lt;T&gt;",p={unversionedId:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression`1",id:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression`1",title:"IGenericExpression&lt;T&gt;",description:"Interface which defines the rules each Nancy expression must follow.",source:"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression`1.md",sourceDirName:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals",slug:"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression`1",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression`1",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"docsSidebar",previous:{title:"IGenericBinaryExpression&lt;T1, T2, TResult&gt;",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericBinaryExpression`3"},next:{title:"IGenericUnaryExpression&lt;T, TResult&gt;",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericUnaryExpression`2"}},o={},l=[{value:"Type Parameters",id:"type-parameters",level:4},{value:"Properties",id:"properties",level:2},{value:"<strong>Value</strong>",id:"value",level:3},{value:"Property Value",id:"property-value",level:4},{value:"<strong>Name</strong>",id:"name",level:3},{value:"Property Value",id:"property-value-1",level:4},{value:"<strong>Settings</strong>",id:"settings",level:3},{value:"Property Value",id:"property-value-2",level:4},{value:"Methods",id:"methods",level:2},{value:"<strong>Compute()</strong>",id:"compute",level:3},{value:"Returns",id:"returns",level:4},{value:"<strong>ToLatexString(Int32, Boolean)</strong>",id:"tolatexstringint32-boolean",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<strong>ToString()</strong>",id:"tostring",level:3},{value:"Returns",id:"returns-2",level:4},{value:"<strong>Estimate()</strong>",id:"estimate",level:3},{value:"Returns",id:"returns-3",level:4},{value:"<strong>ReplaceByValue&lt;T1&gt;(IGenericExpression&lt;T1&gt;, IGenericExpression&lt;T1&gt;)</strong>",id:"replacebyvaluet1igenericexpressiont1-igenericexpressiont1",level:3},{value:"Type Parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-4",level:4},{value:"<strong>ReplaceByPosition&lt;T1&gt;(ExpressionPosition, IGenericExpression&lt;T1&gt;)</strong>",id:"replacebypositiont1expressionposition-igenericexpressiont1",level:3},{value:"Type Parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-5",level:4},{value:"<strong>ReplaceByPosition&lt;T1&gt;(IEnumerable&lt;String&gt;, IGenericExpression&lt;T1&gt;)</strong>",id:"replacebypositiont1ienumerablestring-igenericexpressiont1",level:3},{value:"Type Parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-6",level:4},{value:"<strong>Accept(IExpressionVisitor)</strong>",id:"acceptiexpressionvisitor",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"<strong>ToUnicodeString(Int32, Boolean)</strong>",id:"tounicodestringint32-boolean",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-7",level:4},{value:"<strong>RootPosition()</strong>",id:"rootposition",level:3},{value:"Returns",id:"returns-8",level:4},{value:"<strong>WithName(String)</strong>",id:"withnamestring",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-9",level:4},{value:"<strong>ApplyEquivalence(Equivalence, CheckType)</strong>",id:"applyequivalenceequivalence-checktype",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-10",level:4},{value:"<strong>ApplyEquivalenceByPosition(IEnumerable&lt;String&gt;, Equivalence, CheckType)</strong>",id:"applyequivalencebypositionienumerablestring-equivalence-checktype",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-11",level:4},{value:"<strong>ApplyEquivalenceByPosition(ExpressionPosition, Equivalence, CheckType)</strong>",id:"applyequivalencebypositionexpressionposition-equivalence-checktype",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-12",level:4}],c={toc:l};function u(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"igenericexpressiont"},"IGenericExpression","<","T",">"),(0,s.kt)("p",null,"Interface which defines the rules each Nancy expression must follow."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public interface IGenericExpression<T>\n")),(0,s.kt)("h4",{id:"type-parameters"},"Type Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"IGenericExpression&lt;T&gt;.T"),(0,s.kt)("br",null),"\nT is the class (Curve or Rational) which\nrepresents the type the expression evaluates to"),(0,s.kt)("h2",{id:"properties"},"Properties"),(0,s.kt)("h3",{id:"value"},(0,s.kt)("strong",{parentName:"h3"},"Value")),(0,s.kt)("p",null,"The value of the expression"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract T Value { get; }\n")),(0,s.kt)("h4",{id:"property-value"},"Property Value"),(0,s.kt)("p",null,"IGenericExpression","<","T",">",".T",(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"name"},(0,s.kt)("strong",{parentName:"h3"},"Name")),(0,s.kt)("p",null,"The name of the expression"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract string Name { get; }\n")),(0,s.kt)("h4",{id:"property-value-1"},"Property Value"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"settings"},(0,s.kt)("strong",{parentName:"h3"},"Settings")),(0,s.kt)("p",null,"Settings for the expression (contains also the settings for the evaluation of the expression)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract ExpressionSettings Settings { get; }\n")),(0,s.kt)("h4",{id:"property-value-2"},"Property Value"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,s.kt)("br",null)),(0,s.kt)("h2",{id:"methods"},"Methods"),(0,s.kt)("h3",{id:"compute"},(0,s.kt)("strong",{parentName:"h3"},"Compute()")),(0,s.kt)("p",null,"Computes the value the expression evaluates to"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"T Compute()\n")),(0,s.kt)("h4",{id:"returns"},"Returns"),(0,s.kt)("p",null,"IGenericExpression","<","T",">",".T",(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"tolatexstringint32-boolean"},(0,s.kt)("strong",{parentName:"h3"},"ToLatexString(Int32, Boolean)")),(0,s.kt)("p",null,"Formats the expression in LaTeX."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"string ToLatexString(int depth, bool showRationalsAsName)\n")),(0,s.kt)("h4",{id:"parameters"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"depth")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32"},"Int32"),(0,s.kt)("br",null),"\nLevel of the expression tree up to which to print the expression fully expanded."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"showRationalsAsName")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,s.kt)("br",null),"\nIf true, shows rational numbers with their expression name\n(",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601#name"},"Name"),") in place of ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601#value"},"Value"),"."),(0,s.kt)("h4",{id:"returns-1"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"tostring"},(0,s.kt)("strong",{parentName:"h3"},"ToString()")),(0,s.kt)("p",null,"Represents the expression in textual format"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"string ToString()\n")),(0,s.kt)("h4",{id:"returns-2"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"estimate"},(0,s.kt)("strong",{parentName:"h3"},"Estimate()")),(0,s.kt)("p",null,"Evaluates the computational complexity of the expression."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"double Estimate()\n")),(0,s.kt)("h4",{id:"returns-3"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.double"},"Double"),(0,s.kt)("br",null),"\nThe value representative of the complexity of the expression"),(0,s.kt)("h3",{id:"replacebyvaluet1igenericexpressiont1-igenericexpressiont1"},(0,s.kt)("strong",{parentName:"h3"},"ReplaceByValue","<","T1",">","(IGenericExpression","<","T1",">",", IGenericExpression","<","T1",">",")")),(0,s.kt)("p",null,"Replaces every occurence of a sub-expression in the expression to which the method is applied."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"IGenericExpression<T> ReplaceByValue<T1>(IGenericExpression<T1> expressionPattern, IGenericExpression<T1> newExpressionToReplace)\n")),(0,s.kt)("h4",{id:"type-parameters-1"},"Type Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"IGenericExpression&lt;T&gt;.T1"),(0,s.kt)("br",null)),(0,s.kt)("h4",{id:"parameters-1"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"expressionPattern")," IGenericExpression","<","T1",">",(0,s.kt)("br",null),"\nThe sub-expression to look for in the main expression for being replaced"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"newExpressionToReplace")," IGenericExpression","<","T1",">",(0,s.kt)("br",null),"\nThe new sub-expression"),(0,s.kt)("h4",{id:"returns-4"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","T",">"),(0,s.kt)("br",null),"\nNew expression object with replaced sub-expressions"),(0,s.kt)("h3",{id:"replacebypositiont1expressionposition-igenericexpressiont1"},(0,s.kt)("strong",{parentName:"h3"},"ReplaceByPosition","<","T1",">","(ExpressionPosition, IGenericExpression","<","T1",">",")")),(0,s.kt)("p",null,"Replaces the sub-expression at a certain position in the expression to which the method is applied."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"IGenericExpression<T> ReplaceByPosition<T1>(ExpressionPosition expressionPosition, IGenericExpression<T1> newExpression)\n")),(0,s.kt)("h4",{id:"type-parameters-2"},"Type Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"IGenericExpression&lt;T&gt;.T1"),(0,s.kt)("br",null)),(0,s.kt)("h4",{id:"parameters-2"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"expressionPosition")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition"},"ExpressionPosition"),(0,s.kt)("br",null),"\nPosition of the expression to be replaced"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"newExpression")," IGenericExpression","<","T1",">",(0,s.kt)("br",null),"\nThe new sub-expression"),(0,s.kt)("h4",{id:"returns-5"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","T",">"),(0,s.kt)("br",null),"\nNew expression object with replaced sub-expression"),(0,s.kt)("h3",{id:"replacebypositiont1ienumerablestring-igenericexpressiont1"},(0,s.kt)("strong",{parentName:"h3"},"ReplaceByPosition","<","T1",">","(IEnumerable","<","String",">",", IGenericExpression","<","T1",">",")")),(0,s.kt)("p",null,"Replaces the sub-expression at a certain position in the expression to which the method is applied."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"IGenericExpression<T> ReplaceByPosition<T1>(IEnumerable<string> positionPath, IGenericExpression<T1> newExpression)\n")),(0,s.kt)("h4",{id:"type-parameters-3"},"Type Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"IGenericExpression&lt;T&gt;.T1"),(0,s.kt)("br",null)),(0,s.kt)("h4",{id:"parameters-3"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"positionPath")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1"},"IEnumerable","<","String",">"),(0,s.kt)("br",null),'\nPosition of the expression to be replaced. The position is expressed as a path from\nthe root of the expression by using a list of strings "Operand" for unary operators, "LeftOperand"/"RightOperand"\nfor binary operators, "Operand(index)" for n-ary operators'),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"newExpression")," IGenericExpression","<","T1",">",(0,s.kt)("br",null),"\nThe new sub-expression"),(0,s.kt)("h4",{id:"returns-6"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","T",">"),(0,s.kt)("br",null),"\nNew expression object with replaced sub-expression"),(0,s.kt)("h3",{id:"acceptiexpressionvisitor"},(0,s.kt)("strong",{parentName:"h3"},"Accept(IExpressionVisitor)")),(0,s.kt)("p",null,'Method used for implementing the Visitor design pattern: the visited object must "accept" the visitor object.'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"void Accept(IExpressionVisitor visitor)\n")),(0,s.kt)("h4",{id:"parameters-4"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"visitor")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/IExpressionVisitor"},"IExpressionVisitor"),(0,s.kt)("br",null),"\nThe Visitor object"),(0,s.kt)("h3",{id:"tounicodestringint32-boolean"},(0,s.kt)("strong",{parentName:"h3"},"ToUnicodeString(Int32, Boolean)")),(0,s.kt)("p",null,"Returns the representation of the expression using characters of the Unicode character set."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"string ToUnicodeString(int depth, bool showRationalsAsName)\n")),(0,s.kt)("h4",{id:"parameters-5"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"depth")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32"},"Int32"),(0,s.kt)("br",null),"\nLevel of the expression tree up to which to print the expression fully expanded."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"showRationalsAsName")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,s.kt)("br",null),"\nIf true, shows rational numbers with their expression name\n(",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601#name"},"Name"),") in place of ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601#value"},"Value"),"."),(0,s.kt)("h4",{id:"returns-7"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"rootposition"},(0,s.kt)("strong",{parentName:"h3"},"RootPosition()")),(0,s.kt)("p",null,"This method can be used as a starting point to build a symbolic path through the expression."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"ExpressionPosition RootPosition()\n")),(0,s.kt)("h4",{id:"returns-8"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition"},"ExpressionPosition"),(0,s.kt)("br",null),"\nReturns the position of the root of the expression"),(0,s.kt)("h3",{id:"withnamestring"},(0,s.kt)("strong",{parentName:"h3"},"WithName(String)")),(0,s.kt)("p",null,"Changes the name of the expression."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"IGenericExpression<T> WithName(string expressionName)\n")),(0,s.kt)("h4",{id:"parameters-6"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null),"\nThe new name of the expression"),(0,s.kt)("h4",{id:"returns-9"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","T",">"),(0,s.kt)("br",null),"\nThe expression (new object) with the new name"),(0,s.kt)("h3",{id:"applyequivalenceequivalence-checktype"},(0,s.kt)("strong",{parentName:"h3"},"ApplyEquivalence(Equivalence, CheckType)")),(0,s.kt)("p",null,"Applies an equivalence to the current expression."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"IGenericExpression<T> ApplyEquivalence(Equivalence equivalence, CheckType checkType)\n")),(0,s.kt)("h4",{id:"parameters-7"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"equivalence")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence"},"Equivalence"),(0,s.kt)("br",null),"\nThe equivalence to be applied to (a sub-part of) the expression."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"checkType")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType"},"CheckType"),(0,s.kt)("br",null),"\nSince the equivalence is described by a left-side expression and a right-side\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\nand substitution with the right side, or vice versa, or both)."),(0,s.kt)("h4",{id:"returns-10"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","T",">"),(0,s.kt)("br",null),"\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."),(0,s.kt)("h3",{id:"applyequivalencebypositionienumerablestring-equivalence-checktype"},(0,s.kt)("strong",{parentName:"h3"},"ApplyEquivalenceByPosition(IEnumerable","<","String",">",", Equivalence, CheckType)")),(0,s.kt)("p",null,"Applies an equivalence to the current expression, allowing the user to specify the position in the expression in\nwhich the equivalence should be applied."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"IGenericExpression<T> ApplyEquivalenceByPosition(IEnumerable<string> positionPath, Equivalence equivalence, CheckType checkType)\n")),(0,s.kt)("h4",{id:"parameters-8"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"positionPath")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1"},"IEnumerable","<","String",">"),(0,s.kt)("br",null),'\nPosition of the sub-expression to be replaced with an equivalent one.\nThe position is expressed as a path from the root of the expression by using a list of strings "Operand" for\nunary operators, "LeftOperand"/"RightOperand" for binary operators, "Operand(index)" for n-ary operators'),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"equivalence")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence"},"Equivalence"),(0,s.kt)("br",null),"\nThe equivalence to be applied to (a sub-part of) the expression."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"checkType")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType"},"CheckType"),(0,s.kt)("br",null),"\nSince the equivalence is described by a left-side expression and a right-side\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\nand substitution with the right side, or vice versa, or both)."),(0,s.kt)("h4",{id:"returns-11"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","T",">"),(0,s.kt)("br",null),"\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."),(0,s.kt)("h3",{id:"applyequivalencebypositionexpressionposition-equivalence-checktype"},(0,s.kt)("strong",{parentName:"h3"},"ApplyEquivalenceByPosition(ExpressionPosition, Equivalence, CheckType)")),(0,s.kt)("p",null,"Applies an equivalence to the current expression, allowing the user to specify the position in the expression in\nwhich the equivalence should be applied."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"IGenericExpression<T> ApplyEquivalenceByPosition(ExpressionPosition expressionPosition, Equivalence equivalence, CheckType checkType)\n")),(0,s.kt)("h4",{id:"parameters-9"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"expressionPosition")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition"},"ExpressionPosition"),(0,s.kt)("br",null),"\nPosition of the expression to be replaced"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"equivalence")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence"},"Equivalence"),(0,s.kt)("br",null),"\nThe equivalence to be applied to (a sub-part of) the expression."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"checkType")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType"},"CheckType"),(0,s.kt)("br",null),"\nSince the equivalence is described by a left-side expression and a right-side\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\nand substitution with the right side, or vice versa, or both)."),(0,s.kt)("h4",{id:"returns-12"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","T",">"),(0,s.kt)("br",null),"\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."))}u.isMDXComponent=!0}}]);