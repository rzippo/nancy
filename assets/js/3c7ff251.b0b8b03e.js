"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[2992],{5262:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>p,default:()=>x,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression","title":"IGenericExpression<TExpressionResult>","description":"Interface which defines the rules each Nancy expression must follow.","source":"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression.md","sourceDirName":"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals","slug":"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true,"title":"IGenericExpression<TExpressionResult>"},"sidebar":"docsSidebar","previous":{"title":"IGenericBinaryExpression<T1, T2, TResult>","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericBinaryExpression"},"next":{"title":"IGenericUnaryExpression<T, TResult>","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericUnaryExpression"}}');var r=n(4848),t=n(8453);const o={hide_title:!0,title:"IGenericExpression<TExpressionResult>"},p="IGenericExpression<TExpressionResult>",c={},a=[{value:"Type Parameters",id:"type-parameters",level:4},{value:"Properties",id:"properties",level:2},{value:"<strong>Value</strong>",id:"value",level:3},{value:"Property Value",id:"property-value",level:4},{value:"<strong>Settings</strong>",id:"settings",level:3},{value:"Property Value",id:"property-value-1",level:4},{value:"Methods",id:"methods",level:2},{value:"<strong>Compute()</strong>",id:"compute",level:3},{value:"Returns",id:"returns",level:4},{value:"<strong>Accept(IExpressionVisitor&lt;TExpressionResult&gt;)</strong>",id:"acceptiexpressionvisitortexpressionresult",level:3},{value:"Parameters",id:"parameters",level:4},{value:"<strong>Accept&lt;TResult&gt;(IExpressionVisitor&lt;TExpressionResult, TResult&gt;)</strong>",id:"accepttresultiexpressionvisitortexpressionresult-tresult",level:3},{value:"Type Parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<strong>ReplaceByValue&lt;T1&gt;(IGenericExpression&lt;T1&gt;, IGenericExpression&lt;T1&gt;, Boolean)</strong>",id:"replacebyvaluet1igenericexpressiont1-igenericexpressiont1-boolean",level:3},{value:"Type Parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"<strong>ReplaceByPosition&lt;T1&gt;(ExpressionPosition, IGenericExpression&lt;T1&gt;)</strong>",id:"replacebypositiont1expressionposition-igenericexpressiont1",level:3},{value:"Type Parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"<strong>ReplaceByPosition&lt;T1&gt;(IEnumerable&lt;String&gt;, IGenericExpression&lt;T1&gt;)</strong>",id:"replacebypositiont1ienumerablestring-igenericexpressiont1",level:3},{value:"Type Parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"<strong>WithName(String)</strong>",id:"withnamestring",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"<strong>ApplyEquivalence(Equivalence, CheckType)</strong>",id:"applyequivalenceequivalence-checktype",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"<strong>ApplyEquivalenceByPosition(IEnumerable&lt;String&gt;, Equivalence, CheckType)</strong>",id:"applyequivalencebypositionienumerablestring-equivalence-checktype",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"<strong>ApplyEquivalenceByPosition(ExpressionPosition, Equivalence, CheckType)</strong>",id:"applyequivalencebypositionexpressionposition-equivalence-checktype",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4}];function l(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"igenericexpressiontexpressionresult",children:"IGenericExpression<TExpressionResult>"})}),"\n",(0,r.jsx)(s.p,{children:"Interface which defines the rules each Nancy expression must follow."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"public interface IGenericExpression<TExpressionResult> : Unipi.Nancy.Expressions.IExpression\n"})}),"\n",(0,r.jsx)(s.h4,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"IGenericExpression&lt;TExpressionResult&gt;.TExpressionResult"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(s.p,{children:"The type the expression evaluates to, either  or ."}),"\n",(0,r.jsxs)(s.p,{children:["Implements ",(0,r.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/IExpression",children:"IExpression"})]}),"\n",(0,r.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(s.h3,{id:"value",children:(0,r.jsx)(s.strong,{children:"Value"})}),"\n",(0,r.jsx)(s.p,{children:"The value of the expression"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"public abstract TExpressionResult Value { get; }\n"})}),"\n",(0,r.jsx)(s.h4,{id:"property-value",children:"Property Value"}),"\n",(0,r.jsxs)(s.p,{children:["IGenericExpression<TExpressionResult>.TExpressionResult",(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(s.h3,{id:"settings",children:(0,r.jsx)(s.strong,{children:"Settings"})}),"\n",(0,r.jsx)(s.p,{children:"Settings for the expression (contains also the settings for the evaluation of the expression)."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"public abstract ExpressionSettings Settings { get; }\n"})}),"\n",(0,r.jsx)(s.h4,{id:"property-value-1",children:"Property Value"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(s.h3,{id:"compute",children:(0,r.jsx)(s.strong,{children:"Compute()"})}),"\n",(0,r.jsx)(s.p,{children:"Computes the value the expression evaluates to."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"TExpressionResult Compute()\n"})}),"\n",(0,r.jsx)(s.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:["IGenericExpression<TExpressionResult>.TExpressionResult",(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(s.h3,{id:"acceptiexpressionvisitortexpressionresult",children:(0,r.jsx)(s.strong,{children:"Accept(IExpressionVisitor<TExpressionResult>)"})}),"\n",(0,r.jsx)(s.p,{children:'Method used for implementing the Visitor design pattern: the visited object must "accept" the visitor object.'}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"void Accept(IExpressionVisitor<TExpressionResult> visitor)\n"})}),"\n",(0,r.jsx)(s.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"visitor"})," IExpressionVisitor<TExpressionResult>",(0,r.jsx)("br",{}),"\r\nThe Visitor object"]}),"\n",(0,r.jsx)(s.h3,{id:"accepttresultiexpressionvisitortexpressionresult-tresult",children:(0,r.jsx)(s.strong,{children:"Accept<TResult>(IExpressionVisitor<TExpressionResult, TResult>)"})}),"\n",(0,r.jsx)(s.p,{children:'Method used for implementing the Visitor design pattern: the visited object must "accept" the visitor object.'}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"TResult Accept<TResult>(IExpressionVisitor<TExpressionResult, TResult> visitor)\n"})}),"\n",(0,r.jsx)(s.h4,{id:"type-parameters-1",children:"Type Parameters"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"IGenericExpression&lt;TExpressionResult&gt;.TResult"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"visitor"})," IExpressionVisitor<TExpressionResult, TResult>",(0,r.jsx)("br",{}),"\r\nThe Visitor object"]}),"\n",(0,r.jsx)(s.h4,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:["IGenericExpression<TExpressionResult>.TResult",(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(s.h3,{id:"replacebyvaluet1igenericexpressiont1-igenericexpressiont1-boolean",children:(0,r.jsx)(s.strong,{children:"ReplaceByValue<T1>(IGenericExpression<T1>, IGenericExpression<T1>, Boolean)"})}),"\n",(0,r.jsx)(s.p,{children:"Replaces every occurence of a sub-expression in the expression to which the method is applied."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"IGenericExpression<TExpressionResult> ReplaceByValue<T1>(IGenericExpression<T1> expressionPattern, IGenericExpression<T1> newExpressionToReplace, bool ignoreNotMatchedExpressions)\n"})}),"\n",(0,r.jsx)(s.h4,{id:"type-parameters-2",children:"Type Parameters"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"IGenericExpression&lt;TExpressionResult&gt;.T1"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"expressionPattern"})," IGenericExpression<T1>",(0,r.jsx)("br",{}),"\r\nThe sub-expression to look for in the main expression for being replaced"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"newExpressionToReplace"})," IGenericExpression<T1>",(0,r.jsx)("br",{}),"\r\nThe new sub-expression"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"ignoreNotMatchedExpressions"})," ",(0,r.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(s.h4,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<TExpressionResult>"}),(0,r.jsx)("br",{}),"\r\nNew expression object with replaced sub-expressions"]}),"\n",(0,r.jsx)(s.h3,{id:"replacebypositiont1expressionposition-igenericexpressiont1",children:(0,r.jsx)(s.strong,{children:"ReplaceByPosition<T1>(ExpressionPosition, IGenericExpression<T1>)"})}),"\n",(0,r.jsx)(s.p,{children:"Replaces the sub-expression at a certain position in the expression to which the method is applied."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"IGenericExpression<TExpressionResult> ReplaceByPosition<T1>(ExpressionPosition expressionPosition, IGenericExpression<T1> newExpression)\n"})}),"\n",(0,r.jsx)(s.h4,{id:"type-parameters-3",children:"Type Parameters"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"IGenericExpression&lt;TExpressionResult&gt;.T1"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"expressionPosition"})," ",(0,r.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition",children:"ExpressionPosition"}),(0,r.jsx)("br",{}),"\r\nPosition of the expression to be replaced"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"newExpression"})," IGenericExpression<T1>",(0,r.jsx)("br",{}),"\r\nThe new sub-expression"]}),"\n",(0,r.jsx)(s.h4,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<TExpressionResult>"}),(0,r.jsx)("br",{}),"\r\nNew expression object with replaced sub-expression"]}),"\n",(0,r.jsx)(s.h3,{id:"replacebypositiont1ienumerablestring-igenericexpressiont1",children:(0,r.jsx)(s.strong,{children:"ReplaceByPosition<T1>(IEnumerable<String>, IGenericExpression<T1>)"})}),"\n",(0,r.jsx)(s.p,{children:"Replaces the sub-expression at a certain position in the expression to which the method is applied."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"IGenericExpression<TExpressionResult> ReplaceByPosition<T1>(IEnumerable<string> positionPath, IGenericExpression<T1> newExpression)\n"})}),"\n",(0,r.jsx)(s.h4,{id:"type-parameters-4",children:"Type Parameters"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"IGenericExpression&lt;TExpressionResult&gt;.T1"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(s.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"positionPath"})," ",(0,r.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1",children:"IEnumerable<String>"}),(0,r.jsx)("br",{}),'\r\nPosition of the expression to be replaced. The position is expressed as a path from\r\nthe root of the expression by using a list of strings "Operand" for unary operators, "LeftOperand"/"RightOperand"\r\nfor binary operators, "Operand(index)" for n-ary operators']}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"newExpression"})," IGenericExpression<T1>",(0,r.jsx)("br",{}),"\r\nThe new sub-expression"]}),"\n",(0,r.jsx)(s.h4,{id:"returns-4",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<TExpressionResult>"}),(0,r.jsx)("br",{}),"\r\nNew expression object with replaced sub-expression"]}),"\n",(0,r.jsx)(s.h3,{id:"withnamestring",children:(0,r.jsx)(s.strong,{children:"WithName(String)"})}),"\n",(0,r.jsx)(s.p,{children:"Changes the name of the expression."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"IGenericExpression<TExpressionResult> WithName(string expressionName)\n"})}),"\n",(0,r.jsx)(s.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"expressionName"})," ",(0,r.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{}),"\r\nThe new name of the expression"]}),"\n",(0,r.jsx)(s.h4,{id:"returns-5",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<TExpressionResult>"}),(0,r.jsx)("br",{}),"\r\nThe expression (new object) with the new name"]}),"\n",(0,r.jsx)(s.h3,{id:"applyequivalenceequivalence-checktype",children:(0,r.jsx)(s.strong,{children:"ApplyEquivalence(Equivalence, CheckType)"})}),"\n",(0,r.jsx)(s.p,{children:"Applies an equivalence to the current expression."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"IGenericExpression<TExpressionResult> ApplyEquivalence(Equivalence equivalence, CheckType checkType)\n"})}),"\n",(0,r.jsx)(s.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"equivalence"})," ",(0,r.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence",children:"Equivalence"}),(0,r.jsx)("br",{}),"\r\nThe equivalence to be applied to (a sub-part of) the expression."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"checkType"})," ",(0,r.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType",children:"CheckType"}),(0,r.jsx)("br",{}),"\r\nSince the equivalence is described by a left-side expression and a right-side\r\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\r\nand substitution with the right side, or vice versa, or both)."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-6",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<TExpressionResult>"}),(0,r.jsx)("br",{}),"\r\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."]}),"\n",(0,r.jsx)(s.h3,{id:"applyequivalencebypositionienumerablestring-equivalence-checktype",children:(0,r.jsx)(s.strong,{children:"ApplyEquivalenceByPosition(IEnumerable<String>, Equivalence, CheckType)"})}),"\n",(0,r.jsx)(s.p,{children:"Applies an equivalence to the current expression, allowing the user to specify the position in the expression in\r\nwhich the equivalence should be applied."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"IGenericExpression<TExpressionResult> ApplyEquivalenceByPosition(IEnumerable<string> positionPath, Equivalence equivalence, CheckType checkType)\n"})}),"\n",(0,r.jsx)(s.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"positionPath"})," ",(0,r.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1",children:"IEnumerable<String>"}),(0,r.jsx)("br",{}),'\r\nPosition of the sub-expression to be replaced with an equivalent one.\r\nThe position is expressed as a path from the root of the expression by using a list of strings "Operand" for\r\nunary operators, "LeftOperand"/"RightOperand" for binary operators, "Operand(index)" for n-ary operators']}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"equivalence"})," ",(0,r.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence",children:"Equivalence"}),(0,r.jsx)("br",{}),"\r\nThe equivalence to be applied to (a sub-part of) the expression."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"checkType"})," ",(0,r.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType",children:"CheckType"}),(0,r.jsx)("br",{}),"\r\nSince the equivalence is described by a left-side expression and a right-side\r\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\r\nand substitution with the right side, or vice versa, or both)."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-7",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<TExpressionResult>"}),(0,r.jsx)("br",{}),"\r\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."]}),"\n",(0,r.jsx)(s.h3,{id:"applyequivalencebypositionexpressionposition-equivalence-checktype",children:(0,r.jsx)(s.strong,{children:"ApplyEquivalenceByPosition(ExpressionPosition, Equivalence, CheckType)"})}),"\n",(0,r.jsx)(s.p,{children:"Applies an equivalence to the current expression, allowing the user to specify the position in the expression in\r\nwhich the equivalence should be applied."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:"IGenericExpression<TExpressionResult> ApplyEquivalenceByPosition(ExpressionPosition expressionPosition, Equivalence equivalence, CheckType checkType)\n"})}),"\n",(0,r.jsx)(s.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"expressionPosition"})," ",(0,r.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition",children:"ExpressionPosition"}),(0,r.jsx)("br",{}),"\r\nPosition of the expression to be replaced"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"equivalence"})," ",(0,r.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence",children:"Equivalence"}),(0,r.jsx)("br",{}),"\r\nThe equivalence to be applied to (a sub-part of) the expression."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"checkType"})," ",(0,r.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType",children:"CheckType"}),(0,r.jsx)("br",{}),"\r\nSince the equivalence is described by a left-side expression and a right-side\r\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\r\nand substitution with the right side, or vice versa, or both)."]}),"\n",(0,r.jsx)(s.h4,{id:"returns-8",children:"Returns"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<TExpressionResult>"}),(0,r.jsx)("br",{}),"\r\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."]})]})}function x(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>p});var i=n(6540);const r={},t=i.createContext(r);function o(e){const s=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function p(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);