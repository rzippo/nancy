"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[1713],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),y=a,v=d["".concat(p,".").concat(y)]||d[y]||c[y]||s;return n?r.createElement(v,o(o({ref:t},u),{},{components:n})):r.createElement(v,o({ref:t},u))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8858:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const s={hide_title:!0},o="CurveBinaryExpression&lt;T1, T2&gt;",i={unversionedId:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveBinaryExpression`2",id:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveBinaryExpression`2",title:"CurveBinaryExpression&lt;T1, T2&gt;",description:"Class which describes binary (nor commutative or associative) expressions whose value is a Curve",source:"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveBinaryExpression`2.md",sourceDirName:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions",slug:"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveBinaryExpression`2",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveBinaryExpression`2",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"docsSidebar",previous:{title:"Unipi.Nancy.Expressions",permalink:"/nancy/docs/category/unipinancyexpressions-1"},next:{title:"CurveExpression",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"}},p={},l=[{value:"Type Parameters",id:"type-parameters",level:4},{value:"Properties",id:"properties",level:2},{value:"<strong>LeftExpression</strong>",id:"leftexpression",level:3},{value:"Property Value",id:"property-value",level:4},{value:"<strong>RightExpression</strong>",id:"rightexpression",level:3},{value:"Property Value",id:"property-value-1",level:4},{value:"<strong>Name</strong>",id:"name",level:3},{value:"Property Value",id:"property-value-2",level:4},{value:"<strong>Settings</strong>",id:"settings",level:3},{value:"Property Value",id:"property-value-3",level:4},{value:"<strong>Value</strong>",id:"value",level:3},{value:"Property Value",id:"property-value-4",level:4},{value:"<strong>IsSubAdditive</strong>",id:"issubadditive",level:3},{value:"Property Value",id:"property-value-5",level:4},{value:"<strong>IsLeftContinuous</strong>",id:"isleftcontinuous",level:3},{value:"Property Value",id:"property-value-6",level:4},{value:"<strong>IsRightContinuous</strong>",id:"isrightcontinuous",level:3},{value:"Property Value",id:"property-value-7",level:4},{value:"<strong>IsNonNegative</strong>",id:"isnonnegative",level:3},{value:"Property Value",id:"property-value-8",level:4},{value:"<strong>IsNonDecreasing</strong>",id:"isnondecreasing",level:3},{value:"Property Value",id:"property-value-9",level:4},{value:"<strong>IsConcave</strong>",id:"isconcave",level:3},{value:"Property Value",id:"property-value-10",level:4},{value:"<strong>IsConvex</strong>",id:"isconvex",level:3},{value:"Property Value",id:"property-value-11",level:4},{value:"<strong>IsZeroAtZero</strong>",id:"iszeroatzero",level:3},{value:"Property Value",id:"property-value-12",level:4},{value:"<strong>IsWellDefined</strong>",id:"iswelldefined",level:3},{value:"Property Value",id:"property-value-13",level:4}],u={toc:l};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"curvebinaryexpressiont1-t2"},"CurveBinaryExpression","<","T1, T2",">"),(0,a.kt)("p",null,"Class which describes binary (nor commutative or associative) expressions whose value is a Curve\nobject."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract class CurveBinaryExpression<T1, T2> : CurveExpression, Unipi.Nancy.Expressions.Internals.IGenericExpression`1[[Unipi.Nancy.MinPlusAlgebra.Curve, Unipi.Nancy, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], Unipi.Nancy.Expressions.Visitors.IVisitableCurve, \n")),(0,a.kt)("h4",{id:"type-parameters"},"Type Parameters"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CurveBinaryExpression&lt;T1, T2&gt;.T1"),(0,a.kt)("br",null),"\nThe type of the value of the left operand"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CurveBinaryExpression&lt;T1, T2&gt;.T2"),(0,a.kt)("br",null),"\nThe type of the value of the right operand"),(0,a.kt)("p",null,"Inheritance ",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.object"},"Object")," \u2192 ",(0,a.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression")," \u2192 ",(0,a.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveBinaryExpression%602"},"CurveBinaryExpression","<","T1, T2",">"),(0,a.kt)("br",null),"\nImplements ",(0,a.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","Curve",">"),", ",(0,a.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/IVisitableCurve"},"IVisitableCurve"),", IGenericBinaryExpression","<","T1, T2, Curve",">"),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("h3",{id:"leftexpression"},(0,a.kt)("strong",{parentName:"h3"},"LeftExpression")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public IGenericExpression<T1> LeftExpression { get; }\n")),(0,a.kt)("h4",{id:"property-value"},"Property Value"),(0,a.kt)("p",null,"IGenericExpression","<","T1",">",(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"rightexpression"},(0,a.kt)("strong",{parentName:"h3"},"RightExpression")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public IGenericExpression<T2> RightExpression { get; }\n")),(0,a.kt)("h4",{id:"property-value-1"},"Property Value"),(0,a.kt)("p",null,"IGenericExpression","<","T2",">",(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"name"},(0,a.kt)("strong",{parentName:"h3"},"Name")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public string Name { get; }\n")),(0,a.kt)("h4",{id:"property-value-2"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"settings"},(0,a.kt)("strong",{parentName:"h3"},"Settings")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public ExpressionSettings Settings { get; }\n")),(0,a.kt)("h4",{id:"property-value-3"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"value"},(0,a.kt)("strong",{parentName:"h3"},"Value")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public Curve Value { get; }\n")),(0,a.kt)("h4",{id:"property-value-4"},"Property Value"),(0,a.kt)("p",null,"Curve",(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"issubadditive"},(0,a.kt)("strong",{parentName:"h3"},"IsSubAdditive")),(0,a.kt)("p",null,"True if the curve described by the expression is sub-additive. Property evaluated avoiding as much as possible\nto make any computation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsSubAdditive { get; }\n")),(0,a.kt)("h4",{id:"property-value-5"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"isleftcontinuous"},(0,a.kt)("strong",{parentName:"h3"},"IsLeftContinuous")),(0,a.kt)("p",null,"True if the curve described by the expression is left continuous. Property evaluated avoiding as much as\npossible to make any computation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsLeftContinuous { get; }\n")),(0,a.kt)("h4",{id:"property-value-6"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"isrightcontinuous"},(0,a.kt)("strong",{parentName:"h3"},"IsRightContinuous")),(0,a.kt)("p",null,"True if the curve described by the expression is right continuous. Property evaluated avoiding as much as\npossible to make any computation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsRightContinuous { get; }\n")),(0,a.kt)("h4",{id:"property-value-7"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"isnonnegative"},(0,a.kt)("strong",{parentName:"h3"},"IsNonNegative")),(0,a.kt)("p",null,"True if the curve described by the expression is non-negative. Property evaluated avoiding as much as\npossible to make any computation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsNonNegative { get; }\n")),(0,a.kt)("h4",{id:"property-value-8"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"isnondecreasing"},(0,a.kt)("strong",{parentName:"h3"},"IsNonDecreasing")),(0,a.kt)("p",null,"True if the curve described by the expression is non-decreasing. Property evaluated avoiding as much as\npossible to make any computation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsNonDecreasing { get; }\n")),(0,a.kt)("h4",{id:"property-value-9"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"isconcave"},(0,a.kt)("strong",{parentName:"h3"},"IsConcave")),(0,a.kt)("p",null,"True if the curve described by the expression is concave. Property evaluated avoiding as much as\npossible to make any computation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsConcave { get; }\n")),(0,a.kt)("h4",{id:"property-value-10"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"isconvex"},(0,a.kt)("strong",{parentName:"h3"},"IsConvex")),(0,a.kt)("p",null,"True if the curve described by the expression is convex. Property evaluated avoiding as much as\npossible to make any computation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsConvex { get; }\n")),(0,a.kt)("h4",{id:"property-value-11"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"iszeroatzero"},(0,a.kt)("strong",{parentName:"h3"},"IsZeroAtZero")),(0,a.kt)("p",null,"True if the curve f described by the expression is 0 in 0 (f(0) = 0). Property evaluated avoiding as much as\npossible to make any computation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsZeroAtZero { get; }\n")),(0,a.kt)("h4",{id:"property-value-12"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"iswelldefined"},(0,a.kt)("strong",{parentName:"h3"},"IsWellDefined")),(0,a.kt)("p",null,"True if the operation described by the expression is well-defined according to the definition in\nin ",(0,a.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/References"},"[","BT08","]")," Section 2.1."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsWellDefined { get; }\n")),(0,a.kt)("h4",{id:"property-value-13"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)))}c.isMDXComponent=!0}}]);