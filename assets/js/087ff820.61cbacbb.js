"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[4561],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>v});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=l(n),v=s,m=d["".concat(p,".").concat(v)]||d[v]||c[v]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function v(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4724:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=n(7462),s=(n(7294),n(3905));const a={hide_title:!0},i="SuperAdditiveClosureExpression",o={unversionedId:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/SuperAdditiveClosureExpression",id:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/SuperAdditiveClosureExpression",title:"SuperAdditiveClosureExpression",description:"Class representing an expression whose root operation is the sub-additive closure",source:"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/SuperAdditiveClosureExpression.md",sourceDirName:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals",slug:"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/SuperAdditiveClosureExpression",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/SuperAdditiveClosureExpression",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"docsSidebar",previous:{title:"SubtractionExpression",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/SubtractionExpression"},next:{title:"ToLeftContinuousExpression",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ToLeftContinuousExpression"}},p={},l=[{value:"Properties",id:"properties",level:2},{value:"<strong>Expression</strong>",id:"expression",level:3},{value:"Property Value",id:"property-value",level:4},{value:"<strong>Name</strong>",id:"name",level:3},{value:"Property Value",id:"property-value-1",level:4},{value:"<strong>Settings</strong>",id:"settings",level:3},{value:"Property Value",id:"property-value-2",level:4},{value:"<strong>Value</strong>",id:"value",level:3},{value:"Property Value",id:"property-value-3",level:4},{value:"<strong>IsSubAdditive</strong>",id:"issubadditive",level:3},{value:"Property Value",id:"property-value-4",level:4},{value:"<strong>IsLeftContinuous</strong>",id:"isleftcontinuous",level:3},{value:"Property Value",id:"property-value-5",level:4},{value:"<strong>IsRightContinuous</strong>",id:"isrightcontinuous",level:3},{value:"Property Value",id:"property-value-6",level:4},{value:"<strong>IsNonNegative</strong>",id:"isnonnegative",level:3},{value:"Property Value",id:"property-value-7",level:4},{value:"<strong>IsNonDecreasing</strong>",id:"isnondecreasing",level:3},{value:"Property Value",id:"property-value-8",level:4},{value:"<strong>IsConcave</strong>",id:"isconcave",level:3},{value:"Property Value",id:"property-value-9",level:4},{value:"<strong>IsConvex</strong>",id:"isconvex",level:3},{value:"Property Value",id:"property-value-10",level:4},{value:"<strong>IsZeroAtZero</strong>",id:"iszeroatzero",level:3},{value:"Property Value",id:"property-value-11",level:4},{value:"<strong>IsWellDefined</strong>",id:"iswelldefined",level:3},{value:"Property Value",id:"property-value-12",level:4},{value:"Constructors",id:"constructors",level:2},{value:"<strong>SuperAdditiveClosureExpression(Curve, String, String, ExpressionSettings)</strong>",id:"superadditiveclosureexpressioncurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters",level:4},{value:"<strong>SuperAdditiveClosureExpression(CurveExpression, String, ExpressionSettings)</strong>",id:"superadditiveclosureexpressioncurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Methods",id:"methods",level:2},{value:"<strong>Accept(ICurveExpressionVisitor)</strong>",id:"accepticurveexpressionvisitor",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"<strong>GetHashCode()</strong>",id:"gethashcode",level:3},{value:"Returns",id:"returns",level:4},{value:"<strong>Equals(Object)</strong>",id:"equalsobject",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<strong>Equals(CurveUnaryExpression&lt;Curve&gt;)</strong>",id:"equalscurveunaryexpressioncurve",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-2",level:4},{value:"<strong>Equals(SuperAdditiveClosureExpression)</strong>",id:"equalssuperadditiveclosureexpression",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-3",level:4},{value:"<strong>&lt;Clone&gt;$()</strong>",id:"clone",level:3},{value:"Returns",id:"returns-4",level:4}],u={toc:l};function c(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"superadditiveclosureexpression"},"SuperAdditiveClosureExpression"),(0,s.kt)("p",null,"Class representing an expression whose root operation is the sub-additive closure\n(",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/SuperAdditiveClosureExpression#superadditiveclosurecomputationsettings"},"SuperAdditiveClosure(ComputationSettings)"),")"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public class SuperAdditiveClosureExpression : Unipi.Nancy.Expressions.CurveUnaryExpression<SuperAdditiveClosureExpression>\n")),(0,s.kt)("p",null,"Inheritance ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.object"},"Object")," \u2192 ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression")," \u2192 ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveUnaryExpression%601"},"CurveUnaryExpression","<","Curve",">")," \u2192 ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/SuperAdditiveClosureExpression"},"SuperAdditiveClosureExpression"),(0,s.kt)("br",null),"\nImplements ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","Curve",">"),", ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/IVisitableCurve"},"IVisitableCurve"),", ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.iequatable-1"},"IEquatable","<","CurveExpression",">"),", ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericUnaryExpression%602"},"IGenericUnaryExpression","<","Curve, Curve",">"),", ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.iequatable-1"},"IEquatable","<","CurveUnaryExpression","<","Curve",">",">"),", ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.iequatable-1"},"IEquatable","<","SuperAdditiveClosureExpression",">")),(0,s.kt)("h2",{id:"properties"},"Properties"),(0,s.kt)("h3",{id:"expression"},(0,s.kt)("strong",{parentName:"h3"},"Expression")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public IGenericExpression<Curve> Expression { get; set; }\n")),(0,s.kt)("h4",{id:"property-value"},"Property Value"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","Curve",">"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"name"},(0,s.kt)("strong",{parentName:"h3"},"Name")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public string Name { get; set; }\n")),(0,s.kt)("h4",{id:"property-value-1"},"Property Value"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"settings"},(0,s.kt)("strong",{parentName:"h3"},"Settings")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public ExpressionSettings Settings { get; set; }\n")),(0,s.kt)("h4",{id:"property-value-2"},"Property Value"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"value"},(0,s.kt)("strong",{parentName:"h3"},"Value")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public Curve Value { get; }\n")),(0,s.kt)("h4",{id:"property-value-3"},"Property Value"),(0,s.kt)("p",null,"Curve",(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"issubadditive"},(0,s.kt)("strong",{parentName:"h3"},"IsSubAdditive")),(0,s.kt)("p",null,"True if the curve described by the expression is sub-additive. Property evaluated avoiding as much as possible\nto make any computation."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsSubAdditive { get; }\n")),(0,s.kt)("h4",{id:"property-value-4"},"Property Value"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"isleftcontinuous"},(0,s.kt)("strong",{parentName:"h3"},"IsLeftContinuous")),(0,s.kt)("p",null,"True if the curve described by the expression is left continuous. Property evaluated avoiding as much as\npossible to make any computation."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsLeftContinuous { get; }\n")),(0,s.kt)("h4",{id:"property-value-5"},"Property Value"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"isrightcontinuous"},(0,s.kt)("strong",{parentName:"h3"},"IsRightContinuous")),(0,s.kt)("p",null,"True if the curve described by the expression is right continuous. Property evaluated avoiding as much as\npossible to make any computation."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsRightContinuous { get; }\n")),(0,s.kt)("h4",{id:"property-value-6"},"Property Value"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"isnonnegative"},(0,s.kt)("strong",{parentName:"h3"},"IsNonNegative")),(0,s.kt)("p",null,"True if the curve described by the expression is non-negative. Property evaluated avoiding as much as\npossible to make any computation."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsNonNegative { get; }\n")),(0,s.kt)("h4",{id:"property-value-7"},"Property Value"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"isnondecreasing"},(0,s.kt)("strong",{parentName:"h3"},"IsNonDecreasing")),(0,s.kt)("p",null,"True if the curve described by the expression is non-decreasing. Property evaluated avoiding as much as\npossible to make any computation."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsNonDecreasing { get; }\n")),(0,s.kt)("h4",{id:"property-value-8"},"Property Value"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"isconcave"},(0,s.kt)("strong",{parentName:"h3"},"IsConcave")),(0,s.kt)("p",null,"True if the curve described by the expression is concave. Property evaluated avoiding as much as\npossible to make any computation."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsConcave { get; }\n")),(0,s.kt)("h4",{id:"property-value-9"},"Property Value"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"isconvex"},(0,s.kt)("strong",{parentName:"h3"},"IsConvex")),(0,s.kt)("p",null,"True if the curve described by the expression is convex. Property evaluated avoiding as much as\npossible to make any computation."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsConvex { get; }\n")),(0,s.kt)("h4",{id:"property-value-10"},"Property Value"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"iszeroatzero"},(0,s.kt)("strong",{parentName:"h3"},"IsZeroAtZero")),(0,s.kt)("p",null,"True if the curve f described by the expression is 0 in 0 (f(0) = 0). Property evaluated avoiding as much as\npossible to make any computation."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsZeroAtZero { get; }\n")),(0,s.kt)("h4",{id:"property-value-11"},"Property Value"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"iswelldefined"},(0,s.kt)("strong",{parentName:"h3"},"IsWellDefined")),(0,s.kt)("p",null,"True if the operation described by the expression is well-defined according to the definition\nin ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/References"},"[","BT08","]")," Section 2.1."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsWellDefined { get; }\n")),(0,s.kt)("h4",{id:"property-value-12"},"Property Value"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,s.kt)("br",null)),(0,s.kt)("h2",{id:"constructors"},"Constructors"),(0,s.kt)("h3",{id:"superadditiveclosureexpressioncurve-string-string-expressionsettings"},(0,s.kt)("strong",{parentName:"h3"},"SuperAdditiveClosureExpression(Curve, String, String, ExpressionSettings)")),(0,s.kt)("p",null,"Creates the super-additive closure expression"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public SuperAdditiveClosureExpression(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,s.kt)("h4",{id:"parameters"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"name")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"superadditiveclosureexpressioncurveexpression-string-expressionsettings"},(0,s.kt)("strong",{parentName:"h3"},"SuperAdditiveClosureExpression(CurveExpression, String, ExpressionSettings)")),(0,s.kt)("p",null,"Class representing an expression whose root operation is the sub-additive closure\n(",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/SuperAdditiveClosureExpression#superadditiveclosurecomputationsettings"},"SuperAdditiveClosure(ComputationSettings)"),")"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public SuperAdditiveClosureExpression(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,s.kt)("h4",{id:"parameters-1"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,s.kt)("br",null)),(0,s.kt)("h2",{id:"methods"},"Methods"),(0,s.kt)("h3",{id:"accepticurveexpressionvisitor"},(0,s.kt)("strong",{parentName:"h3"},"Accept(ICurveExpressionVisitor)")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public void Accept(ICurveExpressionVisitor visitor)\n")),(0,s.kt)("h4",{id:"parameters-2"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"visitor")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/ICurveExpressionVisitor"},"ICurveExpressionVisitor"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"gethashcode"},(0,s.kt)("strong",{parentName:"h3"},"GetHashCode()")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public int GetHashCode()\n")),(0,s.kt)("h4",{id:"returns"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32"},"Int32"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"equalsobject"},(0,s.kt)("strong",{parentName:"h3"},"Equals(Object)")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool Equals(object obj)\n")),(0,s.kt)("h4",{id:"parameters-3"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"obj")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.object"},"Object"),(0,s.kt)("br",null)),(0,s.kt)("h4",{id:"returns-1"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"equalscurveunaryexpressioncurve"},(0,s.kt)("strong",{parentName:"h3"},"Equals(CurveUnaryExpression","<","Curve",">",")")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool Equals(CurveUnaryExpression<Curve> other)\n")),(0,s.kt)("h4",{id:"parameters-4"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"other")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveUnaryExpression%601"},"CurveUnaryExpression","<","Curve",">"),(0,s.kt)("br",null)),(0,s.kt)("h4",{id:"returns-2"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"equalssuperadditiveclosureexpression"},(0,s.kt)("strong",{parentName:"h3"},"Equals(SuperAdditiveClosureExpression)")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool Equals(SuperAdditiveClosureExpression other)\n")),(0,s.kt)("h4",{id:"parameters-5"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"other")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/SuperAdditiveClosureExpression"},"SuperAdditiveClosureExpression"),(0,s.kt)("br",null)),(0,s.kt)("h4",{id:"returns-3"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"clone"},(0,s.kt)("strong",{parentName:"h3"},"<","Clone",">","$()")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public SuperAdditiveClosureExpression <Clone>$()\n")),(0,s.kt)("h4",{id:"returns-4"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/SuperAdditiveClosureExpression"},"SuperAdditiveClosureExpression"),(0,s.kt)("br",null)))}c.isMDXComponent=!0}}]);