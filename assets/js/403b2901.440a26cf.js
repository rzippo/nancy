"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[7319],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>x});var s=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,s,i=function(e,n){if(null==e)return{};var t,s,i={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=s.createContext({}),l=function(e){var n=s.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=l(e.components);return s.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},m=s.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=l(t),x=i,d=m["".concat(p,".").concat(x)]||m[x]||u[x]||a;return t?s.createElement(d,r(r({ref:n},c),{},{components:t})):s.createElement(d,r({ref:n},c))}));function x(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=m;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var l=2;l<a;l++)r[l]=t[l];return s.createElement.apply(null,r)}return s.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5402:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var s=t(7462),i=(t(7294),t(3905));const a={hide_title:!0},r="RationalExpression",o={unversionedId:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",id:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",title:"RationalExpression",description:"The class aims at providing the main methods to build, manipulate and print expressions which evaluate to rational",source:"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression.md",sourceDirName:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions",slug:"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"docsSidebar",previous:{title:"RationalBinaryExpression&lt;T1, T2&gt;",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalBinaryExpression`2"},next:{title:"RationalExpressionExtensions",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpressionExtensions"}},p={},l=[{value:"Properties",id:"properties",level:2},{value:"<strong>Name</strong>",id:"name",level:3},{value:"Property Value",id:"property-value",level:4},{value:"<strong>Settings</strong>",id:"settings",level:3},{value:"Property Value",id:"property-value-1",level:4},{value:"<strong>Value</strong>",id:"value",level:3},{value:"Property Value",id:"property-value-2",level:4},{value:"Methods",id:"methods",level:2},{value:"<strong>Compute()</strong>",id:"compute",level:3},{value:"Returns",id:"returns",level:4},{value:"<strong>Accept(IExpressionVisitor)</strong>",id:"acceptiexpressionvisitor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"<strong>Accept(IRationalExpressionVisitor)</strong>",id:"acceptirationalexpressionvisitor",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"<strong>ToLatexString(Int32, Boolean)</strong>",id:"tolatexstringint32-boolean",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<strong>ToUnicodeString(Int32, Boolean)</strong>",id:"tounicodestringint32-boolean",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-2",level:4},{value:"<strong>ToString()</strong>",id:"tostring",level:3},{value:"Returns",id:"returns-3",level:4},{value:"<strong>Estimate()</strong>",id:"estimate",level:3},{value:"Returns",id:"returns-4",level:4},{value:"<strong>ReplaceByValue&lt;T1&gt;(IGenericExpression&lt;T1&gt;, IGenericExpression&lt;T1&gt;)</strong>",id:"replacebyvaluet1igenericexpressiont1-igenericexpressiont1",level:3},{value:"Type Parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-5",level:4},{value:"<strong>ReplaceByPosition&lt;T1&gt;(ExpressionPosition, IGenericExpression&lt;T1&gt;)</strong>",id:"replacebypositiont1expressionposition-igenericexpressiont1",level:3},{value:"Type Parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-6",level:4},{value:"<strong>ReplaceByPosition&lt;T1&gt;(IEnumerable&lt;String&gt;, IGenericExpression&lt;T1&gt;)</strong>",id:"replacebypositiont1ienumerablestring-igenericexpressiont1",level:3},{value:"Type Parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-7",level:4},{value:"<strong>RootPosition()</strong>",id:"rootposition",level:3},{value:"Returns",id:"returns-8",level:4},{value:"<strong>WithName(String)</strong>",id:"withnamestring",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-9",level:4},{value:"<strong>Negate(String, ExpressionSettings)</strong>",id:"negatestring-expressionsettings",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-10",level:4},{value:"<strong>Invert(String, ExpressionSettings)</strong>",id:"invertstring-expressionsettings",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-11",level:4},{value:"<strong>Addition(RationalExpression, String, ExpressionSettings)</strong>",id:"additionrationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-12",level:4},{value:"<strong>Addition(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"additionrationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-13",level:4},{value:"<strong>Addition(Rational, String, String, ExpressionSettings)</strong>",id:"additionrational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-14",level:4},{value:"<strong>Addition(RationalExpression, Rational, String, ExpressionSettings)</strong>",id:"additionrationalexpression-rational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-15",level:4},{value:"<strong>Subtraction(RationalExpression, String, ExpressionSettings)</strong>",id:"subtractionrationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-16",level:4},{value:"<strong>Subtraction(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"subtractionrationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-17",level:4},{value:"<strong>Subtraction(Rational, String, String, ExpressionSettings)</strong>",id:"subtractionrational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-18",level:4},{value:"<strong>Subtraction(RationalExpression, Rational, String, ExpressionSettings)</strong>",id:"subtractionrationalexpression-rational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-19",level:4},{value:"<strong>Product(RationalExpression, String, ExpressionSettings)</strong>",id:"productrationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-20",level:4},{value:"<strong>Product(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"productrationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-21",level:4},{value:"<strong>Product(Rational, String, String, ExpressionSettings)</strong>",id:"productrational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-22",level:4},{value:"<strong>Product(RationalExpression, Rational, String, ExpressionSettings)</strong>",id:"productrationalexpression-rational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-21",level:4},{value:"Returns",id:"returns-23",level:4},{value:"<strong>Division(RationalExpression, String, ExpressionSettings)</strong>",id:"divisionrationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-22",level:4},{value:"Returns",id:"returns-24",level:4},{value:"<strong>Division(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"divisionrationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-23",level:4},{value:"Returns",id:"returns-25",level:4},{value:"<strong>Division(Rational, String, String, ExpressionSettings)</strong>",id:"divisionrational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-24",level:4},{value:"Returns",id:"returns-26",level:4},{value:"<strong>Division(RationalExpression, Rational, String, ExpressionSettings)</strong>",id:"divisionrationalexpression-rational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-25",level:4},{value:"Returns",id:"returns-27",level:4},{value:"<strong>LeastCommonMultiple(RationalExpression, String, ExpressionSettings)</strong>",id:"leastcommonmultiplerationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-26",level:4},{value:"Returns",id:"returns-28",level:4},{value:"<strong>LeastCommonMultiple(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"leastcommonmultiplerationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-27",level:4},{value:"Returns",id:"returns-29",level:4},{value:"<strong>LeastCommonMultiple(Rational, String, String, ExpressionSettings)</strong>",id:"leastcommonmultiplerational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-28",level:4},{value:"Returns",id:"returns-30",level:4},{value:"<strong>LeastCommonMultiple(RationalExpression, Rational, String, ExpressionSettings)</strong>",id:"leastcommonmultiplerationalexpression-rational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-29",level:4},{value:"Returns",id:"returns-31",level:4},{value:"<strong>GreatestCommonDivisor(RationalExpression, String, ExpressionSettings)</strong>",id:"greatestcommondivisorrationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-30",level:4},{value:"Returns",id:"returns-32",level:4},{value:"<strong>GreatestCommonDivisor(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"greatestcommondivisorrationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-31",level:4},{value:"Returns",id:"returns-33",level:4},{value:"<strong>GreatestCommonDivisor(Rational, String, String, ExpressionSettings)</strong>",id:"greatestcommondivisorrational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-32",level:4},{value:"Returns",id:"returns-34",level:4},{value:"<strong>GreatestCommonDivisor(RationalExpression, Rational, String, ExpressionSettings)</strong>",id:"greatestcommondivisorrationalexpression-rational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-33",level:4},{value:"Returns",id:"returns-35",level:4},{value:"<strong>ApplyEquivalence(Equivalence, CheckType)</strong>",id:"applyequivalenceequivalence-checktype",level:3},{value:"Parameters",id:"parameters-34",level:4},{value:"Returns",id:"returns-36",level:4},{value:"<strong>ApplyEquivalenceByPosition(IEnumerable&lt;String&gt;, Equivalence, CheckType)</strong>",id:"applyequivalencebypositionienumerablestring-equivalence-checktype",level:3},{value:"Parameters",id:"parameters-35",level:4},{value:"Returns",id:"returns-37",level:4},{value:"<strong>ApplyEquivalenceByPosition(ExpressionPosition, Equivalence, CheckType)</strong>",id:"applyequivalencebypositionexpressionposition-equivalence-checktype",level:3},{value:"Parameters",id:"parameters-36",level:4},{value:"Returns",id:"returns-38",level:4}],c={toc:l};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,s.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"rationalexpression"},"RationalExpression"),(0,i.kt)("p",null,"The class aims at providing the main methods to build, manipulate and print expressions which evaluate to rational\nnumbers and are based on NetCal curves."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract class RationalExpression : Unipi.Nancy.Expressions.Internals.IGenericExpression`1[[Unipi.Nancy.Numerics.Rational, Unipi.Nancy, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], Unipi.Nancy.Expressions.Visitors.IVisitableRational\n")),(0,i.kt)("p",null,"Inheritance ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.object"},"Object")," \u2192 ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null),"\nImplements ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","Rational",">"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/IVisitableRational"},"IVisitableRational")),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"name"},(0,i.kt)("strong",{parentName:"h3"},"Name")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public string Name { get; }\n")),(0,i.kt)("h4",{id:"property-value"},"Property Value"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"settings"},(0,i.kt)("strong",{parentName:"h3"},"Settings")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public ExpressionSettings Settings { get; }\n")),(0,i.kt)("h4",{id:"property-value-1"},"Property Value"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"value"},(0,i.kt)("strong",{parentName:"h3"},"Value")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public Rational Value { get; }\n")),(0,i.kt)("h4",{id:"property-value-2"},"Property Value"),(0,i.kt)("p",null,"Rational",(0,i.kt)("br",null)),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"compute"},(0,i.kt)("strong",{parentName:"h3"},"Compute()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public Rational Compute()\n")),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,"Rational",(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"acceptiexpressionvisitor"},(0,i.kt)("strong",{parentName:"h3"},"Accept(IExpressionVisitor)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public void Accept(IExpressionVisitor visitor)\n")),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"visitor")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/IExpressionVisitor"},"IExpressionVisitor"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"acceptirationalexpressionvisitor"},(0,i.kt)("strong",{parentName:"h3"},"Accept(IRationalExpressionVisitor)")),(0,i.kt)("p",null,'Method used for implementing the Visitor design pattern: the visited object must "accept" the visitor object.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract void Accept(IRationalExpressionVisitor visitor)\n")),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"visitor")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/IRationalExpressionVisitor"},"IRationalExpressionVisitor"),(0,i.kt)("br",null),"\nThe Visitor object"),(0,i.kt)("h3",{id:"tolatexstringint32-boolean"},(0,i.kt)("strong",{parentName:"h3"},"ToLatexString(Int32, Boolean)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public string ToLatexString(int depth, bool showRationalsAsName)\n")),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"depth")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32"},"Int32"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"showRationalsAsName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"tounicodestringint32-boolean"},(0,i.kt)("strong",{parentName:"h3"},"ToUnicodeString(Int32, Boolean)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public string ToUnicodeString(int depth, bool showRationalsAsName)\n")),(0,i.kt)("h4",{id:"parameters-3"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"depth")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32"},"Int32"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"showRationalsAsName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"tostring"},(0,i.kt)("strong",{parentName:"h3"},"ToString()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public string ToString()\n")),(0,i.kt)("h4",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"estimate"},(0,i.kt)("strong",{parentName:"h3"},"Estimate()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public double Estimate()\n")),(0,i.kt)("h4",{id:"returns-4"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.double"},"Double"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"replacebyvaluet1igenericexpressiont1-igenericexpressiont1"},(0,i.kt)("strong",{parentName:"h3"},"ReplaceByValue","<","T1",">","(IGenericExpression","<","T1",">",", IGenericExpression","<","T1",">",")")),(0,i.kt)("p",null,"Replaces every occurence of a sub-expression in the expression to which the method is applied."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression ReplaceByValue<T1>(IGenericExpression<T1> expressionPattern, IGenericExpression<T1> newExpressionToReplace)\n")),(0,i.kt)("h4",{id:"type-parameters"},"Type Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"RationalExpression.T1"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"parameters-4"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionPattern")," IGenericExpression","<","T1",">",(0,i.kt)("br",null),"\nThe sub-expression to look for in the main expression for being replaced."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"newExpressionToReplace")," IGenericExpression","<","T1",">",(0,i.kt)("br",null),"\nThe new sub-expression."),(0,i.kt)("h4",{id:"returns-5"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null),"\nNew expression object (of type ) with replaced sub-expressions."),(0,i.kt)("h3",{id:"replacebypositiont1expressionposition-igenericexpressiont1"},(0,i.kt)("strong",{parentName:"h3"},"ReplaceByPosition","<","T1",">","(ExpressionPosition, IGenericExpression","<","T1",">",")")),(0,i.kt)("p",null,"Replaces the sub-expression at a certain position in the expression to which the method is applied."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression ReplaceByPosition<T1>(ExpressionPosition expressionPosition, IGenericExpression<T1> newExpressionToReplace)\n")),(0,i.kt)("h4",{id:"type-parameters-1"},"Type Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"RationalExpression.T1"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"parameters-5"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionPosition")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition"},"ExpressionPosition"),(0,i.kt)("br",null),"\nPosition of the expression to be replaced."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"newExpressionToReplace")," IGenericExpression","<","T1",">",(0,i.kt)("br",null),"\nThe new sub-expression."),(0,i.kt)("h4",{id:"returns-6"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null),"\nNew expression object (of type ) with replaced sub-expression."),(0,i.kt)("h3",{id:"replacebypositiont1ienumerablestring-igenericexpressiont1"},(0,i.kt)("strong",{parentName:"h3"},"ReplaceByPosition","<","T1",">","(IEnumerable","<","String",">",", IGenericExpression","<","T1",">",")")),(0,i.kt)("p",null,"Replaces the sub-expression at a certain position in the expression to which the method is applied."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression ReplaceByPosition<T1>(IEnumerable<string> positionPath, IGenericExpression<T1> newExpressionToReplace)\n")),(0,i.kt)("h4",{id:"type-parameters-2"},"Type Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"RationalExpression.T1"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"parameters-6"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"positionPath")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1"},"IEnumerable","<","String",">"),(0,i.kt)("br",null),'\nPosition of the expression to be replaced. The position is expressed as a path from\nthe root of the expression by using a list of strings "Operand" for unary operators, "LeftOperand"/"RightOperand"\nfor binary operators, "Operand(index)" for n-ary operators.'),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"newExpressionToReplace")," IGenericExpression","<","T1",">",(0,i.kt)("br",null),"\nThe new sub-expression."),(0,i.kt)("h4",{id:"returns-7"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null),"\nNew expression object (of type ) with the replaced sub-expression."),(0,i.kt)("h3",{id:"rootposition"},(0,i.kt)("strong",{parentName:"h3"},"RootPosition()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public ExpressionPosition RootPosition()\n")),(0,i.kt)("h4",{id:"returns-8"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition"},"ExpressionPosition"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"withnamestring"},(0,i.kt)("strong",{parentName:"h3"},"WithName(String)")),(0,i.kt)("p",null,"Changes the name of the expression."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression WithName(string expressionName)\n")),(0,i.kt)("h4",{id:"parameters-7"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null),"\nThe new name of the expression"),(0,i.kt)("h4",{id:"returns-9"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null),"\nThe expression (new object of type ) with the new name"),(0,i.kt)("h3",{id:"negatestring-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Negate(String, ExpressionSettings)")),(0,i.kt)("p",null,"Adds the negation operator to the expression."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression Negate(string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-8"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-10"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"invertstring-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Invert(String, ExpressionSettings)")),(0,i.kt)("p",null,"Adds the inversion operator to the expression."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression Invert(string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-9"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-11"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"additionrationalexpression-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Addition(RationalExpression, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the addition between the current expression and the one passed as\nargument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression Addition(RationalExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-10"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-12"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"additionrationalexpression-rationalexpression-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Addition(RationalExpression, RationalExpression, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the addition between the expression !:left and the expression\n!:right passed as arguments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Addition(RationalExpression left, RationalExpression right, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-11"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"left")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"right")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-13"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"additionrational-string-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Addition(Rational, String, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the addition between the current expression and the rational number\n(internally converted to ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") passed as argument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression Addition(Rational rational, string name, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-12"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"rational")," Rational",(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"name")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-14"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"additionrationalexpression-rational-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Addition(RationalExpression, Rational, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the addition between the expression !:left and the rational\nnumber !:right (internally converted to ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") passed as arguments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Addition(RationalExpression left, Rational right, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-13"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"left")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"right")," Rational",(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-15"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"subtractionrationalexpression-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Subtraction(RationalExpression, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the subtraction between the current expression and the one passed as\nargument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression Subtraction(RationalExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-14"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-16"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"subtractionrationalexpression-rationalexpression-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Subtraction(RationalExpression, RationalExpression, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the subtraction between the expression !:left and the\nexpression !:right passed as arguments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Subtraction(RationalExpression left, RationalExpression right, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-15"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"left")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"right")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-17"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"subtractionrational-string-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Subtraction(Rational, String, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the subtraction between the current expression and the rational number\n(internally converted to ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") passed as argument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression Subtraction(Rational rational, string name, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-16"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"rational")," Rational",(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"name")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-18"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"subtractionrationalexpression-rational-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Subtraction(RationalExpression, Rational, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the subtraction between the expression !:left and the rational\nnumber !:right (internally converted to ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") passed as arguments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Subtraction(RationalExpression left, Rational right, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-17"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"left")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"right")," Rational",(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-19"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"productrationalexpression-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Product(RationalExpression, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the product between the current expression and the one passed as\nargument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression Product(RationalExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-18"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-20"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"productrationalexpression-rationalexpression-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Product(RationalExpression, RationalExpression, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the product between the expression !:left and the expression\n!:right passed as arguments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Product(RationalExpression left, RationalExpression right, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-19"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"left")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"right")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-21"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"productrational-string-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Product(Rational, String, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the product between the current expression and the rational number\n(internally converted to ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") passed as argument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression Product(Rational rational, string name, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-20"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"rational")," Rational",(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"name")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-22"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"productrationalexpression-rational-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Product(RationalExpression, Rational, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the product between the expression !:left and the rational\nnumber !:right (internally converted to ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") passed as arguments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Product(RationalExpression left, Rational right, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-21"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"left")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"right")," Rational",(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-23"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"divisionrationalexpression-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Division(RationalExpression, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the division between the current expression and the one passed as\nargument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression Division(RationalExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-22"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-24"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"divisionrationalexpression-rationalexpression-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Division(RationalExpression, RationalExpression, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the division between the expression !:left and the expression\n!:right passed as arguments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Division(RationalExpression left, RationalExpression right, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-23"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"left")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"right")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-25"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"divisionrational-string-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Division(Rational, String, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the division between the current expression and the rational number\n(internally converted to ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") passed as argument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression Division(Rational rational, string name, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-24"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"rational")," Rational",(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"name")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-26"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"divisionrationalexpression-rational-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"Division(RationalExpression, Rational, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the division between the expression !:left and the rational\nnumber !:right (internally converted to ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") passed as arguments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Division(RationalExpression left, Rational right, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-25"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"left")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"right")," Rational",(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-27"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"leastcommonmultiplerationalexpression-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"LeastCommonMultiple(RationalExpression, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the l.c.m. between the current expression and the one passed as\nargument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression LeastCommonMultiple(RationalExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-26"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-28"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"leastcommonmultiplerationalexpression-rationalexpression-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"LeastCommonMultiple(RationalExpression, RationalExpression, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the l.c.m. between the expression !:left and the expression\n!:right passed as arguments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression LeastCommonMultiple(RationalExpression left, RationalExpression right, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-27"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"left")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"right")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-29"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"leastcommonmultiplerational-string-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"LeastCommonMultiple(Rational, String, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the l.c.m. between the current expression and the rational number\n(internally converted to ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") passed as argument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression LeastCommonMultiple(Rational rational, string name, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-28"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"rational")," Rational",(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"name")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-30"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"leastcommonmultiplerationalexpression-rational-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"LeastCommonMultiple(RationalExpression, Rational, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the l.c.m. between the expression !:left and the rational\nnumber !:right (internally converted to ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") passed as arguments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression LeastCommonMultiple(RationalExpression left, Rational right, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-29"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"left")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"right")," Rational",(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-31"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"greatestcommondivisorrationalexpression-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"GreatestCommonDivisor(RationalExpression, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the g.c.d. between the current expression and the one passed as\nargument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression GreatestCommonDivisor(RationalExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-30"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-32"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"greatestcommondivisorrationalexpression-rationalexpression-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"GreatestCommonDivisor(RationalExpression, RationalExpression, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the g.c.d. between the expression !:left and the expression\n!:right passed as arguments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression GreatestCommonDivisor(RationalExpression left, RationalExpression right, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-31"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"left")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"right")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-33"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"greatestcommondivisorrational-string-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"GreatestCommonDivisor(Rational, String, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the g.c.d. between the current expression and the rational number\n(internally converted to ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") passed as argument."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression GreatestCommonDivisor(Rational rational, string name, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-32"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"rational")," Rational",(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"name")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-34"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"greatestcommondivisorrationalexpression-rational-string-expressionsettings"},(0,i.kt)("strong",{parentName:"h3"},"GreatestCommonDivisor(RationalExpression, Rational, String, ExpressionSettings)")),(0,i.kt)("p",null,"Creates a new expression composed of the g.c.d. between the expression !:left and the rational\nnumber !:right (internally converted to ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") passed as arguments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression GreatestCommonDivisor(RationalExpression left, Rational right, string expressionName, ExpressionSettings settings)\n")),(0,i.kt)("h4",{id:"parameters-33"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"left")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"right")," Rational",(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,i.kt)("br",null)),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,i.kt)("br",null)),(0,i.kt)("h4",{id:"returns-35"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"applyequivalenceequivalence-checktype"},(0,i.kt)("strong",{parentName:"h3"},"ApplyEquivalence(Equivalence, CheckType)")),(0,i.kt)("p",null,"Applies an equivalence to the current expression."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression ApplyEquivalence(Equivalence equivalence, CheckType checkType)\n")),(0,i.kt)("h4",{id:"parameters-34"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"equivalence")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence"},"Equivalence"),(0,i.kt)("br",null),"\nThe equivalence to be applied to (a sub-part of) the expression."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"checkType")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType"},"CheckType"),(0,i.kt)("br",null),"\nSince the equivalence is described by a left-side expression and a right-side\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\nand substitution with the right side, or vice versa, or both)."),(0,i.kt)("h4",{id:"returns-36"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null),"\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."),(0,i.kt)("h3",{id:"applyequivalencebypositionienumerablestring-equivalence-checktype"},(0,i.kt)("strong",{parentName:"h3"},"ApplyEquivalenceByPosition(IEnumerable","<","String",">",", Equivalence, CheckType)")),(0,i.kt)("p",null,"Applies an equivalence to the current expression, allowing the user to specify the position in the expression in\nwhich the equivalence should be applied."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression ApplyEquivalenceByPosition(IEnumerable<string> positionPath, Equivalence equivalence, CheckType checkType)\n")),(0,i.kt)("h4",{id:"parameters-35"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"positionPath")," ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1"},"IEnumerable","<","String",">"),(0,i.kt)("br",null),'\nPosition of the sub-expression to be replaced with an equivalent one.\nThe position is expressed as a path from the root of the expression by using a list of strings "Operand" for\nunary operators, "LeftOperand"/"RightOperand" for binary operators, "Operand(index)" for n-ary operators'),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"equivalence")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence"},"Equivalence"),(0,i.kt)("br",null),"\nThe equivalence to be applied to (a sub-part of) the expression."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"checkType")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType"},"CheckType"),(0,i.kt)("br",null),"\nSince the equivalence is described by a left-side expression and a right-side\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\nand substitution with the right side, or vice versa, or both)."),(0,i.kt)("h4",{id:"returns-37"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null),"\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."),(0,i.kt)("h3",{id:"applyequivalencebypositionexpressionposition-equivalence-checktype"},(0,i.kt)("strong",{parentName:"h3"},"ApplyEquivalenceByPosition(ExpressionPosition, Equivalence, CheckType)")),(0,i.kt)("p",null,"Applies an equivalence to the current expression, allowing the user to specify the position in the expression in\nwhich the equivalence should be applied."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public RationalExpression ApplyEquivalenceByPosition(ExpressionPosition expressionPosition, Equivalence equivalence, CheckType checkType)\n")),(0,i.kt)("h4",{id:"parameters-36"},"Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"expressionPosition")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition"},"ExpressionPosition"),(0,i.kt)("br",null),"\nPosition of the expression to be replaced"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"equivalence")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence"},"Equivalence"),(0,i.kt)("br",null),"\nThe equivalence to be applied to (a sub-part of) the expression."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"checkType")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType"},"CheckType"),(0,i.kt)("br",null),"\nSince the equivalence is described by a left-side expression and a right-side\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\nand substitution with the right side, or vice versa, or both)."),(0,i.kt)("h4",{id:"returns-38"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,i.kt)("br",null),"\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."))}u.isMDXComponent=!0}}]);