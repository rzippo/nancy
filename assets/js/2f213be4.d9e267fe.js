"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[8423],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=s(t),m=i,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||o;return t?r.createElement(f,a(a({ref:n},l),{},{components:t})):r.createElement(f,a({ref:n},l))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var c={};for(var u in n)hasOwnProperty.call(n,u)&&(c[u]=n[u]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var s=2;s<o;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5775:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],c={hide_title:!0,sidebar_position:1,title:"Introduction"},u="Introduction",s={unversionedId:"nancy/introduction",id:"nancy/introduction",title:"Introduction",description:"Here you will find the full documentation for Nancy.",source:"@site/docs/nancy/introduction.md",sourceDirName:"nancy",slug:"/nancy/introduction",permalink:"/docs/nancy/introduction",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{hide_title:!0,sidebar_position:1,title:"Introduction"},sidebar:"docsSidebar",next:{title:"Unipi.Nancy.MinPlusAlgebra",permalink:"/docs/category/unipinancyminplusalgebra"}},l={},p=[{value:"Unipi.Nancy.MinPlusAlgebra",id:"unipinancyminplusalgebra",level:2},{value:"Unipi.Nancy.NetworkCalculus",id:"unipinancynetworkcalculus",level:2},{value:"Unipi.Nancy.Numerics",id:"unipinancynumerics",level:2}],d={toc:p};function m(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Here you will find the full documentation for Nancy."),(0,o.kt)("h2",{id:"unipinancyminplusalgebra"},"Unipi.Nancy.MinPlusAlgebra"),(0,o.kt)("p",null,"This namespace contains the main types of the library, supporting NC operations for generic UPP curves."),(0,o.kt)("h2",{id:"unipinancynetworkcalculus"},"Unipi.Nancy.NetworkCalculus"),(0,o.kt)("p",null,"This namespace contains the derived types for common types of curves."),(0,o.kt)("p",null,"These types provide simplified constructors and optimized operations, so it's generally advised to use these when you can. "),(0,o.kt)("h2",{id:"unipinancynumerics"},"Unipi.Nancy.Numerics"),(0,o.kt)("p",null,"This namespace contains the numeric types used in Nancy."),(0,o.kt)("p",null,"Nancy uses rational numbers, to ensure correctness of computations."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Numerics/LongRational"},"LongRational")," represents rational numbers using 64 bit integers as numerator and denominator. It is fast, but the precision is limited and can result in arithmetic overflows.  "),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Numerics/BigRational"},"BigRational")," uses instead ",(0,o.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger"},"BigInteger"),"s for numerator and denominator. This type represents integers with an unlimited amount of bits, ensuring arithmetic overflows are never a problem at the cost of lower speed."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Numerics/Rational"},"Rational")," is equal to either of those two, based on which of these compilation flags is used:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"BIG_RATIONAL")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"LONG_RATIONAL"))),(0,o.kt)("p",null,"By default, Nancy is compiled using ",(0,o.kt)("inlineCode",{parentName:"p"},"BIG_RATIONAL"),"."))}m.isMDXComponent=!0}}]);