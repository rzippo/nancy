"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[6431],{1822:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var o=n(7462),i=(n(7294),n(3905)),a=n(2004),l=n(4996);const s={hide_title:!0,title:"Using notebooks",sidebar_position:2},r="Using notebooks",p={unversionedId:"tutorials/getting-started/notebooks",id:"tutorials/getting-started/notebooks",title:"Using notebooks",description:"A .NET notebook is a .dib file that contains snippets of code, called cells, which you can individually run to immediately see their outputs.",source:"@site/docs/tutorials/getting-started/notebooks.mdx",sourceDirName:"tutorials/getting-started",slug:"/tutorials/getting-started/notebooks",permalink:"/nancy/docs/tutorials/getting-started/notebooks",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{hide_title:!0,title:"Using notebooks",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/nancy/docs/tutorials/getting-started/installation"},next:{title:"Main types",permalink:"/nancy/docs/tutorials/first-tutorial/upp-types"}},u={},c=[{value:"How to plot",id:"how-to-plot",level:2}],d={toc:c};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"using-notebooks"},"Using notebooks"),(0,i.kt)("p",null,"A .NET notebook is a ",(0,i.kt)("inlineCode",{parentName:"p"},".dib")," file that contains snippets of code, called ",(0,i.kt)("em",{parentName:"p"},"cells"),", which you can individually run to immediately see their outputs."),(0,i.kt)("p",null,"They are useful to show and discuss code step by step, as we do in our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/rzippo/nancy/tree/master/examples"},"examples"),", but also to be modified and try things out."),(0,i.kt)("figure",null,(0,i.kt)(a.Z,{preload:!0,playing:!0,loop:!0,controls:!0,muted:!0,width:"100%",height:"auto",url:(0,l.Z)("/img/tutorials/plot-gif.webm"),mdxType:"ReactPlayer"}),(0,i.kt)("figcaption",null,"Running a cell in VS Code.")),(0,i.kt)("p",null,"The plotting functionality in .NET notebooks is provided with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Nancy.Interactive")," package. This is how you import it into a notebook:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'#r "nuget: Unipi.Nancy.Interactive"\n\nusing Unipi.Nancy.Interactive;\n')),(0,i.kt)("h2",{id:"how-to-plot"},"How to plot"),(0,i.kt)("p",null,"The main way to plot your curves is the ",(0,i.kt)("inlineCode",{parentName:"p"},"Plots.Plot()")," methods,\nwhich has various overloads to make it easier and immediate to use."),(0,i.kt)("figure",null,(0,i.kt)("img",{src:(0,l.Z)("/img/tutorials/plot-example.png")}),(0,i.kt)("figcaption",null,"Example of use: the call to ",(0,i.kt)("code",null,"Plots.Plot()")," generates the image below the notebook cell.")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"Plots.Plot()")," is designed and tested only for simple visualizations in notebooks. For other contexts and uses you may need something different.\n",(0,i.kt)("inlineCode",{parentName:"p"},"Plots.GetPlot()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Plots.GetPlotHtml()")," return objects than can be used to render the plot elsewhere, e.g. in a browser page.\nFor TikZ plots, see ",(0,i.kt)("inlineCode",{parentName:"p"},"ToTikzPlot()"),". ")),(0,i.kt)("p",null,"You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"Plots.Plot()")," to visualize one or more ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy/Unipi.Nancy.MinPlusAlgebra/Curve"},"Curve")," or ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy/Unipi.Nancy.MinPlusAlgebra/Sequence"},"Sequence")," objects. Many overloads are available:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Plots.Plot(curve, name, limit)"),": plots the given curve from ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"limit"),", using ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," for the legend."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Plots.Plot(curves, names, limit)"),": plots the given list of curves from ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"limit"),", using the corresponding ",(0,i.kt)("inlineCode",{parentName:"li"},"names")," for the legend."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Plots.Plot(sequence, name, limit)"),": plots the given sequence, using ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," for the legend."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Plots.Plot(sequences, names, limit)"),": plots the given list of sequences, using the corresponding ",(0,i.kt)("inlineCode",{parentName:"li"},"names")," for the legend.")),(0,i.kt)("p",null,"Names can be omitted.\nFor the overloads for single curve or sequence will, the default name will capture the name of the variable passed as argument, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"Plots.Plot(beta)"),' will show "beta" in the legend.\nFor the overloads for multiple curves or sequences, names ',(0,i.kt)("em",{parentName:"p"},"f"),", ",(0,i.kt)("em",{parentName:"p"},"g"),", ",(0,i.kt)("em",{parentName:"p"},"h"),", and so on, will be used instead. "),(0,i.kt)("p",null,"For ",(0,i.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy/Unipi.Nancy.MinPlusAlgebra/Curve"},"Curve"),"s, you can omit the time limit, in which case the function will compute a default one."),(0,i.kt)("p",null,"With the overloads described above, you can either explicitly declare the lists or arrays (both are fine), e.g."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'var sc = new Curve( ... );\nvar ac = new Curve( ... );\nPlots.Plot(\n    new Curve[]{sc, ac},\n    new string[]{"sc", "ac"}, // string[]\n);\n')),(0,i.kt)("p",null,"or use ",(0,i.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/collection-expressions"},"collection expressions"),", e.g."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Plots.Plot([sc, ac],["sc", "ac"]);\n')),(0,i.kt)("p",null,"However, if none of the optional arguments is provided, you can use an even simpler syntax"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Plots.Plot(sc, ac);   // they will be called "f" and "g" in the legend\n')))}m.isMDXComponent=!0}}]);