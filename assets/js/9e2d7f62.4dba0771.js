"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[552],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>d});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=t.createContext({}),l=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},c=function(e){var n=l(e.components);return t.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,s=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),y=l(r),d=i,x=y["".concat(p,".").concat(d)]||y[d]||u[d]||s;return r?t.createElement(x,a(a({ref:n},c),{},{components:r})):t.createElement(x,a({ref:n},c))}));function d(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=r.length,a=new Array(s);a[0]=y;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var l=2;l<s;l++)a[l]=r[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}y.displayName="MDXCreateElement"},5286:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var t=r(7462),i=(r(7294),r(3905));const s={hide_title:!0},a="IGenericBinaryExpression&lt;T1, T2, TResult&gt;",o={unversionedId:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericBinaryExpression`3",id:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericBinaryExpression`3",title:"IGenericBinaryExpression&lt;T1, T2, TResult&gt;",description:"Interface with members and functions which allow to define a binary (neither commutative nor associative) expression,",source:"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericBinaryExpression`3.md",sourceDirName:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals",slug:"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericBinaryExpression`3",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericBinaryExpression`3",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"docsSidebar",previous:{title:"HorizontalDeviationExpression",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/HorizontalDeviationExpression"},next:{title:"IGenericExpression&lt;T&gt;",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression`1"}},p={},l=[{value:"Type Parameters",id:"type-parameters",level:4},{value:"Properties",id:"properties",level:2},{value:"<strong>LeftExpression</strong>",id:"leftexpression",level:3},{value:"Property Value",id:"property-value",level:4},{value:"<strong>RightExpression</strong>",id:"rightexpression",level:3},{value:"Property Value",id:"property-value-1",level:4}],c={toc:l};function u(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"igenericbinaryexpressiont1-t2-tresult"},"IGenericBinaryExpression","<","T1, T2, TResult",">"),(0,i.kt)("p",null,"Interface with members and functions which allow to define a binary (neither commutative nor associative) expression,\ni.e. an expression whose root node corresponds to an operation that involves two operands."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public interface IGenericBinaryExpression<T1, T2, TResult> : IGenericExpression`1\n")),(0,i.kt)("h4",{id:"type-parameters"},"Type Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"IGenericBinaryExpression&lt;T1, T2, TResult&gt;.T1"),(0,i.kt)("br",null),"\nLeft operand type"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"IGenericBinaryExpression&lt;T1, T2, TResult&gt;.T2"),(0,i.kt)("br",null),"\nRight operand type"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"IGenericBinaryExpression&lt;T1, T2, TResult&gt;.TResult"),(0,i.kt)("br",null),"\nResult type"),(0,i.kt)("p",null,"Implements IGenericExpression","<","TResult",">"),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"leftexpression"},(0,i.kt)("strong",{parentName:"h3"},"LeftExpression")),(0,i.kt)("p",null,"Left operand expression"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract IGenericExpression<T1> LeftExpression { get; }\n")),(0,i.kt)("h4",{id:"property-value"},"Property Value"),(0,i.kt)("p",null,"IGenericExpression","<","T1",">",(0,i.kt)("br",null)),(0,i.kt)("h3",{id:"rightexpression"},(0,i.kt)("strong",{parentName:"h3"},"RightExpression")),(0,i.kt)("p",null,"Right operand expression"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract IGenericExpression<T2> RightExpression { get; }\n")),(0,i.kt)("h4",{id:"property-value-1"},"Property Value"),(0,i.kt)("p",null,"IGenericExpression","<","T2",">",(0,i.kt)("br",null)))}u.isMDXComponent=!0}}]);