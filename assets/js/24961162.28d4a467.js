"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[3306],{8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>o});var r=n(6540);const i={},t=r.createContext(i);function a(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:s},e.children)}},9291:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>x,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression","title":"CurveExpression","description":"Class which describes NetCal expressions that evaluate to curves. The class aims at providing the main methods to","source":"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression.md","sourceDirName":"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions","slug":"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true,"title":"CurveExpression"},"sidebar":"docsSidebar","previous":{"title":"CurveBinaryExpression<T1, T2>","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveBinaryExpression"},"next":{"title":"CurveExpressionExtensions","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpressionExtensions"}}');var i=n(4848),t=n(8453);const a={hide_title:!0,title:"CurveExpression"},o="CurveExpression",c={},l=[{value:"Fields",id:"fields",level:2},{value:"<strong>Equivalences</strong>",id:"equivalences",level:3},{value:"Properties",id:"properties",level:2},{value:"<strong>Name</strong>",id:"name",level:3},{value:"Property Value",id:"property-value",level:4},{value:"<strong>Settings</strong>",id:"settings",level:3},{value:"Property Value",id:"property-value-1",level:4},{value:"<strong>Value</strong>",id:"value",level:3},{value:"Property Value",id:"property-value-2",level:4},{value:"<strong>IsSubAdditive</strong>",id:"issubadditive",level:3},{value:"Property Value",id:"property-value-3",level:4},{value:"<strong>IsLeftContinuous</strong>",id:"isleftcontinuous",level:3},{value:"Property Value",id:"property-value-4",level:4},{value:"<strong>IsRightContinuous</strong>",id:"isrightcontinuous",level:3},{value:"Property Value",id:"property-value-5",level:4},{value:"<strong>IsNonNegative</strong>",id:"isnonnegative",level:3},{value:"Property Value",id:"property-value-6",level:4},{value:"<strong>IsNonDecreasing</strong>",id:"isnondecreasing",level:3},{value:"Property Value",id:"property-value-7",level:4},{value:"<strong>IsConcave</strong>",id:"isconcave",level:3},{value:"Property Value",id:"property-value-8",level:4},{value:"<strong>IsConvex</strong>",id:"isconvex",level:3},{value:"Property Value",id:"property-value-9",level:4},{value:"<strong>IsZeroAtZero</strong>",id:"iszeroatzero",level:3},{value:"Property Value",id:"property-value-10",level:4},{value:"<strong>IsWellDefined</strong>",id:"iswelldefined",level:3},{value:"Property Value",id:"property-value-11",level:4},{value:"Methods",id:"methods",level:2},{value:"<strong>Negate(String, ExpressionSettings)</strong>",id:"negatestring-expressionsettings",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"<strong>ToNonNegative(String, ExpressionSettings)</strong>",id:"tononnegativestring-expressionsettings",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<strong>SubAdditiveClosure(String, ExpressionSettings)</strong>",id:"subadditiveclosurestring-expressionsettings",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"<strong>SuperAdditiveClosure(String, ExpressionSettings)</strong>",id:"superadditiveclosurestring-expressionsettings",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"<strong>ToUpperNonDecreasing(String, ExpressionSettings)</strong>",id:"touppernondecreasingstring-expressionsettings",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"<strong>ToLowerNonDecreasing(String, ExpressionSettings)</strong>",id:"tolowernondecreasingstring-expressionsettings",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"<strong>ToLeftContinuous(String, ExpressionSettings)</strong>",id:"toleftcontinuousstring-expressionsettings",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"<strong>ToRightContinuous(String, ExpressionSettings)</strong>",id:"torightcontinuousstring-expressionsettings",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"<strong>WithZeroOrigin(String, ExpressionSettings)</strong>",id:"withzerooriginstring-expressionsettings",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"<strong>LowerPseudoInverse(String, ExpressionSettings)</strong>",id:"lowerpseudoinversestring-expressionsettings",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"<strong>UpperPseudoInverse(String, ExpressionSettings)</strong>",id:"upperpseudoinversestring-expressionsettings",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"<strong>Addition(CurveExpression, String, ExpressionSettings)</strong>",id:"additioncurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"<strong>Addition(Curve, String, String, ExpressionSettings)</strong>",id:"additioncurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"<strong>Addition(CurveExpression, Curve, String, ExpressionSettings)</strong>",id:"additioncurveexpression-curve-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"<strong>Subtraction(CurveExpression, Boolean, String, ExpressionSettings)</strong>",id:"subtractioncurveexpression-boolean-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-14",level:4},{value:"<strong>Subtraction(Curve, Boolean, String, String, ExpressionSettings)</strong>",id:"subtractioncurve-boolean-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-15",level:4},{value:"<strong>Minimum(CurveExpression, String, ExpressionSettings)</strong>",id:"minimumcurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-16",level:4},{value:"<strong>Minimum(Curve, String, String, ExpressionSettings)</strong>",id:"minimumcurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-17",level:4},{value:"<strong>Maximum(CurveExpression, String, ExpressionSettings)</strong>",id:"maximumcurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-18",level:4},{value:"<strong>Maximum(Curve, String, String, ExpressionSettings)</strong>",id:"maximumcurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-19",level:4},{value:"<strong>Convolution(CurveExpression, String, ExpressionSettings)</strong>",id:"convolutioncurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-20",level:4},{value:"<strong>Convolution(Curve, String, String, ExpressionSettings)</strong>",id:"convolutioncurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-21",level:4},{value:"Returns",id:"returns-21",level:4},{value:"<strong>Deconvolution(CurveExpression, String, ExpressionSettings)</strong>",id:"deconvolutioncurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-22",level:4},{value:"Returns",id:"returns-22",level:4},{value:"<strong>Deconvolution(Curve, String, String, ExpressionSettings)</strong>",id:"deconvolutioncurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-23",level:4},{value:"Returns",id:"returns-23",level:4},{value:"<strong>MaxPlusConvolution(CurveExpression, String, ExpressionSettings)</strong>",id:"maxplusconvolutioncurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-24",level:4},{value:"Returns",id:"returns-24",level:4},{value:"<strong>MaxPlusConvolution(Curve, String, String, ExpressionSettings)</strong>",id:"maxplusconvolutioncurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-25",level:4},{value:"Returns",id:"returns-25",level:4},{value:"<strong>MaxPlusDeconvolution(CurveExpression, String, ExpressionSettings)</strong>",id:"maxplusdeconvolutioncurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-26",level:4},{value:"Returns",id:"returns-26",level:4},{value:"<strong>MaxPlusDeconvolution(Curve, String, String, ExpressionSettings)</strong>",id:"maxplusdeconvolutioncurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-27",level:4},{value:"Returns",id:"returns-27",level:4},{value:"<strong>Composition(CurveExpression, String, ExpressionSettings)</strong>",id:"compositioncurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-28",level:4},{value:"Returns",id:"returns-28",level:4},{value:"<strong>Composition(Curve, String, String, ExpressionSettings)</strong>",id:"compositioncurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-29",level:4},{value:"Returns",id:"returns-29",level:4},{value:"<strong>DelayBy(RationalExpression, String, ExpressionSettings)</strong>",id:"delaybyrationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-30",level:4},{value:"Returns",id:"returns-30",level:4},{value:"<strong>DelayBy(Rational, String, ExpressionSettings)</strong>",id:"delaybyrational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-31",level:4},{value:"Returns",id:"returns-31",level:4},{value:"<strong>ForwardBy(RationalExpression, String, ExpressionSettings)</strong>",id:"forwardbyrationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-32",level:4},{value:"Returns",id:"returns-32",level:4},{value:"<strong>ForwardBy(Rational, String, ExpressionSettings)</strong>",id:"forwardbyrational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-33",level:4},{value:"Returns",id:"returns-33",level:4},{value:"<strong>Scale(RationalExpression, String, ExpressionSettings)</strong>",id:"scalerationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-34",level:4},{value:"Returns",id:"returns-34",level:4},{value:"<strong>Scale(Rational, String, ExpressionSettings)</strong>",id:"scalerational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-35",level:4},{value:"Returns",id:"returns-35",level:4},{value:"<strong>Compute()</strong>",id:"compute",level:3},{value:"Returns",id:"returns-36",level:4},{value:"<strong>ReplaceByValue&lt;T1&gt;(IGenericExpression&lt;T1&gt;, IGenericExpression&lt;T1&gt;, Boolean)</strong>",id:"replacebyvaluet1igenericexpressiont1-igenericexpressiont1-boolean",level:3},{value:"Type Parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-36",level:4},{value:"Returns",id:"returns-37",level:4},{value:"<strong>ReplaceByPosition&lt;T1&gt;(ExpressionPosition, IGenericExpression&lt;T1&gt;)</strong>",id:"replacebypositiont1expressionposition-igenericexpressiont1",level:3},{value:"Type Parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-37",level:4},{value:"Returns",id:"returns-38",level:4},{value:"<strong>ReplaceByPosition&lt;T1&gt;(IEnumerable&lt;String&gt;, IGenericExpression&lt;T1&gt;)</strong>",id:"replacebypositiont1ienumerablestring-igenericexpressiont1",level:3},{value:"Type Parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-38",level:4},{value:"Returns",id:"returns-39",level:4},{value:"<strong>ApplyEquivalence(Equivalence, CheckType)</strong>",id:"applyequivalenceequivalence-checktype",level:3},{value:"Parameters",id:"parameters-39",level:4},{value:"Returns",id:"returns-40",level:4},{value:"<strong>ApplyEquivalenceByPosition(IEnumerable&lt;String&gt;, Equivalence, CheckType)</strong>",id:"applyequivalencebypositionienumerablestring-equivalence-checktype",level:3},{value:"Parameters",id:"parameters-40",level:4},{value:"Returns",id:"returns-41",level:4},{value:"<strong>ApplyEquivalenceByPosition(ExpressionPosition, Equivalence, CheckType)</strong>",id:"applyequivalencebypositionexpressionposition-equivalence-checktype",level:3},{value:"Parameters",id:"parameters-41",level:4},{value:"Returns",id:"returns-42",level:4},{value:"<strong>Equivalent(IGenericExpression&lt;Curve&gt;)</strong>",id:"equivalentigenericexpressioncurve",level:3},{value:"Parameters",id:"parameters-42",level:4},{value:"Returns",id:"returns-43",level:4},{value:"<strong>AddEquivalence(Type, Equivalence)</strong>",id:"addequivalencetype-equivalence",level:3},{value:"Parameters",id:"parameters-43",level:4},{value:"<strong>Accept(IExpressionVisitor)</strong>",id:"acceptiexpressionvisitor",level:3},{value:"Parameters",id:"parameters-44",level:4},{value:"<strong>Accept(ICurveExpressionVisitor)</strong>",id:"accepticurveexpressionvisitor",level:3},{value:"Parameters",id:"parameters-45",level:4},{value:"<strong>ToLatexString(Int32, Boolean)</strong>",id:"tolatexstringint32-boolean",level:3},{value:"Parameters",id:"parameters-46",level:4},{value:"Returns",id:"returns-44",level:4},{value:"<strong>ToUnicodeString(Int32, Boolean)</strong>",id:"tounicodestringint32-boolean",level:3},{value:"Parameters",id:"parameters-47",level:4},{value:"Returns",id:"returns-45",level:4},{value:"<strong>ToString()</strong>",id:"tostring",level:3},{value:"Returns",id:"returns-46",level:4},{value:"<strong>Estimate()</strong>",id:"estimate",level:3},{value:"Returns",id:"returns-47",level:4},{value:"<strong>RootPosition()</strong>",id:"rootposition",level:3},{value:"Returns",id:"returns-48",level:4},{value:"<strong>WithName(String)</strong>",id:"withnamestring",level:3},{value:"Parameters",id:"parameters-48",level:4},{value:"Returns",id:"returns-49",level:4},{value:"<strong>IsUltimatelyConstant()</strong>",id:"isultimatelyconstant",level:3},{value:"Returns",id:"returns-50",level:4},{value:"<strong>GetHashCode()</strong>",id:"gethashcode",level:3},{value:"Returns",id:"returns-51",level:4},{value:"<strong>Equals(Object)</strong>",id:"equalsobject",level:3},{value:"Parameters",id:"parameters-49",level:4},{value:"Returns",id:"returns-52",level:4},{value:"<strong>Equals(CurveExpression)</strong>",id:"equalscurveexpression",level:3},{value:"Parameters",id:"parameters-50",level:4},{value:"Returns",id:"returns-53",level:4},{value:"<strong>&lt;Clone&gt;$()</strong>",id:"clone",level:3},{value:"Returns",id:"returns-54",level:4}];function p(e){const s={a:"a",annotation:"annotation",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msubsup:"msubsup",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"curveexpression",children:"CurveExpression"})}),"\n",(0,i.jsx)(s.p,{children:"Class which describes NetCal expressions that evaluate to curves. The class aims at providing the main methods to\r\nbuild, manipulate and print network calculus expressions."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public abstract class CurveExpression : Unipi.Nancy.Expressions.Internals.IGenericExpression<CurveExpression>\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Inheritance ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.object",children:"Object"})," \u2192 ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{}),"\r\nImplements ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<Curve>"}),", ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/IExpression",children:"IExpression"}),", ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/IVisitableCurve",children:"IVisitableCurve"}),", ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.iequatable-1",children:"IEquatable<CurveExpression>"})]}),"\n",(0,i.jsx)(s.h2,{id:"fields",children:"Fields"}),"\n",(0,i.jsx)(s.h3,{id:"equivalences",children:(0,i.jsx)(s.strong,{children:"Equivalences"})}),"\n",(0,i.jsx)(s.p,{children:'Static dictionary field collecting the well-known equivalences, indexed by the "main" type of equivalence'}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public static ConcurrentDictionary<Type, List<Equivalence>> Equivalences;\n"})}),"\n",(0,i.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(s.h3,{id:"name",children:(0,i.jsx)(s.strong,{children:"Name"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public string Name { get; set; }\n"})}),"\n",(0,i.jsx)(s.h4,{id:"property-value",children:"Property Value"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"settings",children:(0,i.jsx)(s.strong,{children:"Settings"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public ExpressionSettings Settings { get; set; }\n"})}),"\n",(0,i.jsx)(s.h4,{id:"property-value-1",children:"Property Value"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"value",children:(0,i.jsx)(s.strong,{children:"Value"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public Curve Value { get; }\n"})}),"\n",(0,i.jsx)(s.h4,{id:"property-value-2",children:"Property Value"}),"\n",(0,i.jsxs)(s.p,{children:["Curve",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"issubadditive",children:(0,i.jsx)(s.strong,{children:"IsSubAdditive"})}),"\n",(0,i.jsx)(s.p,{children:"True if the curve described by the expression is sub-additive. Property evaluated avoiding as much as possible\r\nto make any computation."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public bool IsSubAdditive { get; }\n"})}),"\n",(0,i.jsx)(s.h4,{id:"property-value-3",children:"Property Value"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"isleftcontinuous",children:(0,i.jsx)(s.strong,{children:"IsLeftContinuous"})}),"\n",(0,i.jsx)(s.p,{children:"True if the curve described by the expression is left continuous. Property evaluated avoiding as much as\r\npossible to make any computation."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public bool IsLeftContinuous { get; }\n"})}),"\n",(0,i.jsx)(s.h4,{id:"property-value-4",children:"Property Value"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"isrightcontinuous",children:(0,i.jsx)(s.strong,{children:"IsRightContinuous"})}),"\n",(0,i.jsx)(s.p,{children:"True if the curve described by the expression is right continuous. Property evaluated avoiding as much as\r\npossible to make any computation."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public bool IsRightContinuous { get; }\n"})}),"\n",(0,i.jsx)(s.h4,{id:"property-value-5",children:"Property Value"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"isnonnegative",children:(0,i.jsx)(s.strong,{children:"IsNonNegative"})}),"\n",(0,i.jsx)(s.p,{children:"True if the curve described by the expression is non-negative. Property evaluated avoiding as much as\r\npossible to make any computation."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public bool IsNonNegative { get; }\n"})}),"\n",(0,i.jsx)(s.h4,{id:"property-value-6",children:"Property Value"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"isnondecreasing",children:(0,i.jsx)(s.strong,{children:"IsNonDecreasing"})}),"\n",(0,i.jsx)(s.p,{children:"True if the curve described by the expression is non-decreasing. Property evaluated avoiding as much as\r\npossible to make any computation."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public bool IsNonDecreasing { get; }\n"})}),"\n",(0,i.jsx)(s.h4,{id:"property-value-7",children:"Property Value"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"isconcave",children:(0,i.jsx)(s.strong,{children:"IsConcave"})}),"\n",(0,i.jsx)(s.p,{children:"True if the curve described by the expression is concave. Property evaluated avoiding as much as\r\npossible to make any computation."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public bool IsConcave { get; }\n"})}),"\n",(0,i.jsx)(s.h4,{id:"property-value-8",children:"Property Value"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"isconvex",children:(0,i.jsx)(s.strong,{children:"IsConvex"})}),"\n",(0,i.jsx)(s.p,{children:"True if the curve described by the expression is convex. Property evaluated avoiding as much as\r\npossible to make any computation."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public bool IsConvex { get; }\n"})}),"\n",(0,i.jsx)(s.h4,{id:"property-value-9",children:"Property Value"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"iszeroatzero",children:(0,i.jsx)(s.strong,{children:"IsZeroAtZero"})}),"\n",(0,i.jsx)(s.p,{children:"True if the curve f described by the expression is 0 in 0 (f(0) = 0). Property evaluated avoiding as much as\r\npossible to make any computation."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public bool IsZeroAtZero { get; }\n"})}),"\n",(0,i.jsx)(s.h4,{id:"property-value-10",children:"Property Value"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"iswelldefined",children:(0,i.jsx)(s.strong,{children:"IsWellDefined"})}),"\n",(0,i.jsxs)(s.p,{children:["True if the operation described by the expression is well-defined according to the definition\r\nin ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/references",children:"[BT08]"})," Section 2.1."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public bool IsWellDefined { get; }\n"})}),"\n",(0,i.jsx)(s.h4,{id:"property-value-11",children:"Property Value"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(s.h3,{id:"negatestring-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Negate(String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Adds the opposite operator to the expression."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression Negate(string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"tononnegativestring-expressionsettings",children:(0,i.jsx)(s.strong,{children:"ToNonNegative(String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Adds to the expression the operation to compute its non-negative version."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression ToNonNegative(string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"subadditiveclosurestring-expressionsettings",children:(0,i.jsx)(s.strong,{children:"SubAdditiveClosure(String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Adds the sub-additive closure operator to the expression."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression SubAdditiveClosure(string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-2",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"superadditiveclosurestring-expressionsettings",children:(0,i.jsx)(s.strong,{children:"SuperAdditiveClosure(String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Adds the super-additive closure operator to the expression."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression SuperAdditiveClosure(string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-3",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"touppernondecreasingstring-expressionsettings",children:(0,i.jsx)(s.strong,{children:"ToUpperNonDecreasing(String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Adds to the expression the operation to compute its upper non-decreasing version."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression ToUpperNonDecreasing(string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-4",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"tolowernondecreasingstring-expressionsettings",children:(0,i.jsx)(s.strong,{children:"ToLowerNonDecreasing(String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Adds to the expression the operation to compute its lower non-decreasing version."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression ToLowerNonDecreasing(string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-5",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"toleftcontinuousstring-expressionsettings",children:(0,i.jsx)(s.strong,{children:"ToLeftContinuous(String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Adds to the expression the operation to compute a left continuous version of it."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression ToLeftContinuous(string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-6",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"torightcontinuousstring-expressionsettings",children:(0,i.jsx)(s.strong,{children:"ToRightContinuous(String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Adds to the expression the operation to compute a right continuous version of it."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression ToRightContinuous(string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-7",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"withzerooriginstring-expressionsettings",children:(0,i.jsx)(s.strong,{children:"WithZeroOrigin(String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Adds to the expression an operation which enforces it to assume 0 at time 0."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression WithZeroOrigin(string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-8",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"lowerpseudoinversestring-expressionsettings",children:(0,i.jsx)(s.strong,{children:"LowerPseudoInverse(String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Adds to the expression the operation to compute the lower pseudo-inverse function,\r\n",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsxs)(s.msubsup,{children:[(0,i.jsx)(s.mi,{children:"f"}),(0,i.jsx)(s.mo,{children:"\u2193"}),(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mo,{children:"\u2212"}),(0,i.jsx)(s.mn,{children:"1"})]})]}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"x"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsx)(s.mi,{children:"inf"}),(0,i.jsx)(s.mo,{children:"\u2061"}),(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mo,{fence:"true",children:"{"}),(0,i.jsx)(s.mi,{children:"t"}),(0,i.jsx)(s.mo,{children:":"}),(0,i.jsx)(s.mi,{children:"f"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"t"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"}),(0,i.jsx)(s.mo,{children:"\u2265"}),(0,i.jsx)(s.mi,{children:"x"}),(0,i.jsx)(s.mo,{fence:"true",children:"}"})]}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsx)(s.mi,{children:"sup"}),(0,i.jsx)(s.mo,{children:"\u2061"}),(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mo,{fence:"true",children:"{"}),(0,i.jsx)(s.mi,{children:"t"}),(0,i.jsx)(s.mo,{children:":"}),(0,i.jsx)(s.mi,{children:"f"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"t"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"}),(0,i.jsx)(s.mo,{children:"<"}),(0,i.jsx)(s.mi,{children:"x"}),(0,i.jsx)(s.mo,{fence:"true",children:"}"})]})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"f^{-1}_\\downarrow(x) = \\inf \\left\\{ t : f(t) \\ge x \\right\\} = \\sup \\left\\{ t : f(t) < x \\right\\}"})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1.2917em",verticalAlign:"-0.4374em"}}),(0,i.jsxs)(s.span,{className:"mord",children:[(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"}),(0,i.jsx)(s.span,{className:"msupsub",children:(0,i.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,i.jsxs)(s.span,{className:"vlist-r",children:[(0,i.jsxs)(s.span,{className:"vlist",style:{height:"0.8542em"},children:[(0,i.jsxs)(s.span,{style:{top:"-2.3987em",marginLeft:"-0.1076em",marginRight:"0.05em"},children:[(0,i.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,i.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,i.jsx)(s.span,{className:"mrel mtight",children:"\u2193"})})]}),(0,i.jsxs)(s.span,{style:{top:"-3.1031em",marginRight:"0.05em"},children:[(0,i.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,i.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,i.jsxs)(s.span,{className:"mord mtight",children:[(0,i.jsx)(s.span,{className:"mord mtight",children:"\u2212"}),(0,i.jsx)(s.span,{className:"mord mtight",children:"1"})]})})]})]}),(0,i.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,i.jsx)(s.span,{className:"vlist-r",children:(0,i.jsx)(s.span,{className:"vlist",style:{height:"0.4374em"},children:(0,i.jsx)(s.span,{})})})]})})]}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,i.jsx)(s.span,{className:"mclose",children:")"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsxs)(s.span,{className:"mop",children:["in",(0,i.jsx)(s.span,{style:{marginRight:"0.07778em"},children:"f"})]}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,i.jsxs)(s.span,{className:"minner",children:[(0,i.jsx)(s.span,{className:"mopen delimcenter",style:{top:"0em"},children:"{"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:":"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(s.span,{className:"mclose",children:")"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"\u2265"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,i.jsx)(s.span,{className:"mclose delimcenter",style:{top:"0em"},children:"}"})]}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mop",children:"sup"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,i.jsxs)(s.span,{className:"minner",children:[(0,i.jsx)(s.span,{className:"mopen delimcenter",style:{top:"0em"},children:"{"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:":"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(s.span,{className:"mclose",children:")"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"<"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,i.jsx)(s.span,{className:"mclose delimcenter",style:{top:"0em"},children:"}"})]})]})]})]}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression LowerPseudoInverse(string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-9",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"upperpseudoinversestring-expressionsettings",children:(0,i.jsx)(s.strong,{children:"UpperPseudoInverse(String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Adds to the expression the operation to compute the upper pseudo-inverse function,\r\n",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsxs)(s.msubsup,{children:[(0,i.jsx)(s.mi,{children:"f"}),(0,i.jsx)(s.mo,{children:"\u2191"}),(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mo,{children:"\u2212"}),(0,i.jsx)(s.mn,{children:"1"})]})]}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"x"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsx)(s.mi,{children:"inf"}),(0,i.jsx)(s.mo,{children:"\u2061"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"{"}),(0,i.jsx)(s.mi,{children:"t"}),(0,i.jsx)(s.mo,{children:":"}),(0,i.jsx)(s.mi,{children:"f"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"t"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"}),(0,i.jsx)(s.mo,{children:">"}),(0,i.jsx)(s.mi,{children:"x"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"}"}),(0,i.jsx)(s.mo,{children:"="}),(0,i.jsx)(s.mi,{children:"sup"}),(0,i.jsx)(s.mo,{children:"\u2061"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"{"}),(0,i.jsx)(s.mi,{children:"t"}),(0,i.jsx)(s.mo,{children:":"}),(0,i.jsx)(s.mi,{children:"f"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"t"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"}),(0,i.jsx)(s.mo,{children:"\u2264"}),(0,i.jsx)(s.mi,{children:"x"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"}"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"f^{-1}_\\uparrow(x) = \\inf\\{ t : f(t) > x \\} = \\sup\\{ t : f(t) \\le x \\}"})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1.2917em",verticalAlign:"-0.4374em"}}),(0,i.jsxs)(s.span,{className:"mord",children:[(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"}),(0,i.jsx)(s.span,{className:"msupsub",children:(0,i.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,i.jsxs)(s.span,{className:"vlist-r",children:[(0,i.jsxs)(s.span,{className:"vlist",style:{height:"0.8542em"},children:[(0,i.jsxs)(s.span,{style:{top:"-2.3987em",marginLeft:"-0.1076em",marginRight:"0.05em"},children:[(0,i.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,i.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,i.jsx)(s.span,{className:"mrel mtight",children:"\u2191"})})]}),(0,i.jsxs)(s.span,{style:{top:"-3.1031em",marginRight:"0.05em"},children:[(0,i.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,i.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,i.jsxs)(s.span,{className:"mord mtight",children:[(0,i.jsx)(s.span,{className:"mord mtight",children:"\u2212"}),(0,i.jsx)(s.span,{className:"mord mtight",children:"1"})]})})]})]}),(0,i.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,i.jsx)(s.span,{className:"vlist-r",children:(0,i.jsx)(s.span,{className:"vlist",style:{height:"0.4374em"},children:(0,i.jsx)(s.span,{})})})]})})]}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,i.jsx)(s.span,{className:"mclose",children:")"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsxs)(s.span,{className:"mop",children:["in",(0,i.jsx)(s.span,{style:{marginRight:"0.07778em"},children:"f"})]}),(0,i.jsx)(s.span,{className:"mopen",children:"{"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:":"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(s.span,{className:"mclose",children:")"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:">"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,i.jsx)(s.span,{className:"mclose",children:"}"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"="}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mop",children:"sup"}),(0,i.jsx)(s.span,{className:"mopen",children:"{"}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:":"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(s.span,{className:"mclose",children:")"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"\u2264"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,i.jsx)(s.span,{className:"mclose",children:"}"})]})]})]}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression UpperPseudoInverse(string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-10",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"additioncurveexpression-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Addition(CurveExpression, String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Creates a new expression composed of the addition between the current expression and the one passed as\r\nargument."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression Addition(CurveExpression expression, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expression"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-11",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"additioncurve-string-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Addition(Curve, String, String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Creates a new expression composed of the addition between the current expression and the curve (internally\r\nconverted to ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression",children:"ConcreteCurveExpression"}),") passed as argument."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression Addition(Curve curve, string name, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"curve"})," Curve",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"name"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-12",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"additioncurveexpression-curve-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Addition(CurveExpression, Curve, String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Creates a new expression composed of the addition between the expression !",":left"," and the curve\r\n!",":right"," (internally converted to ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression",children:"ConcreteCurveExpression"}),") passed as argument."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public static CurveExpression Addition(CurveExpression left, Curve right, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"left"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"right"})," Curve",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-13",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"subtractioncurveexpression-boolean-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Subtraction(CurveExpression, Boolean, String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Creates a new expression composed of the subtraction between the current expression and the one passed as\r\nargument."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression Subtraction(CurveExpression expression, bool nonNegative, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expression"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"nonNegative"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-14",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"subtractioncurve-boolean-string-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Subtraction(Curve, Boolean, String, String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Creates a new expression composed of the subtraction between the current expression and the curve (internally\r\nconverted to ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression",children:"ConcreteCurveExpression"}),") passed as argument."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression Subtraction(Curve curve, bool nonNegative, string name, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"curve"})," Curve",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"nonNegative"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"name"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-15",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"minimumcurveexpression-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Minimum(CurveExpression, String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Creates a new expression composed of the minimum between the current expression and the one passed as\r\nargument."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression Minimum(CurveExpression expression, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-16",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expression"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-16",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"minimumcurve-string-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Minimum(Curve, String, String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Creates a new expression composed of the minimum between the current expression and the curve (internally\r\nconverted to ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression",children:"ConcreteCurveExpression"}),") passed as argument."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression Minimum(Curve curve, string name, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-17",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"curve"})," Curve",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"name"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-17",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"maximumcurveexpression-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Maximum(CurveExpression, String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Creates a new expression composed of the maximum between the current expression and the one passed as\r\nargument."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression Maximum(CurveExpression expression, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-18",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expression"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-18",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"maximumcurve-string-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Maximum(Curve, String, String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Creates a new expression composed of the maximum between the current expression and the curve (internally\r\nconverted to ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression",children:"ConcreteCurveExpression"}),") passed as argument."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression Maximum(Curve curve, string name, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-19",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"curve"})," Curve",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"name"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-19",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"convolutioncurveexpression-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Convolution(CurveExpression, String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Creates a new expression composed of the convolution between the current expression and the one passed as\r\nargument."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression Convolution(CurveExpression expression, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-20",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expression"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-20",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"convolutioncurve-string-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Convolution(Curve, String, String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Creates a new expression composed of the convolution between the current expression and the curve (internally\r\nconverted to ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression",children:"ConcreteCurveExpression"}),") passed as argument."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression Convolution(Curve curve, string name, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-21",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"curve"})," Curve",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"name"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-21",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"deconvolutioncurveexpression-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Deconvolution(CurveExpression, String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Creates a new expression composed of the deconvolution between the current expression and the one passed as\r\nargument."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression Deconvolution(CurveExpression expression, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-22",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expression"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-22",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"deconvolutioncurve-string-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Deconvolution(Curve, String, String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Creates a new expression composed of the deconvolution between the current expression and the curve (internally\r\nconverted to ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression",children:"ConcreteCurveExpression"}),") passed as argument."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression Deconvolution(Curve curve, string name, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-23",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"curve"})," Curve",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"name"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-23",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"maxplusconvolutioncurveexpression-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"MaxPlusConvolution(CurveExpression, String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Creates a new expression composed of the max-plus convolution between the current expression and the one passed\r\nas argument."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression MaxPlusConvolution(CurveExpression expression, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-24",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expression"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-24",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"maxplusconvolutioncurve-string-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"MaxPlusConvolution(Curve, String, String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Creates a new expression composed of the max-plus convolution between the current expression and the curve (internally\r\nconverted to ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression",children:"ConcreteCurveExpression"}),") passed as argument."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression MaxPlusConvolution(Curve curve, string name, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-25",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"curve"})," Curve",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"name"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-25",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"maxplusdeconvolutioncurveexpression-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"MaxPlusDeconvolution(CurveExpression, String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Creates a new expression composed of the max-plus deconvolution between the current expression and the one\r\npassed as argument."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression MaxPlusDeconvolution(CurveExpression expression, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-26",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expression"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-26",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"maxplusdeconvolutioncurve-string-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"MaxPlusDeconvolution(Curve, String, String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Creates a new expression composed of the max-plus deconvolution between the current expression and the curve (internally\r\nconverted to ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression",children:"ConcreteCurveExpression"}),") passed as argument."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression MaxPlusDeconvolution(Curve curve, string name, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-27",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"curve"})," Curve",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"name"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-27",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"compositioncurveexpression-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Composition(CurveExpression, String, ExpressionSettings)"})}),"\n",(0,i.jsx)(s.p,{children:"Creates a new expression composed of the composition between the current expression and the one passed as\r\nargument."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression Composition(CurveExpression expression, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-28",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expression"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-28",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"compositioncurve-string-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Composition(Curve, String, String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Creates a new expression composed of the composition between the current expression and the curve (internally\r\nconverted to ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression",children:"ConcreteCurveExpression"}),") passed as argument."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression Composition(Curve curve, string name, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-29",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"curve"})," Curve",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"name"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-29",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"delaybyrationalexpression-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"DelayBy(RationalExpression, String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Creates a new expression composed of the operation to delay the curve corresponding to the current expression\r\nby the rational number described by the argument !",":expression"," of type\r\n",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression DelayBy(RationalExpression expression, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-30",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expression"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-30",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"delaybyrational-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"DelayBy(Rational, String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Creates a new expression composed of the operation to delay the curve corresponding to the current expression\r\nby the rational number !",":delay","."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression DelayBy(Rational delay, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-31",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"delay"})," Rational",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-31",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"forwardbyrationalexpression-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"ForwardBy(RationalExpression, String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Creates a new expression that forwards the current current\r\nexpression by the rational !",":expression",", i.e., computing ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mi,{children:"f"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"t"}),(0,i.jsx)(s.mo,{children:"+"}),(0,i.jsx)(s.mi,{children:"T"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"f(t + T)"})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(s.span,{className:"mbin",children:"+"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.13889em"},children:"T"}),(0,i.jsx)(s.span,{className:"mclose",children:")"})]})]})]}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression ForwardBy(RationalExpression expression, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-32",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expression"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-32",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"forwardbyrational-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"ForwardBy(Rational, String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Creates a new expression that forwards the current curve\r\nexpression by the rational !",":time",", i.e., computing ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mi,{children:"f"}),(0,i.jsx)(s.mo,{stretchy:"false",children:"("}),(0,i.jsx)(s.mi,{children:"t"}),(0,i.jsx)(s.mo,{children:"+"}),(0,i.jsx)(s.mi,{children:"T"}),(0,i.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"f(t + T)"})]})})}),(0,i.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.10764em"},children:"f"}),(0,i.jsx)(s.span,{className:"mopen",children:"("}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(s.span,{className:"mbin",children:"+"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",style:{marginRight:"0.13889em"},children:"T"}),(0,i.jsx)(s.span,{className:"mclose",children:")"})]})]})]}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression ForwardBy(Rational time, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-33",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"time"})," Rational",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-33",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"scalerationalexpression-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Scale(RationalExpression, String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Creates a new expression composed of the operation to scale the curve corresponding to the current expression\r\nby the rational number described by the argument !",":expression"," of type\r\n",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression Scale(RationalExpression expression, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-34",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expression"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-34",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"scalerational-string-expressionsettings",children:(0,i.jsx)(s.strong,{children:"Scale(Rational, String, ExpressionSettings)"})}),"\n",(0,i.jsxs)(s.p,{children:["Creates a new expression composed of the operation to scale the curve corresponding to the current expression\r\nby the rational number !",":scaleFactor","."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression Scale(Rational scaleFactor, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-35",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"scaleFactor"})," Rational",(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"settings"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-35",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"compute",children:(0,i.jsx)(s.strong,{children:"Compute()"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public Curve Compute()\n"})}),"\n",(0,i.jsx)(s.h4,{id:"returns-36",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:["Curve",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"replacebyvaluet1igenericexpressiont1-igenericexpressiont1-boolean",children:(0,i.jsx)(s.strong,{children:"ReplaceByValue<T1>(IGenericExpression<T1>, IGenericExpression<T1>, Boolean)"})}),"\n",(0,i.jsx)(s.p,{children:"Replaces every occurence of a sub-expression in the expression to which the method is applied."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression ReplaceByValue<T1>(IGenericExpression<T1> expressionPattern, IGenericExpression<T1> newExpressionToReplace, bool ignoreNotMatchedExpressions)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"CurveExpression.T1"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"parameters-36",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionPattern"})," IGenericExpression<T1>",(0,i.jsx)("br",{}),"\r\nThe sub-expression to look for in the main expression for being replaced."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"newExpressionToReplace"})," IGenericExpression<T1>",(0,i.jsx)("br",{}),"\r\nThe new sub-expression."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"ignoreNotMatchedExpressions"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-37",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{}),"\r\nNew expression object (of type ) with replaced sub-expressions."]}),"\n",(0,i.jsx)(s.h3,{id:"replacebypositiont1expressionposition-igenericexpressiont1",children:(0,i.jsx)(s.strong,{children:"ReplaceByPosition<T1>(ExpressionPosition, IGenericExpression<T1>)"})}),"\n",(0,i.jsx)(s.p,{children:"Replaces the sub-expression at a certain position in the expression to which the method is applied."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression ReplaceByPosition<T1>(ExpressionPosition expressionPosition, IGenericExpression<T1> newExpressionToReplace)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"type-parameters-1",children:"Type Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"CurveExpression.T1"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"parameters-37",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionPosition"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition",children:"ExpressionPosition"}),(0,i.jsx)("br",{}),"\r\nPosition of the expression to be replaced."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"newExpressionToReplace"})," IGenericExpression<T1>",(0,i.jsx)("br",{}),"\r\nThe new sub-expression."]}),"\n",(0,i.jsx)(s.h4,{id:"returns-38",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{}),"\r\nNew expression object (of type ) with replaced sub-expression."]}),"\n",(0,i.jsx)(s.h3,{id:"replacebypositiont1ienumerablestring-igenericexpressiont1",children:(0,i.jsx)(s.strong,{children:"ReplaceByPosition<T1>(IEnumerable<String>, IGenericExpression<T1>)"})}),"\n",(0,i.jsx)(s.p,{children:"Replaces the sub-expression at a certain position in the expression to which the method is applied."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression ReplaceByPosition<T1>(IEnumerable<string> positionPath, IGenericExpression<T1> newExpressionToReplace)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"type-parameters-2",children:"Type Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"CurveExpression.T1"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"parameters-38",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"positionPath"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1",children:"IEnumerable<String>"}),(0,i.jsx)("br",{}),'\r\nPosition of the expression to be replaced. The position is expressed as a path from\r\nthe root of the expression by using a list of strings "Operand" for unary operators, "LeftOperand"/"RightOperand"\r\nfor binary operators, "Operand(index)" for n-ary operators.']}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"newExpressionToReplace"})," IGenericExpression<T1>",(0,i.jsx)("br",{}),"\r\nThe new sub-expression."]}),"\n",(0,i.jsx)(s.h4,{id:"returns-39",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{}),"\r\nNew expression object (of type ) with the replaced sub-expression."]}),"\n",(0,i.jsx)(s.h3,{id:"applyequivalenceequivalence-checktype",children:(0,i.jsx)(s.strong,{children:"ApplyEquivalence(Equivalence, CheckType)"})}),"\n",(0,i.jsx)(s.p,{children:"Applies an equivalence to the current expression."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression ApplyEquivalence(Equivalence equivalence, CheckType checkType)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-39",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"equivalence"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence",children:"Equivalence"}),(0,i.jsx)("br",{}),"\r\nThe equivalence to be applied to (a sub-part of) the expression."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"checkType"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType",children:"CheckType"}),(0,i.jsx)("br",{}),"\r\nSince the equivalence is described by a left-side expression and a right-side\r\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\r\nand substitution with the right side, or vice versa, or both)."]}),"\n",(0,i.jsx)(s.h4,{id:"returns-40",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{}),"\r\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."]}),"\n",(0,i.jsx)(s.h3,{id:"applyequivalencebypositionienumerablestring-equivalence-checktype",children:(0,i.jsx)(s.strong,{children:"ApplyEquivalenceByPosition(IEnumerable<String>, Equivalence, CheckType)"})}),"\n",(0,i.jsx)(s.p,{children:"Applies an equivalence to the current expression, allowing the user to specify the position in the expression in\r\nwhich the equivalence should be applied."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression ApplyEquivalenceByPosition(IEnumerable<string> positionPath, Equivalence equivalence, CheckType checkType)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-40",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"positionPath"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1",children:"IEnumerable<String>"}),(0,i.jsx)("br",{}),'\r\nPosition of the sub-expression to be replaced with an equivalent one.\r\nThe position is expressed as a path from the root of the expression by using a list of strings "Operand" for\r\nunary operators, "LeftOperand"/"RightOperand" for binary operators, "Operand(index)" for n-ary operators']}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"equivalence"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence",children:"Equivalence"}),(0,i.jsx)("br",{}),"\r\nThe equivalence to be applied to (a sub-part of) the expression."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"checkType"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType",children:"CheckType"}),(0,i.jsx)("br",{}),"\r\nSince the equivalence is described by a left-side expression and a right-side\r\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\r\nand substitution with the right side, or vice versa, or both)."]}),"\n",(0,i.jsx)(s.h4,{id:"returns-41",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{}),"\r\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."]}),"\n",(0,i.jsx)(s.h3,{id:"applyequivalencebypositionexpressionposition-equivalence-checktype",children:(0,i.jsx)(s.strong,{children:"ApplyEquivalenceByPosition(ExpressionPosition, Equivalence, CheckType)"})}),"\n",(0,i.jsx)(s.p,{children:"Applies an equivalence to the current expression, allowing the user to specify the position in the expression in\r\nwhich the equivalence should be applied."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression ApplyEquivalenceByPosition(ExpressionPosition expressionPosition, Equivalence equivalence, CheckType checkType)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-41",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionPosition"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition",children:"ExpressionPosition"}),(0,i.jsx)("br",{}),"\r\nPosition of the expression to be replaced"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"equivalence"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence",children:"Equivalence"}),(0,i.jsx)("br",{}),"\r\nThe equivalence to be applied to (a sub-part of) the expression."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"checkType"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType",children:"CheckType"}),(0,i.jsx)("br",{}),"\r\nSince the equivalence is described by a left-side expression and a right-side\r\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\r\nand substitution with the right side, or vice versa, or both)."]}),"\n",(0,i.jsx)(s.h4,{id:"returns-42",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{}),"\r\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."]}),"\n",(0,i.jsx)(s.h3,{id:"equivalentigenericexpressioncurve",children:(0,i.jsx)(s.strong,{children:"Equivalent(IGenericExpression<Curve>)"})}),"\n",(0,i.jsx)(s.p,{children:"Checks if two expressions are equivalent by computing their values"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public bool Equivalent(IGenericExpression<Curve> other)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-42",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"other"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<Curve>"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-43",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"addequivalencetype-equivalence",children:(0,i.jsx)(s.strong,{children:"AddEquivalence(Type, Equivalence)"})}),"\n",(0,i.jsxs)(s.p,{children:["Adds an equivalence to the static field ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression#equivalences",children:"Equivalences"}),"."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public static void AddEquivalence(Type type, Equivalence equivalence)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-43",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"type"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.type",children:"Type"}),(0,i.jsx)("br",{}),"\r\nThe main type of operation (e.g., ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConvolutionExpression",children:"ConvolutionExpression"})," in the equivalence\r\n$f \\otimes f = f) involved in the equivalence."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"equivalence"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence",children:"Equivalence"}),(0,i.jsx)("br",{}),"\r\nThe equivalence to be added."]}),"\n",(0,i.jsx)(s.h3,{id:"acceptiexpressionvisitor",children:(0,i.jsx)(s.strong,{children:"Accept(IExpressionVisitor)"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public void Accept(IExpressionVisitor visitor)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-44",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"visitor"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/IExpressionVisitor",children:"IExpressionVisitor"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"accepticurveexpressionvisitor",children:(0,i.jsx)(s.strong,{children:"Accept(ICurveExpressionVisitor)"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public abstract void Accept(ICurveExpressionVisitor visitor)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-45",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"visitor"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/ICurveExpressionVisitor",children:"ICurveExpressionVisitor"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"tolatexstringint32-boolean",children:(0,i.jsx)(s.strong,{children:"ToLatexString(Int32, Boolean)"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public string ToLatexString(int depth, bool showRationalsAsName)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-46",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"depth"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32",children:"Int32"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"showRationalsAsName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-44",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"tounicodestringint32-boolean",children:(0,i.jsx)(s.strong,{children:"ToUnicodeString(Int32, Boolean)"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public string ToUnicodeString(int depth, bool showRationalsAsName)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-47",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"depth"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32",children:"Int32"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"showRationalsAsName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-45",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"tostring",children:(0,i.jsx)(s.strong,{children:"ToString()"})}),"\n",(0,i.jsx)(s.p,{children:"Returns a string that represents the current expression using the Unicode character set."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public string ToString()\n"})}),"\n",(0,i.jsx)(s.h4,{id:"returns-46",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"estimate",children:(0,i.jsx)(s.strong,{children:"Estimate()"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public double Estimate()\n"})}),"\n",(0,i.jsx)(s.h4,{id:"returns-47",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.double",children:"Double"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"rootposition",children:(0,i.jsx)(s.strong,{children:"RootPosition()"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public ExpressionPosition RootPosition()\n"})}),"\n",(0,i.jsx)(s.h4,{id:"returns-48",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition",children:"ExpressionPosition"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"withnamestring",children:(0,i.jsx)(s.strong,{children:"WithName(String)"})}),"\n",(0,i.jsx)(s.p,{children:"Changes the name of the expression."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public CurveExpression WithName(string expressionName)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-48",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"expressionName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{}),"\r\nThe new name of the expression"]}),"\n",(0,i.jsx)(s.h4,{id:"returns-49",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{}),"\r\nThe expression (new object of type ) with the new name"]}),"\n",(0,i.jsx)(s.h3,{id:"isultimatelyconstant",children:(0,i.jsx)(s.strong,{children:"IsUltimatelyConstant()"})}),"\n",(0,i.jsxs)(s.p,{children:["Returns true if for ",(0,i.jsxs)(s.span,{className:"katex",children:[(0,i.jsx)(s.span,{className:"katex-mathml",children:(0,i.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(s.semantics,{children:[(0,i.jsxs)(s.mrow,{children:[(0,i.jsx)(s.mi,{children:"t"}),(0,i.jsx)(s.mo,{children:"\u2265"})]}),(0,i.jsx)(s.annotation,{encoding:"application/x-tex",children:"t \\ge"})]})})}),(0,i.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(s.span,{className:"base",children:[(0,i.jsx)(s.span,{className:"strut",style:{height:"0.7719em",verticalAlign:"-0.136em"}}),(0,i.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,i.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,i.jsx)(s.span,{className:"mrel",children:"\u2265"})]})})]})," PseudoPeriodStart the curve expression is constant.\r\nImplemented by computing the value of the expression."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public bool IsUltimatelyConstant()\n"})}),"\n",(0,i.jsx)(s.h4,{id:"returns-50",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"gethashcode",children:(0,i.jsx)(s.strong,{children:"GetHashCode()"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public int GetHashCode()\n"})}),"\n",(0,i.jsx)(s.h4,{id:"returns-51",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32",children:"Int32"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"equalsobject",children:(0,i.jsx)(s.strong,{children:"Equals(Object)"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public bool Equals(object obj)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-49",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"obj"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.object",children:"Object"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-52",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"equalscurveexpression",children:(0,i.jsx)(s.strong,{children:"Equals(CurveExpression)"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public bool Equals(CurveExpression other)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-50",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"other"})," ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h4,{id:"returns-53",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"clone",children:(0,i.jsx)(s.strong,{children:"<Clone>$()"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public abstract CurveExpression <Clone>$()\n"})}),"\n",(0,i.jsx)(s.h4,{id:"returns-54",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"}),(0,i.jsx)("br",{})]})]})}function x(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);