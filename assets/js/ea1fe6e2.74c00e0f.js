"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[1201],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>v});var s=r(7294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,s)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function p(e,n){if(null==e)return{};var r,s,t=function(e,n){if(null==e)return{};var r,s,t={},a=Object.keys(e);for(s=0;s<a.length;s++)r=a[s],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)r=a[s],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var i=s.createContext({}),l=function(e){var n=s.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},u=function(e){var n=l(e.components);return s.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},d=s.forwardRef((function(e,n){var r=e.components,t=e.mdxType,a=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=l(r),v=t,m=d["".concat(i,".").concat(v)]||d[v]||c[v]||a;return r?s.createElement(m,o(o({ref:n},u),{},{components:r})):s.createElement(m,o({ref:n},u))}));function v(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=r.length,o=new Array(a);o[0]=d;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p.mdxType="string"==typeof e?e:t,o[1]=p;for(var l=2;l<a;l++)o[l]=r[l];return s.createElement.apply(null,o)}return s.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8957:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var s=r(7462),t=(r(7294),r(3905));const a={hide_title:!0},o="UpperPseudoInverseExpression",p={unversionedId:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/UpperPseudoInverseExpression",id:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/UpperPseudoInverseExpression",title:"UpperPseudoInverseExpression",description:"Class representing an expression whose root operation is the upper pseudo-inverse",source:"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/UpperPseudoInverseExpression.md",sourceDirName:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals",slug:"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/UpperPseudoInverseExpression",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/UpperPseudoInverseExpression",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"docsSidebar",previous:{title:"ToUpperNonDecreasingExpression",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ToUpperNonDecreasingExpression"},next:{title:"VerticalDeviationExpression",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/VerticalDeviationExpression"}},i={},l=[{value:"Properties",id:"properties",level:2},{value:"<strong>Expression</strong>",id:"expression",level:3},{value:"Property Value",id:"property-value",level:4},{value:"<strong>Name</strong>",id:"name",level:3},{value:"Property Value",id:"property-value-1",level:4},{value:"<strong>Settings</strong>",id:"settings",level:3},{value:"Property Value",id:"property-value-2",level:4},{value:"<strong>Value</strong>",id:"value",level:3},{value:"Property Value",id:"property-value-3",level:4},{value:"<strong>IsSubAdditive</strong>",id:"issubadditive",level:3},{value:"Property Value",id:"property-value-4",level:4},{value:"<strong>IsLeftContinuous</strong>",id:"isleftcontinuous",level:3},{value:"Property Value",id:"property-value-5",level:4},{value:"<strong>IsRightContinuous</strong>",id:"isrightcontinuous",level:3},{value:"Property Value",id:"property-value-6",level:4},{value:"<strong>IsNonNegative</strong>",id:"isnonnegative",level:3},{value:"Property Value",id:"property-value-7",level:4},{value:"<strong>IsNonDecreasing</strong>",id:"isnondecreasing",level:3},{value:"Property Value",id:"property-value-8",level:4},{value:"<strong>IsConcave</strong>",id:"isconcave",level:3},{value:"Property Value",id:"property-value-9",level:4},{value:"<strong>IsConvex</strong>",id:"isconvex",level:3},{value:"Property Value",id:"property-value-10",level:4},{value:"<strong>IsZeroAtZero</strong>",id:"iszeroatzero",level:3},{value:"Property Value",id:"property-value-11",level:4},{value:"<strong>IsWellDefined</strong>",id:"iswelldefined",level:3},{value:"Property Value",id:"property-value-12",level:4},{value:"Constructors",id:"constructors",level:2},{value:"<strong>UpperPseudoInverseExpression(Curve, String, String, ExpressionSettings)</strong>",id:"upperpseudoinverseexpressioncurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters",level:4},{value:"<strong>UpperPseudoInverseExpression(CurveExpression, String, ExpressionSettings)</strong>",id:"upperpseudoinverseexpressioncurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Methods",id:"methods",level:2},{value:"<strong>Accept(ICurveExpressionVisitor)</strong>",id:"accepticurveexpressionvisitor",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"<strong>GetHashCode()</strong>",id:"gethashcode",level:3},{value:"Returns",id:"returns",level:4},{value:"<strong>Equals(Object)</strong>",id:"equalsobject",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<strong>Equals(CurveUnaryExpression&lt;Curve&gt;)</strong>",id:"equalscurveunaryexpressioncurve",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-2",level:4},{value:"<strong>Equals(UpperPseudoInverseExpression)</strong>",id:"equalsupperpseudoinverseexpression",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-3",level:4},{value:"<strong>&lt;Clone&gt;$()</strong>",id:"clone",level:3},{value:"Returns",id:"returns-4",level:4}],u={toc:l};function c(e){let{components:n,...r}=e;return(0,t.kt)("wrapper",(0,s.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"upperpseudoinverseexpression"},"UpperPseudoInverseExpression"),(0,t.kt)("p",null,"Class representing an expression whose root operation is the upper pseudo-inverse\n(",(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/UpperPseudoInverseExpression#upperpseudoinverse"},"UpperPseudoInverse()"),")"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public class UpperPseudoInverseExpression : Unipi.Nancy.Expressions.CurveUnaryExpression<UpperPseudoInverseExpression>\n")),(0,t.kt)("p",null,"Inheritance ",(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.object"},"Object")," \u2192 ",(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression")," \u2192 ",(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveUnaryExpression%601"},"CurveUnaryExpression","<","Curve",">")," \u2192 ",(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/UpperPseudoInverseExpression"},"UpperPseudoInverseExpression"),(0,t.kt)("br",null),"\nImplements ",(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","Curve",">"),", ",(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/IVisitableCurve"},"IVisitableCurve"),", ",(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.iequatable-1"},"IEquatable","<","CurveExpression",">"),", ",(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericUnaryExpression%602"},"IGenericUnaryExpression","<","Curve, Curve",">"),", ",(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.iequatable-1"},"IEquatable","<","CurveUnaryExpression","<","Curve",">",">"),", ",(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.iequatable-1"},"IEquatable","<","UpperPseudoInverseExpression",">")),(0,t.kt)("h2",{id:"properties"},"Properties"),(0,t.kt)("h3",{id:"expression"},(0,t.kt)("strong",{parentName:"h3"},"Expression")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public IGenericExpression<Curve> Expression { get; set; }\n")),(0,t.kt)("h4",{id:"property-value"},"Property Value"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","Curve",">"),(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"name"},(0,t.kt)("strong",{parentName:"h3"},"Name")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public string Name { get; set; }\n")),(0,t.kt)("h4",{id:"property-value-1"},"Property Value"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"settings"},(0,t.kt)("strong",{parentName:"h3"},"Settings")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public ExpressionSettings Settings { get; set; }\n")),(0,t.kt)("h4",{id:"property-value-2"},"Property Value"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"value"},(0,t.kt)("strong",{parentName:"h3"},"Value")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public Curve Value { get; }\n")),(0,t.kt)("h4",{id:"property-value-3"},"Property Value"),(0,t.kt)("p",null,"Curve",(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"issubadditive"},(0,t.kt)("strong",{parentName:"h3"},"IsSubAdditive")),(0,t.kt)("p",null,"True if the curve described by the expression is sub-additive. Property evaluated avoiding as much as possible\nto make any computation."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsSubAdditive { get; }\n")),(0,t.kt)("h4",{id:"property-value-4"},"Property Value"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"isleftcontinuous"},(0,t.kt)("strong",{parentName:"h3"},"IsLeftContinuous")),(0,t.kt)("p",null,"True if the curve described by the expression is left continuous. Property evaluated avoiding as much as\npossible to make any computation."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsLeftContinuous { get; }\n")),(0,t.kt)("h4",{id:"property-value-5"},"Property Value"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"isrightcontinuous"},(0,t.kt)("strong",{parentName:"h3"},"IsRightContinuous")),(0,t.kt)("p",null,"True if the curve described by the expression is right continuous. Property evaluated avoiding as much as\npossible to make any computation."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsRightContinuous { get; }\n")),(0,t.kt)("h4",{id:"property-value-6"},"Property Value"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"isnonnegative"},(0,t.kt)("strong",{parentName:"h3"},"IsNonNegative")),(0,t.kt)("p",null,"True if the curve described by the expression is non-negative. Property evaluated avoiding as much as\npossible to make any computation."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsNonNegative { get; }\n")),(0,t.kt)("h4",{id:"property-value-7"},"Property Value"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"isnondecreasing"},(0,t.kt)("strong",{parentName:"h3"},"IsNonDecreasing")),(0,t.kt)("p",null,"True if the curve described by the expression is non-decreasing. Property evaluated avoiding as much as\npossible to make any computation."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsNonDecreasing { get; }\n")),(0,t.kt)("h4",{id:"property-value-8"},"Property Value"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"isconcave"},(0,t.kt)("strong",{parentName:"h3"},"IsConcave")),(0,t.kt)("p",null,"True if the curve described by the expression is concave. Property evaluated avoiding as much as\npossible to make any computation."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsConcave { get; }\n")),(0,t.kt)("h4",{id:"property-value-9"},"Property Value"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"isconvex"},(0,t.kt)("strong",{parentName:"h3"},"IsConvex")),(0,t.kt)("p",null,"True if the curve described by the expression is convex. Property evaluated avoiding as much as\npossible to make any computation."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsConvex { get; }\n")),(0,t.kt)("h4",{id:"property-value-10"},"Property Value"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"iszeroatzero"},(0,t.kt)("strong",{parentName:"h3"},"IsZeroAtZero")),(0,t.kt)("p",null,"True if the curve f described by the expression is 0 in 0 (f(0) = 0). Property evaluated avoiding as much as\npossible to make any computation."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsZeroAtZero { get; }\n")),(0,t.kt)("h4",{id:"property-value-11"},"Property Value"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"iswelldefined"},(0,t.kt)("strong",{parentName:"h3"},"IsWellDefined")),(0,t.kt)("p",null,"True if the operation described by the expression is well-defined according to the definition\nin ",(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/References"},"[","BT08","]")," Section 2.1."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsWellDefined { get; }\n")),(0,t.kt)("h4",{id:"property-value-12"},"Property Value"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,t.kt)("br",null)),(0,t.kt)("h2",{id:"constructors"},"Constructors"),(0,t.kt)("h3",{id:"upperpseudoinverseexpressioncurve-string-string-expressionsettings"},(0,t.kt)("strong",{parentName:"h3"},"UpperPseudoInverseExpression(Curve, String, String, ExpressionSettings)")),(0,t.kt)("p",null,"Creates the upper pseudo-inverse expression"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public UpperPseudoInverseExpression(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,t.kt)("h4",{id:"parameters"},"Parameters"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,t.kt)("br",null)),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"name")," ",(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,t.kt)("br",null)),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,t.kt)("br",null)),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"upperpseudoinverseexpressioncurveexpression-string-expressionsettings"},(0,t.kt)("strong",{parentName:"h3"},"UpperPseudoInverseExpression(CurveExpression, String, ExpressionSettings)")),(0,t.kt)("p",null,"Class representing an expression whose root operation is the upper pseudo-inverse\n(",(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/UpperPseudoInverseExpression#upperpseudoinverse"},"UpperPseudoInverse()"),")"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public UpperPseudoInverseExpression(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,t.kt)("h4",{id:"parameters-1"},"Parameters"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,t.kt)("br",null)),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,t.kt)("br",null)),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,t.kt)("br",null)),(0,t.kt)("h2",{id:"methods"},"Methods"),(0,t.kt)("h3",{id:"accepticurveexpressionvisitor"},(0,t.kt)("strong",{parentName:"h3"},"Accept(ICurveExpressionVisitor)")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public void Accept(ICurveExpressionVisitor visitor)\n")),(0,t.kt)("h4",{id:"parameters-2"},"Parameters"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"visitor")," ",(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/ICurveExpressionVisitor"},"ICurveExpressionVisitor"),(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"gethashcode"},(0,t.kt)("strong",{parentName:"h3"},"GetHashCode()")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public int GetHashCode()\n")),(0,t.kt)("h4",{id:"returns"},"Returns"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32"},"Int32"),(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"equalsobject"},(0,t.kt)("strong",{parentName:"h3"},"Equals(Object)")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool Equals(object obj)\n")),(0,t.kt)("h4",{id:"parameters-3"},"Parameters"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"obj")," ",(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.object"},"Object"),(0,t.kt)("br",null)),(0,t.kt)("h4",{id:"returns-1"},"Returns"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"equalscurveunaryexpressioncurve"},(0,t.kt)("strong",{parentName:"h3"},"Equals(CurveUnaryExpression","<","Curve",">",")")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool Equals(CurveUnaryExpression<Curve> other)\n")),(0,t.kt)("h4",{id:"parameters-4"},"Parameters"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"other")," ",(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveUnaryExpression%601"},"CurveUnaryExpression","<","Curve",">"),(0,t.kt)("br",null)),(0,t.kt)("h4",{id:"returns-2"},"Returns"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"equalsupperpseudoinverseexpression"},(0,t.kt)("strong",{parentName:"h3"},"Equals(UpperPseudoInverseExpression)")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool Equals(UpperPseudoInverseExpression other)\n")),(0,t.kt)("h4",{id:"parameters-5"},"Parameters"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"other")," ",(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/UpperPseudoInverseExpression"},"UpperPseudoInverseExpression"),(0,t.kt)("br",null)),(0,t.kt)("h4",{id:"returns-3"},"Returns"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,t.kt)("br",null)),(0,t.kt)("h3",{id:"clone"},(0,t.kt)("strong",{parentName:"h3"},"<","Clone",">","$()")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-csharp"},"public UpperPseudoInverseExpression <Clone>$()\n")),(0,t.kt)("h4",{id:"returns-4"},"Returns"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/UpperPseudoInverseExpression"},"UpperPseudoInverseExpression"),(0,t.kt)("br",null)))}c.isMDXComponent=!0}}]);