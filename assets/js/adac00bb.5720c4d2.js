"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[6574],{3905:(e,n,s)=>{s.d(n,{Zo:()=>m,kt:()=>k});var t=s(7294);function r(e,n,s){return n in e?Object.defineProperty(e,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[n]=s,e}function a(e,n){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),s.push.apply(s,t)}return s}function i(e){for(var n=1;n<arguments.length;n++){var s=null!=arguments[n]?arguments[n]:{};n%2?a(Object(s),!0).forEach((function(n){r(e,n,s[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):a(Object(s)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(s,n))}))}return e}function p(e,n){if(null==e)return{};var s,t,r=function(e,n){if(null==e)return{};var s,t,r={},a=Object.keys(e);for(t=0;t<a.length;t++)s=a[t],n.indexOf(s)>=0||(r[s]=e[s]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)s=a[t],n.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(r[s]=e[s])}return r}var o=t.createContext({}),l=function(e){var n=t.useContext(o),s=n;return e&&(s="function"==typeof e?e(n):i(i({},n),e)),s},m=function(e){var n=l(e.components);return t.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var s=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=l(s),k=r,g=c["".concat(o,".").concat(k)]||c[k]||u[k]||a;return s?t.createElement(g,i(i({ref:n},m),{},{components:s})):t.createElement(g,i({ref:n},m))}));function k(e,n){var s=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=s.length,i=new Array(a);i[0]=c;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var l=2;l<a;l++)i[l]=s[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,s)}c.displayName="MDXCreateElement"},3325:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var t=s(7462),r=(s(7294),s(3905));const a={hide_title:!0},i="Expressions",p={unversionedId:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/Expressions",id:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/Expressions",title:"Expressions",description:"Static class with functions to build NetCal expressions",source:"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/Expressions.md",sourceDirName:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions",slug:"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/Expressions",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/Expressions",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"docsSidebar",previous:{title:"ExpressionSettings",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},next:{title:"IGenericNAryExpression&lt;T1, TResult&gt;",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/IGenericNAryExpression`2"}},o={},l=[{value:"Methods",id:"methods",level:2},{value:"<strong>FromCurve(Curve, String)</strong>",id:"fromcurvecurve-string",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"<strong>FromRational(Rational, String)</strong>",id:"fromrationalrational-string",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<strong>Negate(CurveExpression, String, ExpressionSettings)</strong>",id:"negatecurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"<strong>Negate(Curve, String, String, ExpressionSettings)</strong>",id:"negatecurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"<strong>ToNonNegative(CurveExpression, String, ExpressionSettings)</strong>",id:"tononnegativecurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"<strong>ToNonNegative(Curve, String, String, ExpressionSettings)</strong>",id:"tononnegativecurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"<strong>SubAdditiveClosure(CurveExpression, String, ExpressionSettings)</strong>",id:"subadditiveclosurecurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"<strong>SubAdditiveClosure(Curve, String, String, ExpressionSettings)</strong>",id:"subadditiveclosurecurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"<strong>SuperAdditiveClosure(CurveExpression, String, ExpressionSettings)</strong>",id:"superadditiveclosurecurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"<strong>SuperAdditiveClosure(Curve, String, String, ExpressionSettings)</strong>",id:"superadditiveclosurecurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"<strong>ToUpperNonDecreasing(CurveExpression, String, ExpressionSettings)</strong>",id:"touppernondecreasingcurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"<strong>ToUpperNonDecreasing(Curve, String, String, ExpressionSettings)</strong>",id:"touppernondecreasingcurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"<strong>ToLowerNonDecreasing(CurveExpression, String, ExpressionSettings)</strong>",id:"tolowernondecreasingcurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"<strong>ToLowerNonDecreasing(Curve, String, String, ExpressionSettings)</strong>",id:"tolowernondecreasingcurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"<strong>ToLeftContinuous(CurveExpression, String, ExpressionSettings)</strong>",id:"toleftcontinuouscurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-14",level:4},{value:"<strong>ToLeftContinuous(Curve, String, String, ExpressionSettings)</strong>",id:"toleftcontinuouscurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-15",level:4},{value:"<strong>ToRightContinuous(CurveExpression, String, ExpressionSettings)</strong>",id:"torightcontinuouscurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-16",level:4},{value:"<strong>ToRightContinuous(Curve, String, String, ExpressionSettings)</strong>",id:"torightcontinuouscurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-17",level:4},{value:"<strong>WithZeroOrigin(CurveExpression, String, ExpressionSettings)</strong>",id:"withzeroorigincurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-18",level:4},{value:"<strong>WithZeroOrigin(Curve, String, String, ExpressionSettings)</strong>",id:"withzeroorigincurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-19",level:4},{value:"<strong>LowerPseudoInverse(CurveExpression, String, ExpressionSettings)</strong>",id:"lowerpseudoinversecurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-20",level:4},{value:"<strong>LowerPseudoInverse(Curve, String, String, ExpressionSettings)</strong>",id:"lowerpseudoinversecurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-21",level:4},{value:"Returns",id:"returns-21",level:4},{value:"<strong>UpperPseudoInverse(CurveExpression, String, ExpressionSettings)</strong>",id:"upperpseudoinversecurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-22",level:4},{value:"Returns",id:"returns-22",level:4},{value:"<strong>UpperPseudoInverse(Curve, String, String, ExpressionSettings)</strong>",id:"upperpseudoinversecurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-23",level:4},{value:"Returns",id:"returns-23",level:4},{value:"<strong>Addition(CurveExpression, CurveExpression, String, ExpressionSettings)</strong>",id:"additioncurveexpression-curveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-24",level:4},{value:"Returns",id:"returns-24",level:4},{value:"<strong>Addition(CurveExpression, Curve, String, String, ExpressionSettings)</strong>",id:"additioncurveexpression-curve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-25",level:4},{value:"Returns",id:"returns-25",level:4},{value:"<strong>Addition(Curve, Curve, String, String, String, ExpressionSettings)</strong>",id:"additioncurve-curve-string-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-26",level:4},{value:"Returns",id:"returns-26",level:4},{value:"<strong>Addition(Curve, CurveExpression, String, String, ExpressionSettings)</strong>",id:"additioncurve-curveexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-27",level:4},{value:"Returns",id:"returns-27",level:4},{value:"<strong>Addition(IReadOnlyCollection&lt;Curve&gt;, IReadOnlyCollection&lt;String&gt;, String, ExpressionSettings)</strong>",id:"additionireadonlycollectioncurve-ireadonlycollectionstring-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-28",level:4},{value:"Returns",id:"returns-28",level:4},{value:"<strong>Subtraction(CurveExpression, CurveExpression, String, ExpressionSettings)</strong>",id:"subtractioncurveexpression-curveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-29",level:4},{value:"Returns",id:"returns-29",level:4},{value:"<strong>Subtraction(CurveExpression, Curve, String, String, ExpressionSettings)</strong>",id:"subtractioncurveexpression-curve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-30",level:4},{value:"Returns",id:"returns-30",level:4},{value:"<strong>Subtraction(Curve, Curve, String, String, String, ExpressionSettings)</strong>",id:"subtractioncurve-curve-string-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-31",level:4},{value:"Returns",id:"returns-31",level:4},{value:"<strong>Subtraction(Curve, CurveExpression, String, String, ExpressionSettings)</strong>",id:"subtractioncurve-curveexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-32",level:4},{value:"Returns",id:"returns-32",level:4},{value:"<strong>Minimum(CurveExpression, CurveExpression, String, ExpressionSettings)</strong>",id:"minimumcurveexpression-curveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-33",level:4},{value:"Returns",id:"returns-33",level:4},{value:"<strong>Minimum(CurveExpression, Curve, String, String, ExpressionSettings)</strong>",id:"minimumcurveexpression-curve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-34",level:4},{value:"Returns",id:"returns-34",level:4},{value:"<strong>Minimum(Curve, Curve, String, String, String, ExpressionSettings)</strong>",id:"minimumcurve-curve-string-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-35",level:4},{value:"Returns",id:"returns-35",level:4},{value:"<strong>Minimum(Curve, CurveExpression, String, String, ExpressionSettings)</strong>",id:"minimumcurve-curveexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-36",level:4},{value:"Returns",id:"returns-36",level:4},{value:"<strong>Minimum(IReadOnlyCollection&lt;Curve&gt;, IReadOnlyCollection&lt;String&gt;, String, ExpressionSettings)</strong>",id:"minimumireadonlycollectioncurve-ireadonlycollectionstring-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-37",level:4},{value:"Returns",id:"returns-37",level:4},{value:"<strong>Maximum(CurveExpression, CurveExpression, String, ExpressionSettings)</strong>",id:"maximumcurveexpression-curveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-38",level:4},{value:"Returns",id:"returns-38",level:4},{value:"<strong>Maximum(CurveExpression, Curve, String, String, ExpressionSettings)</strong>",id:"maximumcurveexpression-curve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-39",level:4},{value:"Returns",id:"returns-39",level:4},{value:"<strong>Maximum(Curve, Curve, String, String, String, ExpressionSettings)</strong>",id:"maximumcurve-curve-string-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-40",level:4},{value:"Returns",id:"returns-40",level:4},{value:"<strong>Maximum(Curve, CurveExpression, String, String, ExpressionSettings)</strong>",id:"maximumcurve-curveexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-41",level:4},{value:"Returns",id:"returns-41",level:4},{value:"<strong>Maximum(IReadOnlyCollection&lt;Curve&gt;, IReadOnlyCollection&lt;String&gt;, String, ExpressionSettings)</strong>",id:"maximumireadonlycollectioncurve-ireadonlycollectionstring-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-42",level:4},{value:"Returns",id:"returns-42",level:4},{value:"<strong>Convolution(CurveExpression, CurveExpression, String, ExpressionSettings)</strong>",id:"convolutioncurveexpression-curveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-43",level:4},{value:"Returns",id:"returns-43",level:4},{value:"<strong>Convolution(CurveExpression, Curve, String, String, ExpressionSettings)</strong>",id:"convolutioncurveexpression-curve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-44",level:4},{value:"Returns",id:"returns-44",level:4},{value:"<strong>Convolution(Curve, Curve, String, String, String, ExpressionSettings)</strong>",id:"convolutioncurve-curve-string-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-45",level:4},{value:"Returns",id:"returns-45",level:4},{value:"<strong>Convolution(Curve, CurveExpression, String, String, ExpressionSettings)</strong>",id:"convolutioncurve-curveexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-46",level:4},{value:"Returns",id:"returns-46",level:4},{value:"<strong>Convolution(IReadOnlyCollection&lt;Curve&gt;, IReadOnlyCollection&lt;String&gt;, String, ExpressionSettings)</strong>",id:"convolutionireadonlycollectioncurve-ireadonlycollectionstring-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-47",level:4},{value:"Returns",id:"returns-47",level:4},{value:"<strong>Deconvolution(CurveExpression, CurveExpression, String, ExpressionSettings)</strong>",id:"deconvolutioncurveexpression-curveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-48",level:4},{value:"Returns",id:"returns-48",level:4},{value:"<strong>Deconvolution(CurveExpression, Curve, String, String, ExpressionSettings)</strong>",id:"deconvolutioncurveexpression-curve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-49",level:4},{value:"Returns",id:"returns-49",level:4},{value:"<strong>Deconvolution(Curve, Curve, String, String, String, ExpressionSettings)</strong>",id:"deconvolutioncurve-curve-string-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-50",level:4},{value:"Returns",id:"returns-50",level:4},{value:"<strong>Deconvolution(Curve, CurveExpression, String, String, ExpressionSettings)</strong>",id:"deconvolutioncurve-curveexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-51",level:4},{value:"Returns",id:"returns-51",level:4},{value:"<strong>MaxPlusConvolution(CurveExpression, CurveExpression, String, ExpressionSettings)</strong>",id:"maxplusconvolutioncurveexpression-curveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-52",level:4},{value:"Returns",id:"returns-52",level:4},{value:"<strong>MaxPlusConvolution(CurveExpression, Curve, String, String, ExpressionSettings)</strong>",id:"maxplusconvolutioncurveexpression-curve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-53",level:4},{value:"Returns",id:"returns-53",level:4},{value:"<strong>MaxPlusConvolution(Curve, Curve, String, String, String, ExpressionSettings)</strong>",id:"maxplusconvolutioncurve-curve-string-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-54",level:4},{value:"Returns",id:"returns-54",level:4},{value:"<strong>MaxPlusConvolution(Curve, CurveExpression, String, String, ExpressionSettings)</strong>",id:"maxplusconvolutioncurve-curveexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-55",level:4},{value:"Returns",id:"returns-55",level:4},{value:"<strong>MaxPlusConvolution(IReadOnlyCollection&lt;Curve&gt;, IReadOnlyCollection&lt;String&gt;, String, ExpressionSettings)</strong>",id:"maxplusconvolutionireadonlycollectioncurve-ireadonlycollectionstring-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-56",level:4},{value:"Returns",id:"returns-56",level:4},{value:"<strong>MaxPlusDeconvolution(CurveExpression, CurveExpression, String, ExpressionSettings)</strong>",id:"maxplusdeconvolutioncurveexpression-curveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-57",level:4},{value:"Returns",id:"returns-57",level:4},{value:"<strong>MaxPlusDeconvolution(CurveExpression, Curve, String, String, ExpressionSettings)</strong>",id:"maxplusdeconvolutioncurveexpression-curve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-58",level:4},{value:"Returns",id:"returns-58",level:4},{value:"<strong>MaxPlusDeconvolution(Curve, Curve, String, String, String, ExpressionSettings)</strong>",id:"maxplusdeconvolutioncurve-curve-string-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-59",level:4},{value:"Returns",id:"returns-59",level:4},{value:"<strong>MaxPlusDeconvolution(Curve, CurveExpression, String, String, ExpressionSettings)</strong>",id:"maxplusdeconvolutioncurve-curveexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-60",level:4},{value:"Returns",id:"returns-60",level:4},{value:"<strong>Composition(CurveExpression, CurveExpression, String, ExpressionSettings)</strong>",id:"compositioncurveexpression-curveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-61",level:4},{value:"Returns",id:"returns-61",level:4},{value:"<strong>Composition(CurveExpression, Curve, String, String, ExpressionSettings)</strong>",id:"compositioncurveexpression-curve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-62",level:4},{value:"Returns",id:"returns-62",level:4},{value:"<strong>Composition(Curve, Curve, String, String, String, ExpressionSettings)</strong>",id:"compositioncurve-curve-string-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-63",level:4},{value:"Returns",id:"returns-63",level:4},{value:"<strong>Composition(Curve, CurveExpression, String, String, ExpressionSettings)</strong>",id:"compositioncurve-curveexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-64",level:4},{value:"Returns",id:"returns-64",level:4},{value:"<strong>HorizontalDeviation(CurveExpression, CurveExpression, String, ExpressionSettings)</strong>",id:"horizontaldeviationcurveexpression-curveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-65",level:4},{value:"Returns",id:"returns-65",level:4},{value:"<strong>HorizontalDeviation(CurveExpression, Curve, String, String, ExpressionSettings)</strong>",id:"horizontaldeviationcurveexpression-curve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-66",level:4},{value:"Returns",id:"returns-66",level:4},{value:"<strong>HorizontalDeviation(Curve, Curve, String, String, String, ExpressionSettings)</strong>",id:"horizontaldeviationcurve-curve-string-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-67",level:4},{value:"Returns",id:"returns-67",level:4},{value:"<strong>HorizontalDeviation(Curve, CurveExpression, String, String, ExpressionSettings)</strong>",id:"horizontaldeviationcurve-curveexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-68",level:4},{value:"Returns",id:"returns-68",level:4},{value:"<strong>VerticalDeviation(CurveExpression, CurveExpression, String, ExpressionSettings)</strong>",id:"verticaldeviationcurveexpression-curveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-69",level:4},{value:"Returns",id:"returns-69",level:4},{value:"<strong>VerticalDeviation(CurveExpression, Curve, String, String, ExpressionSettings)</strong>",id:"verticaldeviationcurveexpression-curve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-70",level:4},{value:"Returns",id:"returns-70",level:4},{value:"<strong>VerticalDeviation(Curve, Curve, String, String, String, ExpressionSettings)</strong>",id:"verticaldeviationcurve-curve-string-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-71",level:4},{value:"Returns",id:"returns-71",level:4},{value:"<strong>VerticalDeviation(Curve, CurveExpression, String, String, ExpressionSettings)</strong>",id:"verticaldeviationcurve-curveexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-72",level:4},{value:"Returns",id:"returns-72",level:4},{value:"<strong>DelayBy(CurveExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"delaybycurveexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-73",level:4},{value:"Returns",id:"returns-73",level:4},{value:"<strong>DelayBy(CurveExpression, Rational, String, ExpressionSettings)</strong>",id:"delaybycurveexpression-rational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-74",level:4},{value:"Returns",id:"returns-74",level:4},{value:"<strong>DelayBy(Curve, Rational, String, String, ExpressionSettings)</strong>",id:"delaybycurve-rational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-75",level:4},{value:"Returns",id:"returns-75",level:4},{value:"<strong>DelayBy(Curve, RationalExpression, String, String, ExpressionSettings)</strong>",id:"delaybycurve-rationalexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-76",level:4},{value:"Returns",id:"returns-76",level:4},{value:"<strong>AnticipateBy(CurveExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"anticipatebycurveexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-77",level:4},{value:"Returns",id:"returns-77",level:4},{value:"<strong>AnticipateBy(CurveExpression, Rational, String, ExpressionSettings)</strong>",id:"anticipatebycurveexpression-rational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-78",level:4},{value:"Returns",id:"returns-78",level:4},{value:"<strong>AnticipateBy(Curve, Rational, String, String, ExpressionSettings)</strong>",id:"anticipatebycurve-rational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-79",level:4},{value:"Returns",id:"returns-79",level:4},{value:"<strong>AnticipateBy(Curve, RationalExpression, String, String, ExpressionSettings)</strong>",id:"anticipatebycurve-rationalexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-80",level:4},{value:"Returns",id:"returns-80",level:4},{value:"<strong>Scale(CurveExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"scalecurveexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-81",level:4},{value:"Returns",id:"returns-81",level:4},{value:"<strong>Scale(CurveExpression, Rational, String, ExpressionSettings)</strong>",id:"scalecurveexpression-rational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-82",level:4},{value:"Returns",id:"returns-82",level:4},{value:"<strong>Scale(Curve, Rational, String, String, ExpressionSettings)</strong>",id:"scalecurve-rational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-83",level:4},{value:"Returns",id:"returns-83",level:4},{value:"<strong>Scale(Curve, RationalExpression, String, String, ExpressionSettings)</strong>",id:"scalecurve-rationalexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-84",level:4},{value:"Returns",id:"returns-84",level:4},{value:"<strong>RationalAddition(RationalExpression, Rational, String, String, ExpressionSettings)</strong>",id:"rationaladditionrationalexpression-rational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-85",level:4},{value:"Returns",id:"returns-85",level:4},{value:"<strong>RationalAddition(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"rationaladditionrationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-86",level:4},{value:"Returns",id:"returns-86",level:4},{value:"<strong>RationalAddition(Rational, Rational, String, String, String, ExpressionSettings)</strong>",id:"rationaladditionrational-rational-string-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-87",level:4},{value:"Returns",id:"returns-87",level:4},{value:"<strong>RationalAddition(Rational, RationalExpression, String, String, ExpressionSettings)</strong>",id:"rationaladditionrational-rationalexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-88",level:4},{value:"Returns",id:"returns-88",level:4},{value:"<strong>RationalAddition(IReadOnlyCollection&lt;Rational&gt;, IReadOnlyCollection&lt;String&gt;, String, ExpressionSettings)</strong>",id:"rationaladditionireadonlycollectionrational-ireadonlycollectionstring-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-89",level:4},{value:"Returns",id:"returns-89",level:4},{value:"<strong>RationalSubtraction(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"rationalsubtractionrationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-90",level:4},{value:"Returns",id:"returns-90",level:4},{value:"<strong>RationalSubtraction(RationalExpression, Rational, String, String, ExpressionSettings)</strong>",id:"rationalsubtractionrationalexpression-rational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-91",level:4},{value:"Returns",id:"returns-91",level:4},{value:"<strong>RationalSubtraction(Rational, Rational, String, String, String, ExpressionSettings)</strong>",id:"rationalsubtractionrational-rational-string-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-92",level:4},{value:"Returns",id:"returns-92",level:4},{value:"<strong>RationalSubtraction(Rational, RationalExpression, String, String, ExpressionSettings)</strong>",id:"rationalsubtractionrational-rationalexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-93",level:4},{value:"Returns",id:"returns-93",level:4},{value:"<strong>Product(RationalExpression, Rational, String, String, ExpressionSettings)</strong>",id:"productrationalexpression-rational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-94",level:4},{value:"Returns",id:"returns-94",level:4},{value:"<strong>Product(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"productrationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-95",level:4},{value:"Returns",id:"returns-95",level:4},{value:"<strong>Product(Rational, Rational, String, String, String, ExpressionSettings)</strong>",id:"productrational-rational-string-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-96",level:4},{value:"Returns",id:"returns-96",level:4},{value:"<strong>Product(Rational, RationalExpression, String, String, ExpressionSettings)</strong>",id:"productrational-rationalexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-97",level:4},{value:"Returns",id:"returns-97",level:4},{value:"<strong>RationalProduct(IReadOnlyCollection&lt;Rational&gt;, IReadOnlyCollection&lt;String&gt;, String, ExpressionSettings)</strong>",id:"rationalproductireadonlycollectionrational-ireadonlycollectionstring-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-98",level:4},{value:"Returns",id:"returns-98",level:4},{value:"<strong>Division(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"divisionrationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-99",level:4},{value:"Returns",id:"returns-99",level:4},{value:"<strong>Division(RationalExpression, Rational, String, String, ExpressionSettings)</strong>",id:"divisionrationalexpression-rational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-100",level:4},{value:"Returns",id:"returns-100",level:4},{value:"<strong>Division(Rational, Rational, String, String, String, ExpressionSettings)</strong>",id:"divisionrational-rational-string-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-101",level:4},{value:"Returns",id:"returns-101",level:4},{value:"<strong>Division(Rational, RationalExpression, String, String, ExpressionSettings)</strong>",id:"divisionrational-rationalexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-102",level:4},{value:"Returns",id:"returns-102",level:4},{value:"<strong>LeastCommonMultiple(RationalExpression, Rational, String, String, ExpressionSettings)</strong>",id:"leastcommonmultiplerationalexpression-rational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-103",level:4},{value:"Returns",id:"returns-103",level:4},{value:"<strong>LeastCommonMultiple(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"leastcommonmultiplerationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-104",level:4},{value:"Returns",id:"returns-104",level:4},{value:"<strong>LeastCommonMultiple(Rational, Rational, String, String, String, ExpressionSettings)</strong>",id:"leastcommonmultiplerational-rational-string-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-105",level:4},{value:"Returns",id:"returns-105",level:4},{value:"<strong>LeastCommonMultiple(Rational, RationalExpression, String, String, ExpressionSettings)</strong>",id:"leastcommonmultiplerational-rationalexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-106",level:4},{value:"Returns",id:"returns-106",level:4},{value:"<strong>LeastCommonMultiple(IReadOnlyCollection&lt;Rational&gt;, IReadOnlyCollection&lt;String&gt;, String, ExpressionSettings)</strong>",id:"leastcommonmultipleireadonlycollectionrational-ireadonlycollectionstring-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-107",level:4},{value:"Returns",id:"returns-107",level:4},{value:"<strong>GreatestCommonDivisor(RationalExpression, Rational, String, String, ExpressionSettings)</strong>",id:"greatestcommondivisorrationalexpression-rational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-108",level:4},{value:"Returns",id:"returns-108",level:4},{value:"<strong>GreatestCommonDivisor(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"greatestcommondivisorrationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-109",level:4},{value:"Returns",id:"returns-109",level:4},{value:"<strong>GreatestCommonDivisor(Rational, Rational, String, String, String, ExpressionSettings)</strong>",id:"greatestcommondivisorrational-rational-string-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-110",level:4},{value:"Returns",id:"returns-110",level:4},{value:"<strong>GreatestCommonDivisor(Rational, RationalExpression, String, String, ExpressionSettings)</strong>",id:"greatestcommondivisorrational-rationalexpression-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-111",level:4},{value:"Returns",id:"returns-111",level:4},{value:"<strong>GreatestCommonDivisor(IReadOnlyCollection&lt;Rational&gt;, IReadOnlyCollection&lt;String&gt;, String, ExpressionSettings)</strong>",id:"greatestcommondivisorireadonlycollectionrational-ireadonlycollectionstring-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-112",level:4},{value:"Returns",id:"returns-112",level:4},{value:"<strong>Negate(RationalExpression, String, ExpressionSettings)</strong>",id:"negaterationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-113",level:4},{value:"Returns",id:"returns-113",level:4},{value:"<strong>Negate(Rational, String, ExpressionSettings)</strong>",id:"negaterational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-114",level:4},{value:"Returns",id:"returns-114",level:4},{value:"<strong>Invert(RationalExpression, String, ExpressionSettings)</strong>",id:"invertrationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-115",level:4},{value:"Returns",id:"returns-115",level:4},{value:"<strong>Invert(Rational, String, ExpressionSettings)</strong>",id:"invertrational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-116",level:4},{value:"Returns",id:"returns-116",level:4},{value:"<strong>Placeholder(String, ExpressionSettings)</strong>",id:"placeholderstring-expressionsettings",level:3},{value:"Parameters",id:"parameters-117",level:4},{value:"Returns",id:"returns-117",level:4},{value:"<strong>RationalPlaceholder(String, ExpressionSettings)</strong>",id:"rationalplaceholderstring-expressionsettings",level:3},{value:"Parameters",id:"parameters-118",level:4},{value:"Returns",id:"returns-118",level:4},{value:"<strong>Compute&lt;T&gt;(IGenericExpression&lt;T&gt;)</strong>",id:"computetigenericexpressiont",level:3},{value:"Type Parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-119",level:4},{value:"Returns",id:"returns-119",level:4},{value:"<strong>Equivalent(CurveExpression, CurveExpression)</strong>",id:"equivalentcurveexpression-curveexpression",level:3},{value:"Parameters",id:"parameters-120",level:4},{value:"Returns",id:"returns-120",level:4}],m={toc:l};function u(e){let{components:n,...s}=e;return(0,r.kt)("wrapper",(0,t.Z)({},m,s,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"expressions"},"Expressions"),(0,r.kt)("p",null,"Static class with functions to build NetCal expressions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static class Expressions\n")),(0,r.kt)("p",null,"Inheritance ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.object"},"Object")," \u2192 ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/Expressions"},"Expressions")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"fromcurvecurve-string"},(0,r.kt)("strong",{parentName:"h3"},"FromCurve(Curve, String)")),(0,r.kt)("p",null,"Creates a ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression")," object from a Curve object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static ConcreteCurveExpression FromCurve(Curve curve, string name)\n")),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"fromrationalrational-string"},(0,r.kt)("strong",{parentName:"h3"},"FromRational(Rational, String)")),(0,r.kt)("p",null,"Creates a ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression")," object from a Rational object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalNumberExpression FromRational(Rational number, string name)\n")),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"negatecurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Negate(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds the opposite operator to the expression passed as argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Negate(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"negatecurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Negate(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds the opposite operator to the curve passed as argument (internally converted to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Negate(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"tononnegativecurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"ToNonNegative(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the expression passed as argument the operation to compute its non-negative version."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression ToNonNegative(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"tononnegativecurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"ToNonNegative(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the curve passed as argument the operation to compute its non-negative version."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression ToNonNegative(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"subadditiveclosurecurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"SubAdditiveClosure(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds the sub-additive closure operator to the expression passed as argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression SubAdditiveClosure(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-6"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"subadditiveclosurecurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"SubAdditiveClosure(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds the sub-additive closure operator to the curve passed as argument\n(internally converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression SubAdditiveClosure(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-7"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"superadditiveclosurecurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"SuperAdditiveClosure(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds the super-additive closure operator to the expression passed as argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression SuperAdditiveClosure(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-8"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"superadditiveclosurecurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"SuperAdditiveClosure(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds the super-additive closure operator to the curve passed as argument (internally converted\nto ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression SuperAdditiveClosure(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-9"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"touppernondecreasingcurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"ToUpperNonDecreasing(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the expression passed as argument the operation to compute its upper non-decreasing version."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression ToUpperNonDecreasing(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-10"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"touppernondecreasingcurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"ToUpperNonDecreasing(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the curve passed as argument the operation to compute its upper non-decreasing version."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression ToUpperNonDecreasing(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-11"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-11"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"tolowernondecreasingcurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"ToLowerNonDecreasing(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the expression passed as argument the operation to compute its lower non-decreasing version."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression ToLowerNonDecreasing(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-12"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-12"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"tolowernondecreasingcurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"ToLowerNonDecreasing(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the curve passed as argument (converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") the operation to\ncompute its lower non-decreasing version."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression ToLowerNonDecreasing(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-13"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-13"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"toleftcontinuouscurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"ToLeftContinuous(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the expression passed as argument the operation to compute a left continuous version of it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression ToLeftContinuous(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-14"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-14"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"toleftcontinuouscurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"ToLeftContinuous(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the curve passed as argument (converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") the operation to\ncompute a left continuous version of it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression ToLeftContinuous(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-15"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-15"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"torightcontinuouscurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"ToRightContinuous(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the expression passed as argument the operation to compute a right continuous version of it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression ToRightContinuous(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-16"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-16"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"torightcontinuouscurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"ToRightContinuous(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the curve passed as argument (converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") the operation to\ncompute a right continuous version of it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression ToRightContinuous(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-17"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-17"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"withzeroorigincurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"WithZeroOrigin(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the expression passed as argument an operation which enforces it to assume 0 at time 0."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression WithZeroOrigin(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-18"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-18"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"withzeroorigincurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"WithZeroOrigin(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the curve passed as argument (converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression")," an operation which\nenforces it to assume 0 at time 0."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression WithZeroOrigin(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-19"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-19"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"lowerpseudoinversecurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"LowerPseudoInverse(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the expression passed as argument the operation to compute the lower pseudo-inverse function,\n",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msubsup",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msubsup"},"f"),(0,r.kt)("mo",{parentName:"msubsup"},"\u2193"),(0,r.kt)("mrow",{parentName:"msubsup"},(0,r.kt)("mo",{parentName:"mrow"},"\u2212"),(0,r.kt)("mn",{parentName:"mrow"},"1"))),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mi",{parentName:"mrow"},"inf"),(0,r.kt)("mo",{parentName:"mrow"},"\u2061"),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"{"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow"},":"),(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"\u2265"),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"}")),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mi",{parentName:"mrow"},"sup"),(0,r.kt)("mo",{parentName:"mrow"},"\u2061"),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"{"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow"},":"),(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"<"),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"}"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"f^{-1}_\\downarrow(x) = \\inf \\left\\{ t : f(t) \\ge x \\right\\} = \\sup \\left\\{ t : f(t) < x \\right\\}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1.2917em",verticalAlign:"-0.4374em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8542em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.3987em",marginLeft:"-0.1076em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mrel mtight"},"\u2193"))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.1031em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.4374em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mop"},"in",(0,r.kt)("span",{parentName:"span",style:{marginRight:"0.07778em"}},"f")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"{"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},":"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2265"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},"}")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mop"},"sup"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"{"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},":"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"<"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},"}")))))),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression LowerPseudoInverse(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-20"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-20"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"lowerpseudoinversecurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"LowerPseudoInverse(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the curve passed as argument (converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") the operation to\ncompute the lower pseudo-inverse function,\n",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msubsup",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msubsup"},"f"),(0,r.kt)("mo",{parentName:"msubsup"},"\u2193"),(0,r.kt)("mrow",{parentName:"msubsup"},(0,r.kt)("mo",{parentName:"mrow"},"\u2212"),(0,r.kt)("mn",{parentName:"mrow"},"1"))),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mi",{parentName:"mrow"},"inf"),(0,r.kt)("mo",{parentName:"mrow"},"\u2061"),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"{"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow"},":"),(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"\u2265"),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"}")),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mi",{parentName:"mrow"},"sup"),(0,r.kt)("mo",{parentName:"mrow"},"\u2061"),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"{"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow"},":"),(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"<"),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"}"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"f^{-1}_\\downarrow(x) = \\inf \\left\\{ t : f(t) \\ge x \\right\\} = \\sup \\left\\{ t : f(t) < x \\right\\}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1.2917em",verticalAlign:"-0.4374em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8542em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.3987em",marginLeft:"-0.1076em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mrel mtight"},"\u2193"))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.1031em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.4374em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mop"},"in",(0,r.kt)("span",{parentName:"span",style:{marginRight:"0.07778em"}},"f")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"{"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},":"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2265"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},"}")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mop"},"sup"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"{"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},":"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"<"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},"}")))))),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression LowerPseudoInverse(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-21"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-21"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"upperpseudoinversecurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"UpperPseudoInverse(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the expression passed as argument the operation to compute the upper pseudo-inverse function,\n",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msubsup",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msubsup"},"f"),(0,r.kt)("mo",{parentName:"msubsup"},"\u2191"),(0,r.kt)("mrow",{parentName:"msubsup"},(0,r.kt)("mo",{parentName:"mrow"},"\u2212"),(0,r.kt)("mn",{parentName:"mrow"},"1"))),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mi",{parentName:"mrow"},"inf"),(0,r.kt)("mo",{parentName:"mrow"},"\u2061"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"{"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow"},":"),(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},">"),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"}"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mi",{parentName:"mrow"},"sup"),(0,r.kt)("mo",{parentName:"mrow"},"\u2061"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"{"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow"},":"),(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"\u2264"),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"}")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"f^{-1}_\\uparrow(x) = \\inf\\{ t : f(t) > x \\} = \\sup\\{ t : f(t) \\le x \\}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1.2917em",verticalAlign:"-0.4374em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8542em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.3987em",marginLeft:"-0.1076em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mrel mtight"},"\u2191"))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.1031em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.4374em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mop"},"in",(0,r.kt)("span",{parentName:"span",style:{marginRight:"0.07778em"}},"f")),(0,r.kt)("span",{parentName:"span",className:"mopen"},"{"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},":"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},">"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose"},"}"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mop"},"sup"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"{"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},":"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2264"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose"},"}"))))),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression UpperPseudoInverse(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-22"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-22"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"upperpseudoinversecurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"UpperPseudoInverse(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the curve passed as argument (converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") the operation to\ncompute the upper pseudo-inverse function,\n",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msubsup",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msubsup"},"f"),(0,r.kt)("mo",{parentName:"msubsup"},"\u2191"),(0,r.kt)("mrow",{parentName:"msubsup"},(0,r.kt)("mo",{parentName:"mrow"},"\u2212"),(0,r.kt)("mn",{parentName:"mrow"},"1"))),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mi",{parentName:"mrow"},"inf"),(0,r.kt)("mo",{parentName:"mrow"},"\u2061"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"{"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow"},":"),(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},">"),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"}"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mi",{parentName:"mrow"},"sup"),(0,r.kt)("mo",{parentName:"mrow"},"\u2061"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"{"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow"},":"),(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"\u2264"),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"}")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"f^{-1}_\\uparrow(x) = \\inf\\{ t : f(t) > x \\} = \\sup\\{ t : f(t) \\le x \\}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1.2917em",verticalAlign:"-0.4374em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8542em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.3987em",marginLeft:"-0.1076em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mrel mtight"},"\u2191"))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.1031em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.4374em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mop"},"in",(0,r.kt)("span",{parentName:"span",style:{marginRight:"0.07778em"}},"f")),(0,r.kt)("span",{parentName:"span",className:"mopen"},"{"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},":"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},">"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose"},"}"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mop"},"sup"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"{"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},":"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2264"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose"},"}"))))),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression UpperPseudoInverse(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-23"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-23"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"additioncurveexpression-curveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Addition(CurveExpression, CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the addition between the expressions passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Addition(CurveExpression expressionL, CurveExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-24"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-24"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"additioncurveexpression-curve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Addition(CurveExpression, Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the addition between the expression and the curve (converted to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Addition(CurveExpression expression, Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-25"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-25"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"additioncurve-curve-string-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Addition(Curve, Curve, String, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the addition between the two curves (converted to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Addition(Curve curveL, Curve curveR, string nameL, string nameR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-26"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveR")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameR")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-26"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"additioncurve-curveexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Addition(Curve, CurveExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the addition between the curve !:curveL (converted to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") and the expression !:expressionR passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Addition(Curve curveL, CurveExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-27"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-27"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"additionireadonlycollectioncurve-ireadonlycollectionstring-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Addition(IReadOnlyCollection","<","Curve",">",", IReadOnlyCollection","<","String",">",", String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the addition between the curves passed as argument in the collection\n!:curves."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Addition(IReadOnlyCollection<Curve> curves, IReadOnlyCollection<string> names, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-28"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curves")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","Curve",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"names")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","String",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-28"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"subtractioncurveexpression-curveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Subtraction(CurveExpression, CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the subtraction between the two expressions passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Subtraction(CurveExpression expressionL, CurveExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-29"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-29"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"subtractioncurveexpression-curve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Subtraction(CurveExpression, Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the subtraction between the expression and the curve (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Subtraction(CurveExpression expression, Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-30"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-30"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"subtractioncurve-curve-string-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Subtraction(Curve, Curve, String, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the subtraction between the two curves (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Subtraction(Curve curveL, Curve curveR, string nameL, string nameR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-31"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveR")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameR")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-31"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"subtractioncurve-curveexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Subtraction(Curve, CurveExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the subtraction between the curve !:curveL (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") and the expression !:expressionR passed as\narguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Subtraction(Curve curveL, CurveExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-32"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-32"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"minimumcurveexpression-curveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Minimum(CurveExpression, CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the minimum between the expressions passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Minimum(CurveExpression expressionL, CurveExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-33"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-33"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"minimumcurveexpression-curve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Minimum(CurveExpression, Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the minimum between the expression and the curve (converted to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Minimum(CurveExpression expression, Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-34"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-34"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"minimumcurve-curve-string-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Minimum(Curve, Curve, String, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the minimum between the two curves (converted to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Minimum(Curve curveL, Curve curveR, string nameL, string nameR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-35"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveR")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameR")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-35"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"minimumcurve-curveexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Minimum(Curve, CurveExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the minimum between the curve !:curveL (converted to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") and the expression !:expressionR passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Minimum(Curve curveL, CurveExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-36"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-36"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"minimumireadonlycollectioncurve-ireadonlycollectionstring-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Minimum(IReadOnlyCollection","<","Curve",">",", IReadOnlyCollection","<","String",">",", String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the minimum between the curves passed as argument in the collection\n!:curves."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Minimum(IReadOnlyCollection<Curve> curves, IReadOnlyCollection<string> names, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-37"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curves")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","Curve",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"names")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","String",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-37"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maximumcurveexpression-curveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Maximum(CurveExpression, CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the maximum between the expressions passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Maximum(CurveExpression expressionL, CurveExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-38"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-38"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maximumcurveexpression-curve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Maximum(CurveExpression, Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the maximum between the expression and the curve (converted to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Maximum(CurveExpression expression, Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-39"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-39"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maximumcurve-curve-string-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Maximum(Curve, Curve, String, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the maximum between the two curves (converted to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Maximum(Curve curveL, Curve curveR, string nameL, string nameR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-40"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveR")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameR")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-40"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maximumcurve-curveexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Maximum(Curve, CurveExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the maximum between the curve !:curveL (converted to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") and the expression !:expressionR passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Maximum(Curve curveL, CurveExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-41"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-41"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maximumireadonlycollectioncurve-ireadonlycollectionstring-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Maximum(IReadOnlyCollection","<","Curve",">",", IReadOnlyCollection","<","String",">",", String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the maximum between the curves passed as argument in the collection\n!:curves."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Maximum(IReadOnlyCollection<Curve> curves, IReadOnlyCollection<string> names, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-42"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curves")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","Curve",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"names")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","String",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-42"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"convolutioncurveexpression-curveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Convolution(CurveExpression, CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the convolution between the expressions passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Convolution(CurveExpression expressionL, CurveExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-43"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-43"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"convolutioncurveexpression-curve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Convolution(CurveExpression, Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the convolution between the expression and the curve (converted to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Convolution(CurveExpression expression, Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-44"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-44"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"convolutioncurve-curve-string-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Convolution(Curve, Curve, String, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the convolution between the two curves (converted to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Convolution(Curve curveL, Curve curveR, string nameL, string nameR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-45"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveR")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameR")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-45"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"convolutioncurve-curveexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Convolution(Curve, CurveExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the convolution between the curve !:curveL (converted to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") and the expression !:expressionR passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Convolution(Curve curveL, CurveExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-46"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-46"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"convolutionireadonlycollectioncurve-ireadonlycollectionstring-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Convolution(IReadOnlyCollection","<","Curve",">",", IReadOnlyCollection","<","String",">",", String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the convolution between the curves passed as argument in the collection\n!:curves."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Convolution(IReadOnlyCollection<Curve> curves, IReadOnlyCollection<string> names, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-47"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curves")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","Curve",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"names")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","String",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-47"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"deconvolutioncurveexpression-curveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Deconvolution(CurveExpression, CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the deconvolution between the two expressions passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Deconvolution(CurveExpression expressionL, CurveExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-48"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-48"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"deconvolutioncurveexpression-curve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Deconvolution(CurveExpression, Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the deconvolution between the expression and the curve (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Deconvolution(CurveExpression expression, Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-49"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-49"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"deconvolutioncurve-curve-string-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Deconvolution(Curve, Curve, String, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the deconvolution between the two curves (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Deconvolution(Curve curveL, Curve curveR, string nameL, string nameR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-50"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveR")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameR")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-50"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"deconvolutioncurve-curveexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Deconvolution(Curve, CurveExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the deconvolution between the curve !:curveL (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") and the expression !:expressionR passed as\narguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Deconvolution(Curve curveL, CurveExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-51"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-51"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maxplusconvolutioncurveexpression-curveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"MaxPlusConvolution(CurveExpression, CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the max-plus convolution between the expressions passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression MaxPlusConvolution(CurveExpression expressionL, CurveExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-52"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-52"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maxplusconvolutioncurveexpression-curve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"MaxPlusConvolution(CurveExpression, Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the max-plus convolution between the expression and the curve\n(converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression MaxPlusConvolution(CurveExpression expression, Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-53"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-53"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maxplusconvolutioncurve-curve-string-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"MaxPlusConvolution(Curve, Curve, String, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the max-plus convolution between the two curves (converted to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression MaxPlusConvolution(Curve curveL, Curve curveR, string nameL, string nameR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-54"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveR")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameR")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-54"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maxplusconvolutioncurve-curveexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"MaxPlusConvolution(Curve, CurveExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the max-plus convolution between the curve !:curveL (converted\nto ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") and the expression !:expressionR passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression MaxPlusConvolution(Curve curveL, CurveExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-55"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-55"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maxplusconvolutionireadonlycollectioncurve-ireadonlycollectionstring-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"MaxPlusConvolution(IReadOnlyCollection","<","Curve",">",", IReadOnlyCollection","<","String",">",", String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the max-plus convolution between the curves passed as argument in the\ncollection !:curves."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression MaxPlusConvolution(IReadOnlyCollection<Curve> curves, IReadOnlyCollection<string> names, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-56"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curves")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","Curve",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"names")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","String",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-56"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maxplusdeconvolutioncurveexpression-curveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"MaxPlusDeconvolution(CurveExpression, CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the max-plus deconvolution between the two expressions passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression MaxPlusDeconvolution(CurveExpression expressionL, CurveExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-57"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-57"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maxplusdeconvolutioncurveexpression-curve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"MaxPlusDeconvolution(CurveExpression, Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the max-plus deconvolution between the expression and the curve (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression MaxPlusDeconvolution(CurveExpression expression, Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-58"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-58"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maxplusdeconvolutioncurve-curve-string-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"MaxPlusDeconvolution(Curve, Curve, String, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the max-plus deconvolution between the two curves (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression MaxPlusDeconvolution(Curve curveL, Curve curveR, string nameL, string nameR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-59"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveR")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameR")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-59"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maxplusdeconvolutioncurve-curveexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"MaxPlusDeconvolution(Curve, CurveExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the max-plus deconvolution between the curve !:curveL\n(internally converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") and the expression !:expressionR\npassed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression MaxPlusDeconvolution(Curve curveL, CurveExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-60"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-60"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"compositioncurveexpression-curveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Composition(CurveExpression, CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the composition between the two expressions passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Composition(CurveExpression expressionL, CurveExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-61"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-61"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"compositioncurveexpression-curve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Composition(CurveExpression, Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the composition between the expression and the curve (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Composition(CurveExpression expression, Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-62"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-62"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"compositioncurve-curve-string-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Composition(Curve, Curve, String, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the composition between the two curves (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Composition(Curve curveL, Curve curveR, string nameL, string nameR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-63"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveR")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameR")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-63"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"compositioncurve-curveexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Composition(Curve, CurveExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the composition between the curve !:curveL (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") and the expression !:expressionR passed as\narguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Composition(Curve curveL, CurveExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-64"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-64"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"horizontaldeviationcurveexpression-curveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"HorizontalDeviation(CurveExpression, CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the horizontal deviation operation between the two expressions passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression HorizontalDeviation(CurveExpression expressionL, CurveExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-65"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-65"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"horizontaldeviationcurveexpression-curve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"HorizontalDeviation(CurveExpression, Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the horizontal deviation operation between the expression and the curve\n(internally converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression HorizontalDeviation(CurveExpression expression, Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-66"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-66"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"horizontaldeviationcurve-curve-string-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"HorizontalDeviation(Curve, Curve, String, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the horizontal deviation operation between the two curves (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression HorizontalDeviation(Curve curveL, Curve curveR, string nameL, string nameR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-67"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveR")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameR")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-67"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"horizontaldeviationcurve-curveexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"HorizontalDeviation(Curve, CurveExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the horizontal deviation operation between the curve !:curveL\n(internally converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") and the expression !:expressionR\npassed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression HorizontalDeviation(Curve curveL, CurveExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-68"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-68"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"verticaldeviationcurveexpression-curveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"VerticalDeviation(CurveExpression, CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the vertical deviation operation between the two expressions passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression VerticalDeviation(CurveExpression expressionL, CurveExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-69"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-69"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"verticaldeviationcurveexpression-curve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"VerticalDeviation(CurveExpression, Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the vertical deviation operation between the expression and the curve\n(internally converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression VerticalDeviation(CurveExpression expression, Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-70"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-70"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"verticaldeviationcurve-curve-string-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"VerticalDeviation(Curve, Curve, String, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the vertical deviation operation between the two curves (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression VerticalDeviation(Curve curveL, Curve curveR, string nameL, string nameR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-71"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveR")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameR")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-71"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"verticaldeviationcurve-curveexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"VerticalDeviation(Curve, CurveExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the vertical deviation operation between the curve !:curveL\n(internally converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") and the expression !:expressionR\npassed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression VerticalDeviation(Curve curveL, CurveExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-72"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-72"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"delaybycurveexpression-rationalexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"DelayBy(CurveExpression, RationalExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to delay the curve corresponding to the expression\n!:expressionL by the rational number described by !:expressionR."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression DelayBy(CurveExpression expressionL, RationalExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-73"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-73"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"delaybycurveexpression-rational-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"DelayBy(CurveExpression, Rational, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to delay the curve corresponding to the expression\npassed as first argument by the rational number !:delay."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression DelayBy(CurveExpression expression, Rational delay, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-74"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"delay")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-74"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"delaybycurve-rational-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"DelayBy(Curve, Rational, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to delay the curve !:curveL\nby the rational number !:delay."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression DelayBy(Curve curveL, Rational delay, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-75"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"delay")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-75"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"delaybycurve-rationalexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"DelayBy(Curve, RationalExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to delay the curve !:curveL\nby the rational number described by the expression !:expressionR."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression DelayBy(Curve curveL, RationalExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-76"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-76"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"anticipatebycurveexpression-rationalexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"AnticipateBy(CurveExpression, RationalExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to anticipate the curve corresponding to the expression\n!:expressionL by the rational number described by !:expressionR."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression AnticipateBy(CurveExpression expressionL, RationalExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-77"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-77"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"anticipatebycurveexpression-rational-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"AnticipateBy(CurveExpression, Rational, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to anticipate the curve corresponding to the expression\npassed as first argument by the rational number !:time."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression AnticipateBy(CurveExpression expression, Rational time, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-78"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"time")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-78"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"anticipatebycurve-rational-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"AnticipateBy(Curve, Rational, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to anticipate the curve !:curveL\nby the rational number !:time."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression AnticipateBy(Curve curveL, Rational time, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-79"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"time")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-79"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"anticipatebycurve-rationalexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"AnticipateBy(Curve, RationalExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to anticipate the curve !:curveL\nby the rational number described by the expression !:expressionR."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression AnticipateBy(Curve curveL, RationalExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-80"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-80"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"scalecurveexpression-rationalexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Scale(CurveExpression, RationalExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to scale the curve corresponding to the expression\n!:expressionL by the rational number described by !:expressionR."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Scale(CurveExpression expressionL, RationalExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-81"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-81"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"scalecurveexpression-rational-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Scale(CurveExpression, Rational, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to scale the curve corresponding to the expression\npassed as first argument by the rational number !:scaleFactor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Scale(CurveExpression expression, Rational scaleFactor, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-82"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"scaleFactor")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-82"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"scalecurve-rational-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Scale(Curve, Rational, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to scale the curve !:curveL\nby the rational number !:scaleFactor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Scale(Curve curveL, Rational scaleFactor, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-83"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"scaleFactor")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-83"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"scalecurve-rationalexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Scale(Curve, RationalExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to scale the curve !:curveL\nby the rational number described by the expression !:expressionR."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Scale(Curve curveL, RationalExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-84"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curveL")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-84"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"rationaladditionrationalexpression-rational-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"RationalAddition(RationalExpression, Rational, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the addition between the expression passed as first argument and the\nrational number passed as second argument (converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression RationalAddition(RationalExpression expression, Rational number, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-85"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-85"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"rationaladditionrationalexpression-rationalexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"RationalAddition(RationalExpression, RationalExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the addition between the expressions passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression RationalAddition(RationalExpression expressionL, RationalExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-86"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-86"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"rationaladditionrational-rational-string-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"RationalAddition(Rational, Rational, String, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the addition between the two rational numbers passed as arguments\n(converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression RationalAddition(Rational rationalL, Rational rationalR, string nameL, string nameR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-87"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"rationalL")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"rationalR")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameR")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-87"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"rationaladditionrational-rationalexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"RationalAddition(Rational, RationalExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the addition between the rational number !:rationalL and the\nexpression !:expressionR passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression RationalAddition(Rational rationalL, RationalExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-88"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"rationalL")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-88"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"rationaladditionireadonlycollectionrational-ireadonlycollectionstring-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"RationalAddition(IReadOnlyCollection","<","Rational",">",", IReadOnlyCollection","<","String",">",", String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the addition between the rational numbers passed as\narguments using the collection !:numbers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression RationalAddition(IReadOnlyCollection<Rational> numbers, IReadOnlyCollection<string> names, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-89"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"numbers")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","Rational",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"names")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","String",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-89"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"rationalsubtractionrationalexpression-rationalexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"RationalSubtraction(RationalExpression, RationalExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the subtraction between the two rational expressions passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression RationalSubtraction(RationalExpression expressionL, RationalExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-90"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-90"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"rationalsubtractionrationalexpression-rational-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"RationalSubtraction(RationalExpression, Rational, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the subtraction between the expression and the number (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression RationalSubtraction(RationalExpression expression, Rational number, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-91"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-91"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"rationalsubtractionrational-rational-string-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"RationalSubtraction(Rational, Rational, String, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the subtraction between the two numbers (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression RationalSubtraction(Rational numberL, Rational numberR, string nameL, string nameR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-92"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"numberL")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"numberR")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameR")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-92"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"rationalsubtractionrational-rationalexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"RationalSubtraction(Rational, RationalExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the subtraction between the number !:numberL (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") and the expression !:expressionR passed as\narguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression RationalSubtraction(Rational numberL, RationalExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-93"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"numberL")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-93"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"productrationalexpression-rational-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Product(RationalExpression, Rational, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the product between the expression passed as first argument and the\nrational number passed as second argument (converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Product(RationalExpression expression, Rational number, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-94"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-94"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"productrationalexpression-rationalexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Product(RationalExpression, RationalExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the product between the expressions passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Product(RationalExpression expressionL, RationalExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-95"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-95"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"productrational-rational-string-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Product(Rational, Rational, String, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the product between the two rational numbers passed as arguments\n(converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Product(Rational rationalL, Rational rationalR, string nameL, string nameR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-96"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"rationalL")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"rationalR")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameR")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-96"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"productrational-rationalexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Product(Rational, RationalExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the product between the rational number !:rationalL and the\nexpression !:expressionR passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Product(Rational rationalL, RationalExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-97"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"rationalL")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-97"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"rationalproductireadonlycollectionrational-ireadonlycollectionstring-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"RationalProduct(IReadOnlyCollection","<","Rational",">",", IReadOnlyCollection","<","String",">",", String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the product between the rational numbers passed as\narguments using the collection !:numbers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression RationalProduct(IReadOnlyCollection<Rational> numbers, IReadOnlyCollection<string> names, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-98"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"numbers")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","Rational",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"names")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","String",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-98"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"divisionrationalexpression-rationalexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Division(RationalExpression, RationalExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the division between the two rational expressions passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Division(RationalExpression expressionL, RationalExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-99"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-99"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"divisionrationalexpression-rational-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Division(RationalExpression, Rational, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the division between the expression and the number (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Division(RationalExpression expression, Rational number, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-100"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-100"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"divisionrational-rational-string-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Division(Rational, Rational, String, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the division between the two numbers (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Division(Rational numberL, Rational numberR, string nameL, string nameR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-101"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"numberL")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"numberR")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameR")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-101"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"divisionrational-rationalexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Division(Rational, RationalExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the division between the number !:numberL (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),") and the expression !:expressionR passed as\narguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Division(Rational numberL, RationalExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-102"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"numberL")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-102"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"leastcommonmultiplerationalexpression-rational-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"LeastCommonMultiple(RationalExpression, Rational, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the l.c.m. between the expression passed as first argument and the\nrational number passed as second argument (converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression LeastCommonMultiple(RationalExpression expression, Rational number, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-103"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-103"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"leastcommonmultiplerationalexpression-rationalexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"LeastCommonMultiple(RationalExpression, RationalExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the l.c.m. between the expressions passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression LeastCommonMultiple(RationalExpression expressionL, RationalExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-104"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-104"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"leastcommonmultiplerational-rational-string-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"LeastCommonMultiple(Rational, Rational, String, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the l.c.m. between the two rational numbers passed as arguments\n(converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression LeastCommonMultiple(Rational rationalL, Rational rationalR, string nameL, string nameR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-105"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"rationalL")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"rationalR")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameR")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-105"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"leastcommonmultiplerational-rationalexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"LeastCommonMultiple(Rational, RationalExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the l.c.m. between the rational number !:rationalL and the\nexpression !:expressionR passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression LeastCommonMultiple(Rational rationalL, RationalExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-106"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"rationalL")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-106"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"leastcommonmultipleireadonlycollectionrational-ireadonlycollectionstring-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"LeastCommonMultiple(IReadOnlyCollection","<","Rational",">",", IReadOnlyCollection","<","String",">",", String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the l.c.m. between the rational numbers passed as\narguments using the collection !:numbers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression LeastCommonMultiple(IReadOnlyCollection<Rational> numbers, IReadOnlyCollection<string> names, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-107"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"numbers")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","Rational",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"names")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","String",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-107"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"greatestcommondivisorrationalexpression-rational-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"GreatestCommonDivisor(RationalExpression, Rational, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the g.c.d. between the expression passed as first argument and the\nrational number passed as second argument (converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression GreatestCommonDivisor(RationalExpression expression, Rational number, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-108"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-108"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"greatestcommondivisorrationalexpression-rationalexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"GreatestCommonDivisor(RationalExpression, RationalExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the g.c.d. between the expressions passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression GreatestCommonDivisor(RationalExpression expressionL, RationalExpression expressionR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-109"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionL")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-109"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"greatestcommondivisorrational-rational-string-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"GreatestCommonDivisor(Rational, Rational, String, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the g.c.d. between the two rational numbers passed as arguments\n(converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression GreatestCommonDivisor(Rational rationalL, Rational rationalR, string nameL, string nameR, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-110"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"rationalL")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"rationalR")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameR")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-110"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"greatestcommondivisorrational-rationalexpression-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"GreatestCommonDivisor(Rational, RationalExpression, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the g.c.d. between the rational number !:rationalL and the\nexpression !:expressionR passed as arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression GreatestCommonDivisor(Rational rationalL, RationalExpression expressionR, string nameL, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-111"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"rationalL")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionR")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nameL")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-111"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"greatestcommondivisorireadonlycollectionrational-ireadonlycollectionstring-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"GreatestCommonDivisor(IReadOnlyCollection","<","Rational",">",", IReadOnlyCollection","<","String",">",", String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the g.c.d. between the rational numbers passed as\narguments using the collection !:numbers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression GreatestCommonDivisor(IReadOnlyCollection<Rational> numbers, IReadOnlyCollection<string> names, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-112"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"numbers")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","Rational",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"names")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ireadonlycollection-1"},"IReadOnlyCollection","<","String",">"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-112"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"negaterationalexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Negate(RationalExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds the negation operator to the expression passed as argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Negate(RationalExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-113"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-113"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"negaterational-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Negate(Rational, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds the negation operator to the number passed as argument (which is converted to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Negate(Rational number, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-114"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-114"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"invertrationalexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Invert(RationalExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds the inversion operator to the expression passed as argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Invert(RationalExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-115"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-115"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"invertrational-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Invert(Rational, String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds the inversion operator to the number passed as argument (which is converted to\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression"},"RationalNumberExpression"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression Invert(Rational number, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-116"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-116"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"placeholderstring-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Placeholder(String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a placeholder expression for a curve expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Placeholder(string name, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-117"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-117"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"rationalplaceholderstring-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"RationalPlaceholder(String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a placeholder expression for a rational expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static RationalExpression RationalPlaceholder(string name, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-118"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-118"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"computetigenericexpressiont"},(0,r.kt)("strong",{parentName:"h3"},"Compute","<","T",">","(IGenericExpression","<","T",">",")")),(0,r.kt)("p",null,"Computes the value of the expression (rational or curve expression) passed as argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static T Compute<T>(IGenericExpression<T> expression)\n")),(0,r.kt)("h4",{id:"type-parameters"},"Type Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Expressions.T"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"parameters-119"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," IGenericExpression","<","T",">",(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-119"},"Returns"),(0,r.kt)("p",null,"Expressions.T",(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"equivalentcurveexpression-curveexpression"},(0,r.kt)("strong",{parentName:"h3"},"Equivalent(CurveExpression, CurveExpression)")),(0,r.kt)("p",null,"Verifies if two curve expressions (!:e1 and !:e2) are equivalent, i.e., their\nvalues are equivalent."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static bool Equivalent(CurveExpression e1, CurveExpression e2)\n")),(0,r.kt)("h4",{id:"parameters-120"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"e1")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"e2")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-120"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)))}u.isMDXComponent=!0}}]);