"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[9282],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),h=a,d=m["".concat(l,".").concat(h)]||m[h]||u[h]||i;return n?r.createElement(d,o(o({ref:t},c),{},{components:n})):r.createElement(d,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3279:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={hide_title:!0,title:"Nancy HTTP server",sidebar_position:1},o="Nancy HTTP server",s={unversionedId:"tutorials/getting-started/other-languages/http-api",id:"tutorials/getting-started/other-languages/http-api",title:"Nancy HTTP server",description:"The Nancy HTTP server provides the capabilities of the Nancy library via an HTTP API, enabling remote computation as well as the implementation of wrapper libraries in any language that supports sending HTTP requests.",source:"@site/docs/tutorials/getting-started/other-languages/http-api.md",sourceDirName:"tutorials/getting-started/other-languages",slug:"/tutorials/getting-started/other-languages/http-api",permalink:"/nancy/docs/tutorials/getting-started/other-languages/http-api",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{hide_title:!0,title:"Nancy HTTP server",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Using notebooks",permalink:"/nancy/docs/tutorials/getting-started/notebooks"},next:{title:"Wrapper libraries",permalink:"/nancy/docs/tutorials/getting-started/other-languages/wrappers"}},l={},p=[{value:"How it works",id:"how-it-works",level:2},{value:"Declare the curve",id:"declare-the-curve",level:3},{value:"Compute the self-convolution",id:"compute-the-self-convolution",level:3},{value:"Retrieve the result",id:"retrieve-the-result",level:3}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"nancy-http-server"},"Nancy HTTP server"),(0,a.kt)("p",null,"The Nancy HTTP server provides the capabilities of the Nancy library via an HTTP API, enabling remote computation as well as the implementation of wrapper libraries in any language that supports sending HTTP requests."),(0,a.kt)("p",null,"It is available on ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/rzippo/nancy-http"},"GitHub"),"."),(0,a.kt)("h2",{id:"how-it-works"},"How it works"),(0,a.kt)("p",null,"The HTTP API is based on a ",(0,a.kt)("em",{parentName:"p"},"declare then use")," scheme.\nWhen the user ",(0,a.kt)("em",{parentName:"p"},"declares")," a curve, the server replies with its ID.\nThen, curve operations take IDs as operands and return the ID of the result."),(0,a.kt)("p",null,"This scheme reduces the communication overhead, since all the intermediate computations can be performed without transmitting the curve data back and forth."),(0,a.kt)("p",null,"In the example below, we show a series of requests that compute and retrieve the self-convolution of a curve."),(0,a.kt)("p",null,"For the full API, check the examples in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/rzippo/nancy-http"},"repository"),"."),(0,a.kt)("h3",{id:"declare-the-curve"},"Declare the curve"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-http"},'POST http://localhost:1006/curve HTTP/1.1\ncontent-type: application/json\n\n{\n    "type": "curve",\n    "baseSequence": \n    {\n        "elements": [\n            {\n                "type": "point",\n                "time": 0,\n                "value": 0\n            },\n            {\n                "type": "segment",\n                "startTime": 0,\n                "endTime": {\n                    "num": 1,\n                    "den": 3\n                },\n                "rightLimitAtStartTime": 0,\n                "slope": 0\n            },\n            {\n                "type": "point",\n                "time": {\n                    "num": 1,\n                    "den": 3\n                },\n                "value": 0\n            },\n            {\n                "type": "segment",\n                "startTime": {\n                    "num": 1,\n                    "den": 3\n                },\n                "endTime": 3,\n                "rightLimitAtStartTime": 0,\n                "slope": 0\n            },\n            {\n                "type": "point",\n                "time": 3,\n                "value": 0\n            },\n            {\n                "type": "segment",\n                "startTime": 3,\n                "endTime": {\n                    "num": 10,\n                    "den": 3\n                },\n                "rightLimitAtStartTime": 0,\n                "slope": 12\n            }\n        ]\n    },\n    "pseudoPeriodStart": {\n        "num": 1,\n        "den": 3\n    },\n    "pseudoPeriodLength": 3,\n    "pseudoPeriodHeight": 4\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-http"},'HTTP/1.1 200 OK\nConnection: close\nContent-Type: application/json; charset=utf-8\nDate: Tue, 05 Dec 2023 10:57:30 GMT\nServer: Kestrel\nTransfer-Encoding: chunked\n\n{\n  "id": "883D5A67"\n}\n')),(0,a.kt)("h3",{id:"compute-the-self-convolution"},"Compute the self-convolution"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-http"},'POST http://localhost:1006/curve/convolution HTTP/1.1\ncontent-type: application/json\n\n[\n    "883D5A67",\n    "883D5A67"\n]\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-http"},'HTTP/1.1 200 OK\nConnection: close\nContent-Type: application/json; charset=utf-8\nDate: Tue, 05 Dec 2023 10:59:04 GMT\nServer: Kestrel\nTransfer-Encoding: chunked\n\n"7419A1DF"\n')),(0,a.kt)("h3",{id:"retrieve-the-result"},"Retrieve the result"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-http"},"GET http://localhost:1006/curve/7419A1DF HTTP/1.1\ncontent-type: application/json\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-http"},'HTTP/1.1 200 OK\nConnection: close\nContent-Type: application/json; charset=utf-8\nDate: Tue, 05 Dec 2023 10:59:43 GMT\nServer: Kestrel\nTransfer-Encoding: chunked\n\n{\n  "curve": {\n    "type": "curve",\n    "baseSequence": {\n      "elements": [\n        {\n          "type": "point",\n          "time": 0,\n          "value": 0\n        },\n        {\n          "type": "segment",\n          "startTime": 0,\n          "endTime": {\n            "num": 10,\n            "den": 3\n          },\n          "rightLimitAtStartTime": 0,\n          "slope": 0\n        },\n        {\n          "type": "point",\n          "time": {\n            "num": 10,\n            "den": 3\n          },\n          "value": 0\n        },\n        {\n          "type": "segment",\n          "startTime": {\n            "num": 10,\n            "den": 3\n          },\n          "endTime": 6,\n          "rightLimitAtStartTime": 0,\n          "slope": 0\n        },\n        {\n          "type": "point",\n          "time": 6,\n          "value": 0\n        },\n        {\n          "type": "segment",\n          "startTime": 6,\n          "endTime": {\n            "num": 19,\n            "den": 3\n          },\n          "rightLimitAtStartTime": 0,\n          "slope": 12\n        }\n      ]\n    },\n    "pseudoPeriodStart": {\n      "num": 10,\n      "den": 3\n    },\n    "pseudoPeriodLength": 3,\n    "pseudoPeriodHeight": 4\n  }\n}\n')))}u.isMDXComponent=!0}}]);