"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[8106],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>v});var s=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},o=Object.keys(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=s.createContext({}),l=function(e){var n=s.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return s.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},d=s.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=l(t),v=r,m=d["".concat(p,".").concat(v)]||d[v]||c[v]||o;return t?s.createElement(m,i(i({ref:n},u),{},{components:t})):s.createElement(m,i({ref:n},u))}));function v(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var l=2;l<o;l++)i[l]=t[l];return s.createElement.apply(null,i)}return s.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2953:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=t(7462),r=(t(7294),t(3905));const o={hide_title:!0},i="ToLeftContinuousExpression",a={unversionedId:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ToLeftContinuousExpression",id:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ToLeftContinuousExpression",title:"ToLeftContinuousExpression",description:"Class representing an expression whose root operation is the conversion of a curve to be left-continuous",source:"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ToLeftContinuousExpression.md",sourceDirName:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals",slug:"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ToLeftContinuousExpression",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ToLeftContinuousExpression",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"docsSidebar",previous:{title:"SuperAdditiveClosureExpression",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/SuperAdditiveClosureExpression"},next:{title:"ToLowerNonDecreasingExpression",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ToLowerNonDecreasingExpression"}},p={},l=[{value:"Properties",id:"properties",level:2},{value:"<strong>Expression</strong>",id:"expression",level:3},{value:"Property Value",id:"property-value",level:4},{value:"<strong>Name</strong>",id:"name",level:3},{value:"Property Value",id:"property-value-1",level:4},{value:"<strong>Settings</strong>",id:"settings",level:3},{value:"Property Value",id:"property-value-2",level:4},{value:"<strong>Value</strong>",id:"value",level:3},{value:"Property Value",id:"property-value-3",level:4},{value:"<strong>IsSubAdditive</strong>",id:"issubadditive",level:3},{value:"Property Value",id:"property-value-4",level:4},{value:"<strong>IsLeftContinuous</strong>",id:"isleftcontinuous",level:3},{value:"Property Value",id:"property-value-5",level:4},{value:"<strong>IsRightContinuous</strong>",id:"isrightcontinuous",level:3},{value:"Property Value",id:"property-value-6",level:4},{value:"<strong>IsNonNegative</strong>",id:"isnonnegative",level:3},{value:"Property Value",id:"property-value-7",level:4},{value:"<strong>IsNonDecreasing</strong>",id:"isnondecreasing",level:3},{value:"Property Value",id:"property-value-8",level:4},{value:"<strong>IsConcave</strong>",id:"isconcave",level:3},{value:"Property Value",id:"property-value-9",level:4},{value:"<strong>IsConvex</strong>",id:"isconvex",level:3},{value:"Property Value",id:"property-value-10",level:4},{value:"<strong>IsZeroAtZero</strong>",id:"iszeroatzero",level:3},{value:"Property Value",id:"property-value-11",level:4},{value:"<strong>IsWellDefined</strong>",id:"iswelldefined",level:3},{value:"Property Value",id:"property-value-12",level:4},{value:"Constructors",id:"constructors",level:2},{value:"<strong>ToLeftContinuousExpression(CurveExpression, String, ExpressionSettings)</strong>",id:"toleftcontinuousexpressioncurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters",level:4},{value:"<strong>ToLeftContinuousExpression(Curve, String, String, ExpressionSettings)</strong>",id:"toleftcontinuousexpressioncurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Methods",id:"methods",level:2},{value:"<strong>Accept(ICurveExpressionVisitor)</strong>",id:"accepticurveexpressionvisitor",level:3},{value:"Parameters",id:"parameters-2",level:4}],u={toc:l};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,s.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"toleftcontinuousexpression"},"ToLeftContinuousExpression"),(0,r.kt)("p",null,"Class representing an expression whose root operation is the conversion of a curve to be left-continuous\n(",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ToLeftContinuousExpression#toleftcontinuous"},"ToLeftContinuous()"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class ToLeftContinuousExpression : Unipi.Nancy.Expressions.CurveUnaryExpression`1[[Unipi.Nancy.MinPlusAlgebra.Curve, Unipi.Nancy, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], IGenericExpression`1, Unipi.Nancy.Expressions.Visitors.IVisitableCurve, IGenericUnaryExpression`2\n")),(0,r.kt)("p",null,"Inheritance ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.object"},"Object")," \u2192 ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression")," \u2192 ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveUnaryExpression%601"},"CurveUnaryExpression","<","Curve",">")," \u2192 ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ToLeftContinuousExpression"},"ToLeftContinuousExpression"),(0,r.kt)("br",null),"\nImplements ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","Curve",">"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/IVisitableCurve"},"IVisitableCurve"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericUnaryExpression%602"},"IGenericUnaryExpression","<","Curve, Curve",">")),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"expression"},(0,r.kt)("strong",{parentName:"h3"},"Expression")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public IGenericExpression<Curve> Expression { get; set; }\n")),(0,r.kt)("h4",{id:"property-value"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","Curve",">"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"name"},(0,r.kt)("strong",{parentName:"h3"},"Name")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public string Name { get; }\n")),(0,r.kt)("h4",{id:"property-value-1"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"settings"},(0,r.kt)("strong",{parentName:"h3"},"Settings")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public ExpressionSettings Settings { get; }\n")),(0,r.kt)("h4",{id:"property-value-2"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"value"},(0,r.kt)("strong",{parentName:"h3"},"Value")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public Curve Value { get; }\n")),(0,r.kt)("h4",{id:"property-value-3"},"Property Value"),(0,r.kt)("p",null,"Curve",(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"issubadditive"},(0,r.kt)("strong",{parentName:"h3"},"IsSubAdditive")),(0,r.kt)("p",null,"True if the curve described by the expression is sub-additive. Property evaluated avoiding as much as possible\nto make any computation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsSubAdditive { get; }\n")),(0,r.kt)("h4",{id:"property-value-4"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"isleftcontinuous"},(0,r.kt)("strong",{parentName:"h3"},"IsLeftContinuous")),(0,r.kt)("p",null,"True if the curve described by the expression is left continuous. Property evaluated avoiding as much as\npossible to make any computation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsLeftContinuous { get; }\n")),(0,r.kt)("h4",{id:"property-value-5"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"isrightcontinuous"},(0,r.kt)("strong",{parentName:"h3"},"IsRightContinuous")),(0,r.kt)("p",null,"True if the curve described by the expression is right continuous. Property evaluated avoiding as much as\npossible to make any computation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsRightContinuous { get; }\n")),(0,r.kt)("h4",{id:"property-value-6"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"isnonnegative"},(0,r.kt)("strong",{parentName:"h3"},"IsNonNegative")),(0,r.kt)("p",null,"True if the curve described by the expression is non-negative. Property evaluated avoiding as much as\npossible to make any computation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsNonNegative { get; }\n")),(0,r.kt)("h4",{id:"property-value-7"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"isnondecreasing"},(0,r.kt)("strong",{parentName:"h3"},"IsNonDecreasing")),(0,r.kt)("p",null,"True if the curve described by the expression is non-decreasing. Property evaluated avoiding as much as\npossible to make any computation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsNonDecreasing { get; }\n")),(0,r.kt)("h4",{id:"property-value-8"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"isconcave"},(0,r.kt)("strong",{parentName:"h3"},"IsConcave")),(0,r.kt)("p",null,"True if the curve described by the expression is concave. Property evaluated avoiding as much as\npossible to make any computation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsConcave { get; }\n")),(0,r.kt)("h4",{id:"property-value-9"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"isconvex"},(0,r.kt)("strong",{parentName:"h3"},"IsConvex")),(0,r.kt)("p",null,"True if the curve described by the expression is convex. Property evaluated avoiding as much as\npossible to make any computation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsConvex { get; }\n")),(0,r.kt)("h4",{id:"property-value-10"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"iszeroatzero"},(0,r.kt)("strong",{parentName:"h3"},"IsZeroAtZero")),(0,r.kt)("p",null,"True if the curve f described by the expression is 0 in 0 (f(0) = 0). Property evaluated avoiding as much as\npossible to make any computation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsZeroAtZero { get; }\n")),(0,r.kt)("h4",{id:"property-value-11"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"iswelldefined"},(0,r.kt)("strong",{parentName:"h3"},"IsWellDefined")),(0,r.kt)("p",null,"True if the operation described by the expression is well-defined according to the definition in\nin ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/References"},"[","BT08","]")," Section 2.1."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsWellDefined { get; }\n")),(0,r.kt)("h4",{id:"property-value-12"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h2",{id:"constructors"},"Constructors"),(0,r.kt)("h3",{id:"toleftcontinuousexpressioncurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"ToLeftContinuousExpression(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Class representing an expression whose root operation is the conversion of a curve to be left-continuous\n(",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ToLeftContinuousExpression#toleftcontinuous"},"ToLeftContinuous()"),")"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public ToLeftContinuousExpression(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"toleftcontinuousexpressioncurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"ToLeftContinuousExpression(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,'Creates the "to-left-continuous" expression'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public ToLeftContinuousExpression(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"accepticurveexpressionvisitor"},(0,r.kt)("strong",{parentName:"h3"},"Accept(ICurveExpressionVisitor)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public void Accept(ICurveExpressionVisitor visitor)\n")),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"visitor")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/ICurveExpressionVisitor"},"ICurveExpressionVisitor"),(0,r.kt)("br",null)))}c.isMDXComponent=!0}}]);