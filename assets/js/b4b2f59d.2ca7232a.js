"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[5141],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=l(t),m=s,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return t?r.createElement(h,a(a({ref:n},c),{},{components:t})):r.createElement(h,a({ref:n},c))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,a=new Array(i);a[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:s,a[1]=o;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1600:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=t(7462),s=(t(7294),t(3905));const i={hide_title:!0},a="Equivalence",o={unversionedId:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence",id:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence",title:"Equivalence",description:"The class allows to define equivalences involving NetCal expressions",source:"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence.md",sourceDirName:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences",slug:"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"docsSidebar",previous:{title:"DeconvolutionWithConvolution",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/DeconvolutionWithConvolution"},next:{title:"EquivalenceGrammarVisitor",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/EquivalenceGrammarVisitor"}},p={},l=[{value:"Properties",id:"properties",level:2},{value:"<strong>LeftSideExpression</strong>",id:"leftsideexpression",level:3},{value:"Property Value",id:"property-value",level:4},{value:"<strong>RightSideExpression</strong>",id:"rightsideexpression",level:3},{value:"Property Value",id:"property-value-1",level:4},{value:"Constructors",id:"constructors",level:2},{value:"<strong>Equivalence(CurveExpression, CurveExpression)</strong>",id:"equivalencecurveexpression-curveexpression",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Exceptions",id:"exceptions",level:4},{value:"Methods",id:"methods",level:2},{value:"<strong>AddHypothesis(String, Predicate&lt;CurveExpression&gt;)</strong>",id:"addhypothesisstring-predicatecurveexpression",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"<strong>AddHypothesis(String, String, Func&lt;CurveExpression, CurveExpression, Boolean&gt;)</strong>",id:"addhypothesisstring-string-funccurveexpression-curveexpression-boolean",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"<strong>AddHypothesis(String, String, String, Func&lt;CurveExpression, CurveExpression, CurveExpression, Boolean&gt;)</strong>",id:"addhypothesisstring-string-string-funccurveexpression-curveexpression-curveexpression-boolean",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"<strong>AddHypothesis(String, Predicate&lt;RationalExpression&gt;)</strong>",id:"addhypothesisstring-predicaterationalexpression",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"<strong>AddHypothesis(String, String, Func&lt;RationalExpression, RationalExpression, Boolean&gt;)</strong>",id:"addhypothesisstring-string-funcrationalexpression-rationalexpression-boolean",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"<strong>AddHypothesis(String, String, String, Func&lt;RationalExpression, RationalExpression, RationalExpression, Boolean&gt;)</strong>",id:"addhypothesisstring-string-string-funcrationalexpression-rationalexpression-rationalexpression-boolean",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"<strong>Apply(IGenericExpression&lt;Curve&gt;, CheckType)</strong>",id:"applyigenericexpressioncurve-checktype",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns",level:4},{value:"<strong>ReadEquivalences(String)</strong>",id:"readequivalencesstring",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<strong>ToString()</strong>",id:"tostring",level:3},{value:"Returns",id:"returns-2",level:4}],c={toc:l};function u(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"equivalence"},"Equivalence"),(0,s.kt)("p",null,"The class allows to define equivalences involving NetCal expressions"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Equivalence\n")),(0,s.kt)("p",null,"Inheritance ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.object"},"Object")," \u2192 ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence"},"Equivalence")),(0,s.kt)("h2",{id:"properties"},"Properties"),(0,s.kt)("h3",{id:"leftsideexpression"},(0,s.kt)("strong",{parentName:"h3"},"LeftSideExpression")),(0,s.kt)("p",null,"Left side of the equivalence"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression LeftSideExpression { get; }\n")),(0,s.kt)("h4",{id:"property-value"},"Property Value"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"rightsideexpression"},(0,s.kt)("strong",{parentName:"h3"},"RightSideExpression")),(0,s.kt)("p",null,"Right side of the equivalence"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression RightSideExpression { get; }\n")),(0,s.kt)("h4",{id:"property-value-1"},"Property Value"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,s.kt)("br",null)),(0,s.kt)("h2",{id:"constructors"},"Constructors"),(0,s.kt)("h3",{id:"equivalencecurveexpression-curveexpression"},(0,s.kt)("strong",{parentName:"h3"},"Equivalence(CurveExpression, CurveExpression)")),(0,s.kt)("p",null,"Equivalence constructor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public Equivalence(CurveExpression leftSideExpression, CurveExpression rightSideExpression)\n")),(0,s.kt)("h4",{id:"parameters"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"leftSideExpression")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,s.kt)("br",null),"\nThe left side of the equivalence"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"rightSideExpression")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,s.kt)("br",null),"\nThe right side of the equivalence"),(0,s.kt)("h4",{id:"exceptions"},"Exceptions"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.exception"},"Exception"),(0,s.kt)("br",null),"\nException raised if left or right side don't contain placeholders"),(0,s.kt)("h2",{id:"methods"},"Methods"),(0,s.kt)("h3",{id:"addhypothesisstring-predicatecurveexpression"},(0,s.kt)("strong",{parentName:"h3"},"AddHypothesis(String, Predicate","<","CurveExpression",">",")")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public void AddHypothesis(string placeholder, Predicate<CurveExpression> h)\n")),(0,s.kt)("h4",{id:"parameters-1"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"placeholder")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"h")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.predicate-1"},"Predicate","<","CurveExpression",">"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"addhypothesisstring-string-funccurveexpression-curveexpression-boolean"},(0,s.kt)("strong",{parentName:"h3"},"AddHypothesis(String, String, Func","<","CurveExpression, CurveExpression, Boolean",">",")")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public void AddHypothesis(string placeholder1, string placeholder2, Func<CurveExpression, CurveExpression, bool> h)\n")),(0,s.kt)("h4",{id:"parameters-2"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"placeholder1")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"placeholder2")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"h")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.func-3"},"Func","<","CurveExpression, CurveExpression, Boolean",">"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"addhypothesisstring-string-string-funccurveexpression-curveexpression-curveexpression-boolean"},(0,s.kt)("strong",{parentName:"h3"},"AddHypothesis(String, String, String, Func","<","CurveExpression, CurveExpression, CurveExpression, Boolean",">",")")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public void AddHypothesis(string placeholder1, string placeholder2, string placeholder3, Func<CurveExpression, CurveExpression, CurveExpression, bool> h)\n")),(0,s.kt)("h4",{id:"parameters-3"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"placeholder1")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"placeholder2")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"placeholder3")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"h")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.func-4"},"Func","<","CurveExpression, CurveExpression, CurveExpression, Boolean",">"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"addhypothesisstring-predicaterationalexpression"},(0,s.kt)("strong",{parentName:"h3"},"AddHypothesis(String, Predicate","<","RationalExpression",">",")")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public void AddHypothesis(string placeholder, Predicate<RationalExpression> h)\n")),(0,s.kt)("h4",{id:"parameters-4"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"placeholder")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"h")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.predicate-1"},"Predicate","<","RationalExpression",">"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"addhypothesisstring-string-funcrationalexpression-rationalexpression-boolean"},(0,s.kt)("strong",{parentName:"h3"},"AddHypothesis(String, String, Func","<","RationalExpression, RationalExpression, Boolean",">",")")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public void AddHypothesis(string placeholder1, string placeholder2, Func<RationalExpression, RationalExpression, bool> h)\n")),(0,s.kt)("h4",{id:"parameters-5"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"placeholder1")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"placeholder2")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"h")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.func-3"},"Func","<","RationalExpression, RationalExpression, Boolean",">"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"addhypothesisstring-string-string-funcrationalexpression-rationalexpression-rationalexpression-boolean"},(0,s.kt)("strong",{parentName:"h3"},"AddHypothesis(String, String, String, Func","<","RationalExpression, RationalExpression, RationalExpression, Boolean",">",")")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public void AddHypothesis(string placeholder1, string placeholder2, string placeholder3, Func<RationalExpression, RationalExpression, RationalExpression, bool> h)\n")),(0,s.kt)("h4",{id:"parameters-6"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"placeholder1")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"placeholder2")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"placeholder3")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"h")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.func-4"},"Func","<","RationalExpression, RationalExpression, RationalExpression, Boolean",">"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"applyigenericexpressioncurve-checktype"},(0,s.kt)("strong",{parentName:"h3"},"Apply(IGenericExpression","<","Curve",">",", CheckType)")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public IGenericExpression<Curve> Apply(IGenericExpression<Curve> expression, CheckType checkType)\n")),(0,s.kt)("h4",{id:"parameters-7"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","Curve",">"),(0,s.kt)("br",null)),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"checkType")," ",(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType"},"CheckType"),(0,s.kt)("br",null)),(0,s.kt)("h4",{id:"returns"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","Curve",">"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"readequivalencesstring"},(0,s.kt)("strong",{parentName:"h3"},"ReadEquivalences(String)")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public static List<Equivalence> ReadEquivalences(string fileName)\n")),(0,s.kt)("h4",{id:"parameters-8"},"Parameters"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"fileName")," ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)),(0,s.kt)("h4",{id:"returns-1"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1"},"List","<","Equivalence",">"),(0,s.kt)("br",null)),(0,s.kt)("h3",{id:"tostring"},(0,s.kt)("strong",{parentName:"h3"},"ToString()")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},"public string ToString()\n")),(0,s.kt)("h4",{id:"returns-2"},"Returns"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,s.kt)("br",null)))}u.isMDXComponent=!0}}]);