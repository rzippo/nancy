"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[2210],{3137:(s,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>x,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression","title":"RationalExpression","description":"The class aims at providing the main methods to build, manipulate and print expressions which evaluate to rational","source":"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression.md","sourceDirName":"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions","slug":"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true,"title":"RationalExpression"},"sidebar":"docsSidebar","previous":{"title":"RationalBinaryExpression<TLeftOperand, TRightOperand>","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalBinaryExpression"},"next":{"title":"RationalExpressionExtensions","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpressionExtensions"}}');var r=n(4848),t=n(8453);const a={hide_title:!0,title:"RationalExpression"},o="RationalExpression",l={},c=[{value:"Properties",id:"properties",level:2},{value:"<strong>Name</strong>",id:"name",level:3},{value:"Property Value",id:"property-value",level:4},{value:"<strong>Settings</strong>",id:"settings",level:3},{value:"Property Value",id:"property-value-1",level:4},{value:"<strong>Value</strong>",id:"value",level:3},{value:"Property Value",id:"property-value-2",level:4},{value:"Methods",id:"methods",level:2},{value:"<strong>Compute()</strong>",id:"compute",level:3},{value:"Returns",id:"returns",level:4},{value:"<strong>Accept(IExpressionVisitor)</strong>",id:"acceptiexpressionvisitor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"<strong>Accept(IRationalExpressionVisitor)</strong>",id:"acceptirationalexpressionvisitor",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"<strong>ToLatexString(Int32, Boolean)</strong>",id:"tolatexstringint32-boolean",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<strong>ToUnicodeString(Int32, Boolean)</strong>",id:"tounicodestringint32-boolean",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-2",level:4},{value:"<strong>ToString()</strong>",id:"tostring",level:3},{value:"Returns",id:"returns-3",level:4},{value:"<strong>Estimate()</strong>",id:"estimate",level:3},{value:"Returns",id:"returns-4",level:4},{value:"<strong>ReplaceByValue&lt;T1&gt;(IGenericExpression&lt;T1&gt;, IGenericExpression&lt;T1&gt;, Boolean)</strong>",id:"replacebyvaluet1igenericexpressiont1-igenericexpressiont1-boolean",level:3},{value:"Type Parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-5",level:4},{value:"<strong>ReplaceByPosition&lt;T1&gt;(ExpressionPosition, IGenericExpression&lt;T1&gt;)</strong>",id:"replacebypositiont1expressionposition-igenericexpressiont1",level:3},{value:"Type Parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-6",level:4},{value:"<strong>ReplaceByPosition&lt;T1&gt;(IEnumerable&lt;String&gt;, IGenericExpression&lt;T1&gt;)</strong>",id:"replacebypositiont1ienumerablestring-igenericexpressiont1",level:3},{value:"Type Parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-7",level:4},{value:"<strong>RootPosition()</strong>",id:"rootposition",level:3},{value:"Returns",id:"returns-8",level:4},{value:"<strong>WithName(String)</strong>",id:"withnamestring",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-9",level:4},{value:"<strong>Negate(String, ExpressionSettings)</strong>",id:"negatestring-expressionsettings",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-10",level:4},{value:"<strong>Invert(String, ExpressionSettings)</strong>",id:"invertstring-expressionsettings",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-11",level:4},{value:"<strong>Addition(RationalExpression, String, ExpressionSettings)</strong>",id:"additionrationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-12",level:4},{value:"<strong>Addition(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"additionrationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-13",level:4},{value:"<strong>Addition(Rational, String, String, ExpressionSettings)</strong>",id:"additionrational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-14",level:4},{value:"<strong>Addition(RationalExpression, Rational, String, ExpressionSettings)</strong>",id:"additionrationalexpression-rational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-15",level:4},{value:"<strong>Subtraction(RationalExpression, String, ExpressionSettings)</strong>",id:"subtractionrationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-16",level:4},{value:"<strong>Subtraction(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"subtractionrationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-17",level:4},{value:"<strong>Subtraction(Rational, String, String, ExpressionSettings)</strong>",id:"subtractionrational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-18",level:4},{value:"<strong>Subtraction(RationalExpression, Rational, String, ExpressionSettings)</strong>",id:"subtractionrationalexpression-rational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-19",level:4},{value:"<strong>Product(RationalExpression, String, ExpressionSettings)</strong>",id:"productrationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-20",level:4},{value:"<strong>Product(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"productrationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-21",level:4},{value:"<strong>Product(Rational, String, String, ExpressionSettings)</strong>",id:"productrational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-22",level:4},{value:"<strong>Product(RationalExpression, Rational, String, ExpressionSettings)</strong>",id:"productrationalexpression-rational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-21",level:4},{value:"Returns",id:"returns-23",level:4},{value:"<strong>Division(RationalExpression, String, ExpressionSettings)</strong>",id:"divisionrationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-22",level:4},{value:"Returns",id:"returns-24",level:4},{value:"<strong>Division(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"divisionrationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-23",level:4},{value:"Returns",id:"returns-25",level:4},{value:"<strong>Division(Rational, String, String, ExpressionSettings)</strong>",id:"divisionrational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-24",level:4},{value:"Returns",id:"returns-26",level:4},{value:"<strong>Division(RationalExpression, Rational, String, ExpressionSettings)</strong>",id:"divisionrationalexpression-rational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-25",level:4},{value:"Returns",id:"returns-27",level:4},{value:"<strong>LeastCommonMultiple(RationalExpression, String, ExpressionSettings)</strong>",id:"leastcommonmultiplerationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-26",level:4},{value:"Returns",id:"returns-28",level:4},{value:"<strong>LeastCommonMultiple(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"leastcommonmultiplerationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-27",level:4},{value:"Returns",id:"returns-29",level:4},{value:"<strong>LeastCommonMultiple(Rational, String, String, ExpressionSettings)</strong>",id:"leastcommonmultiplerational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-28",level:4},{value:"Returns",id:"returns-30",level:4},{value:"<strong>LeastCommonMultiple(RationalExpression, Rational, String, ExpressionSettings)</strong>",id:"leastcommonmultiplerationalexpression-rational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-29",level:4},{value:"Returns",id:"returns-31",level:4},{value:"<strong>GreatestCommonDivisor(RationalExpression, String, ExpressionSettings)</strong>",id:"greatestcommondivisorrationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-30",level:4},{value:"Returns",id:"returns-32",level:4},{value:"<strong>GreatestCommonDivisor(RationalExpression, RationalExpression, String, ExpressionSettings)</strong>",id:"greatestcommondivisorrationalexpression-rationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-31",level:4},{value:"Returns",id:"returns-33",level:4},{value:"<strong>GreatestCommonDivisor(Rational, String, String, ExpressionSettings)</strong>",id:"greatestcommondivisorrational-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-32",level:4},{value:"Returns",id:"returns-34",level:4},{value:"<strong>GreatestCommonDivisor(RationalExpression, Rational, String, ExpressionSettings)</strong>",id:"greatestcommondivisorrationalexpression-rational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-33",level:4},{value:"Returns",id:"returns-35",level:4},{value:"<strong>ApplyEquivalence(Equivalence, CheckType)</strong>",id:"applyequivalenceequivalence-checktype",level:3},{value:"Parameters",id:"parameters-34",level:4},{value:"Returns",id:"returns-36",level:4},{value:"<strong>ApplyEquivalenceByPosition(IEnumerable&lt;String&gt;, Equivalence, CheckType)</strong>",id:"applyequivalencebypositionienumerablestring-equivalence-checktype",level:3},{value:"Parameters",id:"parameters-35",level:4},{value:"Returns",id:"returns-37",level:4},{value:"<strong>ApplyEquivalenceByPosition(ExpressionPosition, Equivalence, CheckType)</strong>",id:"applyequivalencebypositionexpressionposition-equivalence-checktype",level:3},{value:"Parameters",id:"parameters-36",level:4},{value:"Returns",id:"returns-38",level:4},{value:"<strong>GetHashCode()</strong>",id:"gethashcode",level:3},{value:"Returns",id:"returns-39",level:4},{value:"<strong>Equals(Object)</strong>",id:"equalsobject",level:3},{value:"Parameters",id:"parameters-37",level:4},{value:"Returns",id:"returns-40",level:4},{value:"<strong>Equals(RationalExpression)</strong>",id:"equalsrationalexpression",level:3},{value:"Parameters",id:"parameters-38",level:4},{value:"Returns",id:"returns-41",level:4},{value:"<strong>&lt;Clone&gt;$()</strong>",id:"clone",level:3},{value:"Returns",id:"returns-42",level:4}];function p(s){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...s.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"rationalexpression",children:"RationalExpression"})}),"\n",(0,r.jsx)(e.p,{children:"The class aims at providing the main methods to build, manipulate and print expressions which evaluate to rational\r\nnumbers and are based on NetCal curves."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public abstract class RationalExpression : Unipi.Nancy.Expressions.Internals.IGenericExpression<RationalExpression>\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Inheritance ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.object",children:"Object"})," \u2192 ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{}),"\r\nImplements ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<Rational>"}),", ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/IExpression",children:"IExpression"}),", ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/IVisitableRational",children:"IVisitableRational"}),", ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.iequatable-1",children:"IEquatable<RationalExpression>"})]}),"\n",(0,r.jsx)(e.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(e.h3,{id:"name",children:(0,r.jsx)(e.strong,{children:"Name"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public string Name { get; set; }\n"})}),"\n",(0,r.jsx)(e.h4,{id:"property-value",children:"Property Value"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"settings",children:(0,r.jsx)(e.strong,{children:"Settings"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public ExpressionSettings Settings { get; set; }\n"})}),"\n",(0,r.jsx)(e.h4,{id:"property-value-1",children:"Property Value"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"value",children:(0,r.jsx)(e.strong,{children:"Value"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public Rational Value { get; }\n"})}),"\n",(0,r.jsx)(e.h4,{id:"property-value-2",children:"Property Value"}),"\n",(0,r.jsxs)(e.p,{children:["Rational",(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(e.h3,{id:"compute",children:(0,r.jsx)(e.strong,{children:"Compute()"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public Rational Compute()\n"})}),"\n",(0,r.jsx)(e.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:["Rational",(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"acceptiexpressionvisitor",children:(0,r.jsx)(e.strong,{children:"Accept(IExpressionVisitor)"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public void Accept(IExpressionVisitor visitor)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"visitor"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/IExpressionVisitor",children:"IExpressionVisitor"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"acceptirationalexpressionvisitor",children:(0,r.jsx)(e.strong,{children:"Accept(IRationalExpressionVisitor)"})}),"\n",(0,r.jsx)(e.p,{children:'Method used for implementing the Visitor design pattern: the visited object must "accept" the visitor object.'}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public abstract void Accept(IRationalExpressionVisitor visitor)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"visitor"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/IRationalExpressionVisitor",children:"IRationalExpressionVisitor"}),(0,r.jsx)("br",{}),"\r\nThe Visitor object"]}),"\n",(0,r.jsx)(e.h3,{id:"tolatexstringint32-boolean",children:(0,r.jsx)(e.strong,{children:"ToLatexString(Int32, Boolean)"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public string ToLatexString(int depth, bool showRationalsAsName)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"depth"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32",children:"Int32"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"showRationalsAsName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"tounicodestringint32-boolean",children:(0,r.jsx)(e.strong,{children:"ToUnicodeString(Int32, Boolean)"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public string ToUnicodeString(int depth, bool showRationalsAsName)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"depth"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32",children:"Int32"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"showRationalsAsName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"tostring",children:(0,r.jsx)(e.strong,{children:"ToString()"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public string ToString()\n"})}),"\n",(0,r.jsx)(e.h4,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"estimate",children:(0,r.jsx)(e.strong,{children:"Estimate()"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public double Estimate()\n"})}),"\n",(0,r.jsx)(e.h4,{id:"returns-4",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.double",children:"Double"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"replacebyvaluet1igenericexpressiont1-igenericexpressiont1-boolean",children:(0,r.jsx)(e.strong,{children:"ReplaceByValue<T1>(IGenericExpression<T1>, IGenericExpression<T1>, Boolean)"})}),"\n",(0,r.jsx)(e.p,{children:"Replaces every occurence of a sub-expression in the expression to which the method is applied."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression ReplaceByValue<T1>(IGenericExpression<T1> expressionPattern, IGenericExpression<T1> newExpressionToReplace, bool ignoreNotMatchedExpressions)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"RationalExpression.T1"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionPattern"})," IGenericExpression<T1>",(0,r.jsx)("br",{}),"\r\nThe sub-expression to look for in the main expression for being replaced."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"newExpressionToReplace"})," IGenericExpression<T1>",(0,r.jsx)("br",{}),"\r\nThe new sub-expression."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"ignoreNotMatchedExpressions"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-5",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{}),"\r\nNew expression object (of type ) with replaced sub-expressions."]}),"\n",(0,r.jsx)(e.h3,{id:"replacebypositiont1expressionposition-igenericexpressiont1",children:(0,r.jsx)(e.strong,{children:"ReplaceByPosition<T1>(ExpressionPosition, IGenericExpression<T1>)"})}),"\n",(0,r.jsx)(e.p,{children:"Replaces the sub-expression at a certain position in the expression to which the method is applied."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression ReplaceByPosition<T1>(ExpressionPosition expressionPosition, IGenericExpression<T1> newExpressionToReplace)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"type-parameters-1",children:"Type Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"RationalExpression.T1"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionPosition"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition",children:"ExpressionPosition"}),(0,r.jsx)("br",{}),"\r\nPosition of the expression to be replaced."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"newExpressionToReplace"})," IGenericExpression<T1>",(0,r.jsx)("br",{}),"\r\nThe new sub-expression."]}),"\n",(0,r.jsx)(e.h4,{id:"returns-6",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{}),"\r\nNew expression object (of type ) with replaced sub-expression."]}),"\n",(0,r.jsx)(e.h3,{id:"replacebypositiont1ienumerablestring-igenericexpressiont1",children:(0,r.jsx)(e.strong,{children:"ReplaceByPosition<T1>(IEnumerable<String>, IGenericExpression<T1>)"})}),"\n",(0,r.jsx)(e.p,{children:"Replaces the sub-expression at a certain position in the expression to which the method is applied."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression ReplaceByPosition<T1>(IEnumerable<string> positionPath, IGenericExpression<T1> newExpressionToReplace)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"type-parameters-2",children:"Type Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"RationalExpression.T1"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"positionPath"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1",children:"IEnumerable<String>"}),(0,r.jsx)("br",{}),'\r\nPosition of the expression to be replaced. The position is expressed as a path from\r\nthe root of the expression by using a list of strings "Operand" for unary operators, "LeftOperand"/"RightOperand"\r\nfor binary operators, "Operand(index)" for n-ary operators.']}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"newExpressionToReplace"})," IGenericExpression<T1>",(0,r.jsx)("br",{}),"\r\nThe new sub-expression."]}),"\n",(0,r.jsx)(e.h4,{id:"returns-7",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{}),"\r\nNew expression object (of type ) with the replaced sub-expression."]}),"\n",(0,r.jsx)(e.h3,{id:"rootposition",children:(0,r.jsx)(e.strong,{children:"RootPosition()"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public ExpressionPosition RootPosition()\n"})}),"\n",(0,r.jsx)(e.h4,{id:"returns-8",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition",children:"ExpressionPosition"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"withnamestring",children:(0,r.jsx)(e.strong,{children:"WithName(String)"})}),"\n",(0,r.jsx)(e.p,{children:"Changes the name of the expression."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression WithName(string expressionName)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{}),"\r\nThe new name of the expression"]}),"\n",(0,r.jsx)(e.h4,{id:"returns-9",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{}),"\r\nThe expression (new object of type ) with the new name"]}),"\n",(0,r.jsx)(e.h3,{id:"negatestring-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Negate(String, ExpressionSettings)"})}),"\n",(0,r.jsx)(e.p,{children:"Adds the negation operator to the expression."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression Negate(string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-10",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"invertstring-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Invert(String, ExpressionSettings)"})}),"\n",(0,r.jsx)(e.p,{children:"Adds the inversion operator to the expression."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression Invert(string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-11",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"additionrationalexpression-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Addition(RationalExpression, String, ExpressionSettings)"})}),"\n",(0,r.jsx)(e.p,{children:"Creates a new expression composed of the addition between the current expression and the one passed as\r\nargument."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression Addition(RationalExpression expression, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expression"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-12",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"additionrationalexpression-rationalexpression-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Addition(RationalExpression, RationalExpression, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the addition between the expression !",":left"," and the expression\r\n!",":right"," passed as arguments."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public static RationalExpression Addition(RationalExpression left, RationalExpression right, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"left"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"right"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-13",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"additionrational-string-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Addition(Rational, String, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the addition between the current expression and the rational number\r\n(internally converted to ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression",children:"RationalNumberExpression"}),") passed as argument."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression Addition(Rational rational, string name, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"rational"})," Rational",(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"name"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-14",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"additionrationalexpression-rational-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Addition(RationalExpression, Rational, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the addition between the expression !",":left"," and the rational\r\nnumber !",":right"," (internally converted to ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression",children:"RationalNumberExpression"}),") passed as arguments."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public static RationalExpression Addition(RationalExpression left, Rational right, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"left"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"right"})," Rational",(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-15",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"subtractionrationalexpression-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Subtraction(RationalExpression, String, ExpressionSettings)"})}),"\n",(0,r.jsx)(e.p,{children:"Creates a new expression composed of the subtraction between the current expression and the one passed as\r\nargument."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression Subtraction(RationalExpression expression, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expression"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-16",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"subtractionrationalexpression-rationalexpression-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Subtraction(RationalExpression, RationalExpression, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the subtraction between the expression !",":left"," and the\r\nexpression !",":right"," passed as arguments."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public static RationalExpression Subtraction(RationalExpression left, RationalExpression right, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"left"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"right"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-17",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"subtractionrational-string-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Subtraction(Rational, String, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the subtraction between the current expression and the rational number\r\n(internally converted to ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression",children:"RationalNumberExpression"}),") passed as argument."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression Subtraction(Rational rational, string name, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-16",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"rational"})," Rational",(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"name"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-18",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"subtractionrationalexpression-rational-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Subtraction(RationalExpression, Rational, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the subtraction between the expression !",":left"," and the rational\r\nnumber !",":right"," (internally converted to ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression",children:"RationalNumberExpression"}),") passed as arguments."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public static RationalExpression Subtraction(RationalExpression left, Rational right, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-17",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"left"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"right"})," Rational",(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-19",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"productrationalexpression-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Product(RationalExpression, String, ExpressionSettings)"})}),"\n",(0,r.jsx)(e.p,{children:"Creates a new expression composed of the product between the current expression and the one passed as\r\nargument."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression Product(RationalExpression expression, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-18",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expression"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-20",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"productrationalexpression-rationalexpression-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Product(RationalExpression, RationalExpression, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the product between the expression !",":left"," and the expression\r\n!",":right"," passed as arguments."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public static RationalExpression Product(RationalExpression left, RationalExpression right, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-19",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"left"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"right"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-21",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"productrational-string-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Product(Rational, String, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the product between the current expression and the rational number\r\n(internally converted to ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression",children:"RationalNumberExpression"}),") passed as argument."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression Product(Rational rational, string name, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-20",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"rational"})," Rational",(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"name"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-22",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"productrationalexpression-rational-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Product(RationalExpression, Rational, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the product between the expression !",":left"," and the rational\r\nnumber !",":right"," (internally converted to ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression",children:"RationalNumberExpression"}),") passed as arguments."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public static RationalExpression Product(RationalExpression left, Rational right, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-21",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"left"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"right"})," Rational",(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-23",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"divisionrationalexpression-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Division(RationalExpression, String, ExpressionSettings)"})}),"\n",(0,r.jsx)(e.p,{children:"Creates a new expression composed of the division between the current expression and the one passed as\r\nargument."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression Division(RationalExpression expression, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-22",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expression"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-24",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"divisionrationalexpression-rationalexpression-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Division(RationalExpression, RationalExpression, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the division between the expression !",":left"," and the expression\r\n!",":right"," passed as arguments."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public static RationalExpression Division(RationalExpression left, RationalExpression right, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-23",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"left"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"right"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-25",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"divisionrational-string-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Division(Rational, String, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the division between the current expression and the rational number\r\n(internally converted to ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression",children:"RationalNumberExpression"}),") passed as argument."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression Division(Rational rational, string name, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-24",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"rational"})," Rational",(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"name"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-26",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"divisionrationalexpression-rational-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"Division(RationalExpression, Rational, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the division between the expression !",":left"," and the rational\r\nnumber !",":right"," (internally converted to ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression",children:"RationalNumberExpression"}),") passed as arguments."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public static RationalExpression Division(RationalExpression left, Rational right, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-25",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"left"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"right"})," Rational",(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-27",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"leastcommonmultiplerationalexpression-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"LeastCommonMultiple(RationalExpression, String, ExpressionSettings)"})}),"\n",(0,r.jsx)(e.p,{children:"Creates a new expression composed of the l.c.m. between the current expression and the one passed as\r\nargument."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression LeastCommonMultiple(RationalExpression expression, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-26",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expression"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-28",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"leastcommonmultiplerationalexpression-rationalexpression-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"LeastCommonMultiple(RationalExpression, RationalExpression, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the l.c.m. between the expression !",":left"," and the expression\r\n!",":right"," passed as arguments."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public static RationalExpression LeastCommonMultiple(RationalExpression left, RationalExpression right, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-27",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"left"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"right"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-29",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"leastcommonmultiplerational-string-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"LeastCommonMultiple(Rational, String, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the l.c.m. between the current expression and the rational number\r\n(internally converted to ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression",children:"RationalNumberExpression"}),") passed as argument."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression LeastCommonMultiple(Rational rational, string name, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-28",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"rational"})," Rational",(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"name"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-30",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"leastcommonmultiplerationalexpression-rational-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"LeastCommonMultiple(RationalExpression, Rational, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the l.c.m. between the expression !",":left"," and the rational\r\nnumber !",":right"," (internally converted to ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression",children:"RationalNumberExpression"}),") passed as arguments."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public static RationalExpression LeastCommonMultiple(RationalExpression left, Rational right, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-29",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"left"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"right"})," Rational",(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-31",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"greatestcommondivisorrationalexpression-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"GreatestCommonDivisor(RationalExpression, String, ExpressionSettings)"})}),"\n",(0,r.jsx)(e.p,{children:"Creates a new expression composed of the g.c.d. between the current expression and the one passed as\r\nargument."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression GreatestCommonDivisor(RationalExpression expression, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-30",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expression"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-32",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"greatestcommondivisorrationalexpression-rationalexpression-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"GreatestCommonDivisor(RationalExpression, RationalExpression, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the g.c.d. between the expression !",":left"," and the expression\r\n!",":right"," passed as arguments."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public static RationalExpression GreatestCommonDivisor(RationalExpression left, RationalExpression right, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-31",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"left"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"right"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-33",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"greatestcommondivisorrational-string-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"GreatestCommonDivisor(Rational, String, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the g.c.d. between the current expression and the rational number\r\n(internally converted to ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression",children:"RationalNumberExpression"}),") passed as argument."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression GreatestCommonDivisor(Rational rational, string name, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-32",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"rational"})," Rational",(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"name"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-34",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"greatestcommondivisorrationalexpression-rational-string-expressionsettings",children:(0,r.jsx)(e.strong,{children:"GreatestCommonDivisor(RationalExpression, Rational, String, ExpressionSettings)"})}),"\n",(0,r.jsxs)(e.p,{children:["Creates a new expression composed of the g.c.d. between the expression !",":left"," and the rational\r\nnumber !",":right"," (internally converted to ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/RationalNumberExpression",children:"RationalNumberExpression"}),") passed as arguments."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public static RationalExpression GreatestCommonDivisor(RationalExpression left, Rational right, string expressionName, ExpressionSettings settings)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-33",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"left"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"right"})," Rational",(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionName"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"settings"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-35",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"applyequivalenceequivalence-checktype",children:(0,r.jsx)(e.strong,{children:"ApplyEquivalence(Equivalence, CheckType)"})}),"\n",(0,r.jsx)(e.p,{children:"Applies an equivalence to the current expression."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression ApplyEquivalence(Equivalence equivalence, CheckType checkType)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-34",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"equivalence"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence",children:"Equivalence"}),(0,r.jsx)("br",{}),"\r\nThe equivalence to be applied to (a sub-part of) the expression."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"checkType"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType",children:"CheckType"}),(0,r.jsx)("br",{}),"\r\nSince the equivalence is described by a left-side expression and a right-side\r\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\r\nand substitution with the right side, or vice versa, or both)."]}),"\n",(0,r.jsx)(e.h4,{id:"returns-36",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{}),"\r\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."]}),"\n",(0,r.jsx)(e.h3,{id:"applyequivalencebypositionienumerablestring-equivalence-checktype",children:(0,r.jsx)(e.strong,{children:"ApplyEquivalenceByPosition(IEnumerable<String>, Equivalence, CheckType)"})}),"\n",(0,r.jsx)(e.p,{children:"Applies an equivalence to the current expression, allowing the user to specify the position in the expression in\r\nwhich the equivalence should be applied."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression ApplyEquivalenceByPosition(IEnumerable<string> positionPath, Equivalence equivalence, CheckType checkType)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-35",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"positionPath"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1",children:"IEnumerable<String>"}),(0,r.jsx)("br",{}),'\r\nPosition of the sub-expression to be replaced with an equivalent one.\r\nThe position is expressed as a path from the root of the expression by using a list of strings "Operand" for\r\nunary operators, "LeftOperand"/"RightOperand" for binary operators, "Operand(index)" for n-ary operators']}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"equivalence"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence",children:"Equivalence"}),(0,r.jsx)("br",{}),"\r\nThe equivalence to be applied to (a sub-part of) the expression."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"checkType"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType",children:"CheckType"}),(0,r.jsx)("br",{}),"\r\nSince the equivalence is described by a left-side expression and a right-side\r\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\r\nand substitution with the right side, or vice versa, or both)."]}),"\n",(0,r.jsx)(e.h4,{id:"returns-37",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{}),"\r\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."]}),"\n",(0,r.jsx)(e.h3,{id:"applyequivalencebypositionexpressionposition-equivalence-checktype",children:(0,r.jsx)(e.strong,{children:"ApplyEquivalenceByPosition(ExpressionPosition, Equivalence, CheckType)"})}),"\n",(0,r.jsx)(e.p,{children:"Applies an equivalence to the current expression, allowing the user to specify the position in the expression in\r\nwhich the equivalence should be applied."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public RationalExpression ApplyEquivalenceByPosition(ExpressionPosition expressionPosition, Equivalence equivalence, CheckType checkType)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-36",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"expressionPosition"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition",children:"ExpressionPosition"}),(0,r.jsx)("br",{}),"\r\nPosition of the expression to be replaced"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"equivalence"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence",children:"Equivalence"}),(0,r.jsx)("br",{}),"\r\nThe equivalence to be applied to (a sub-part of) the expression."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"checkType"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType",children:"CheckType"}),(0,r.jsx)("br",{}),"\r\nSince the equivalence is described by a left-side expression and a right-side\r\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\r\nand substitution with the right side, or vice versa, or both)."]}),"\n",(0,r.jsx)(e.h4,{id:"returns-38",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{}),"\r\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."]}),"\n",(0,r.jsx)(e.h3,{id:"gethashcode",children:(0,r.jsx)(e.strong,{children:"GetHashCode()"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public int GetHashCode()\n"})}),"\n",(0,r.jsx)(e.h4,{id:"returns-39",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32",children:"Int32"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"equalsobject",children:(0,r.jsx)(e.strong,{children:"Equals(Object)"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public bool Equals(object obj)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-37",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"obj"})," ",(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.object",children:"Object"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-40",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"equalsrationalexpression",children:(0,r.jsx)(e.strong,{children:"Equals(RationalExpression)"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public bool Equals(RationalExpression other)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"parameters-38",children:"Parameters"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"other"})," ",(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h4,{id:"returns-41",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(e.h3,{id:"clone",children:(0,r.jsx)(e.strong,{children:"<Clone>$()"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-csharp",children:"public abstract RationalExpression <Clone>$()\n"})}),"\n",(0,r.jsx)(e.h4,{id:"returns-42",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),(0,r.jsx)("br",{})]})]})}function x(s={}){const{wrapper:e}={...(0,t.R)(),...s.components};return e?(0,r.jsx)(e,{...s,children:(0,r.jsx)(p,{...s})}):p(s)}},8453:(s,e,n)=>{n.d(e,{R:()=>a,x:()=>o});var i=n(6540);const r={},t=i.createContext(r);function a(s){const e=i.useContext(t);return i.useMemo((function(){return"function"==typeof s?s(e):{...e,...s}}),[e,s])}function o(s){let e;return e=s.disableParentContext?"function"==typeof s.components?s.components(r):s.components||r:a(s.components),i.createElement(t.Provider,{value:e},s.children)}}}]);