"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[6371],{5586:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericUnaryExpression`2","title":"IGenericUnaryExpression&lt;T, TResult&gt;","description":"Interface with members and functions which allow to define a unary expression, i.e. an expression whose root node","source":"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericUnaryExpression`2.md","sourceDirName":"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals","slug":"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericUnaryExpression`2","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericUnaryExpression`2","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true,"keywords":["internal"]},"sidebar":"docsSidebar","previous":{"title":"IGenericExpression&lt;T&gt;","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression`1"},"next":{"title":"InvertRationalExpression","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/InvertRationalExpression"}}');var i=s(4848),t=s(8453);const o={hide_title:!0,keywords:["internal"]},a="IGenericUnaryExpression<T, TResult>",c={},p=[{value:"Type Parameters",id:"type-parameters",level:4},{value:"Properties",id:"properties",level:2},{value:"<strong>Expression</strong>",id:"expression",level:3},{value:"Property Value",id:"property-value",level:4}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"igenericunaryexpressiont-tresult",children:"IGenericUnaryExpression<T, TResult>"})}),"\n",(0,i.jsx)(n.p,{children:"Interface with members and functions which allow to define a unary expression, i.e. an expression whose root node\r\ncorresponds to an operation that involves only one operand."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public interface IGenericUnaryExpression<T, TResult> : IGenericExpression`1\n"})}),"\n",(0,i.jsx)(n.h4,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"IGenericUnaryExpression&lt;T, TResult&gt;.T"}),(0,i.jsx)("br",{}),"\r\nOperand type"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"IGenericUnaryExpression&lt;T, TResult&gt;.TResult"}),(0,i.jsx)("br",{}),"\r\nResult type"]}),"\n",(0,i.jsx)(n.p,{children:"Implements IGenericExpression<TResult>"}),"\n",(0,i.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(n.h3,{id:"expression",children:(0,i.jsx)(n.strong,{children:"Expression"})}),"\n",(0,i.jsx)(n.p,{children:"Expression on which the unary operation is applied"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public abstract IGenericExpression<T> Expression { get; }\n"})}),"\n",(0,i.jsx)(n.h4,{id:"property-value",children:"Property Value"}),"\n",(0,i.jsxs)(n.p,{children:["IGenericExpression<T>",(0,i.jsx)("br",{})]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var r=s(6540);const i={},t=r.createContext(i);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);