"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[2992],{4932:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression","title":"IGenericExpression<T>","description":"Interface which defines the rules each Nancy expression must follow.","source":"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression.md","sourceDirName":"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals","slug":"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true,"title":"IGenericExpression<T>"},"sidebar":"docsSidebar","previous":{"title":"IGenericBinaryExpression<T1, T2, TResult>","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericBinaryExpression"},"next":{"title":"IGenericUnaryExpression<T, TResult>","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericUnaryExpression"}}');var r=s(4848),t=s(8453);const o={hide_title:!0,title:"IGenericExpression<T>"},a="IGenericExpression<T>",c={},l=[{value:"Type Parameters",id:"type-parameters",level:4},{value:"Properties",id:"properties",level:2},{value:"<strong>Value</strong>",id:"value",level:3},{value:"Property Value",id:"property-value",level:4},{value:"<strong>Name</strong>",id:"name",level:3},{value:"Property Value",id:"property-value-1",level:4},{value:"<strong>Settings</strong>",id:"settings",level:3},{value:"Property Value",id:"property-value-2",level:4},{value:"Methods",id:"methods",level:2},{value:"<strong>Compute()</strong>",id:"compute",level:3},{value:"Returns",id:"returns",level:4},{value:"<strong>ToLatexString(Int32, Boolean)</strong>",id:"tolatexstringint32-boolean",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<strong>ToString()</strong>",id:"tostring",level:3},{value:"Returns",id:"returns-2",level:4},{value:"<strong>Estimate()</strong>",id:"estimate",level:3},{value:"Returns",id:"returns-3",level:4},{value:"<strong>ReplaceByValue&lt;T1&gt;(IGenericExpression&lt;T1&gt;, IGenericExpression&lt;T1&gt;, Boolean)</strong>",id:"replacebyvaluet1igenericexpressiont1-igenericexpressiont1-boolean",level:3},{value:"Type Parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-4",level:4},{value:"<strong>ReplaceByPosition&lt;T1&gt;(ExpressionPosition, IGenericExpression&lt;T1&gt;)</strong>",id:"replacebypositiont1expressionposition-igenericexpressiont1",level:3},{value:"Type Parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-5",level:4},{value:"<strong>ReplaceByPosition&lt;T1&gt;(IEnumerable&lt;String&gt;, IGenericExpression&lt;T1&gt;)</strong>",id:"replacebypositiont1ienumerablestring-igenericexpressiont1",level:3},{value:"Type Parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-6",level:4},{value:"<strong>Accept(IExpressionVisitor)</strong>",id:"acceptiexpressionvisitor",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"<strong>ToUnicodeString(Int32, Boolean)</strong>",id:"tounicodestringint32-boolean",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-7",level:4},{value:"<strong>RootPosition()</strong>",id:"rootposition",level:3},{value:"Returns",id:"returns-8",level:4},{value:"<strong>WithName(String)</strong>",id:"withnamestring",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-9",level:4},{value:"<strong>ApplyEquivalence(Equivalence, CheckType)</strong>",id:"applyequivalenceequivalence-checktype",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-10",level:4},{value:"<strong>ApplyEquivalenceByPosition(IEnumerable&lt;String&gt;, Equivalence, CheckType)</strong>",id:"applyequivalencebypositionienumerablestring-equivalence-checktype",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-11",level:4},{value:"<strong>ApplyEquivalenceByPosition(ExpressionPosition, Equivalence, CheckType)</strong>",id:"applyequivalencebypositionexpressionposition-equivalence-checktype",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-12",level:4}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"igenericexpressiont",children:"IGenericExpression<T>"})}),"\n",(0,r.jsx)(n.p,{children:"Interface which defines the rules each Nancy expression must follow."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public interface IGenericExpression<T>\n"})}),"\n",(0,r.jsx)(n.h4,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"IGenericExpression&lt;T&gt;.T"}),(0,r.jsx)("br",{}),"\r\nT is the class (Curve or Rational) which\nrepresents the type the expression evaluates to"]}),"\n",(0,r.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(n.h3,{id:"value",children:(0,r.jsx)(n.strong,{children:"Value"})}),"\n",(0,r.jsx)(n.p,{children:"The value of the expression"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public abstract T Value { get; }\n"})}),"\n",(0,r.jsx)(n.h4,{id:"property-value",children:"Property Value"}),"\n",(0,r.jsxs)(n.p,{children:["IGenericExpression<T>.T",(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(n.h3,{id:"name",children:(0,r.jsx)(n.strong,{children:"Name"})}),"\n",(0,r.jsx)(n.p,{children:"The name of the expression"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public abstract string Name { get; }\n"})}),"\n",(0,r.jsx)(n.h4,{id:"property-value-1",children:"Property Value"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(n.h3,{id:"settings",children:(0,r.jsx)(n.strong,{children:"Settings"})}),"\n",(0,r.jsx)(n.p,{children:"Settings for the expression (contains also the settings for the evaluation of the expression)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"public abstract ExpressionSettings Settings { get; }\n"})}),"\n",(0,r.jsx)(n.h4,{id:"property-value-2",children:"Property Value"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings",children:"ExpressionSettings"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(n.h3,{id:"compute",children:(0,r.jsx)(n.strong,{children:"Compute()"})}),"\n",(0,r.jsx)(n.p,{children:"Computes the value the expression evaluates to"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"T Compute()\n"})}),"\n",(0,r.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:["IGenericExpression<T>.T",(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(n.h3,{id:"tolatexstringint32-boolean",children:(0,r.jsx)(n.strong,{children:"ToLatexString(Int32, Boolean)"})}),"\n",(0,r.jsx)(n.p,{children:"Formats the expression in LaTeX."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"string ToLatexString(int depth, bool showRationalsAsName)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"depth"})," ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32",children:"Int32"}),(0,r.jsx)("br",{}),"\r\nLevel of the expression tree up to which to print the expression fully expanded."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"showRationalsAsName"})," ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,r.jsx)("br",{}),"\r\nIf true, shows rational numbers with their expression name\r\n(",(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression#name",children:"Name"}),") in place of ",(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression#value",children:"Value"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(n.h3,{id:"tostring",children:(0,r.jsx)(n.strong,{children:"ToString()"})}),"\n",(0,r.jsx)(n.p,{children:"Represents the expression in textual format"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"string ToString()\n"})}),"\n",(0,r.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(n.h3,{id:"estimate",children:(0,r.jsx)(n.strong,{children:"Estimate()"})}),"\n",(0,r.jsx)(n.p,{children:"Evaluates the computational complexity of the expression."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"double Estimate()\n"})}),"\n",(0,r.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.double",children:"Double"}),(0,r.jsx)("br",{}),"\r\nThe value representative of the complexity of the expression"]}),"\n",(0,r.jsx)(n.h3,{id:"replacebyvaluet1igenericexpressiont1-igenericexpressiont1-boolean",children:(0,r.jsx)(n.strong,{children:"ReplaceByValue<T1>(IGenericExpression<T1>, IGenericExpression<T1>, Boolean)"})}),"\n",(0,r.jsx)(n.p,{children:"Replaces every occurence of a sub-expression in the expression to which the method is applied."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IGenericExpression<T> ReplaceByValue<T1>(IGenericExpression<T1> expressionPattern, IGenericExpression<T1> newExpressionToReplace, bool ignoreNotMatchedExpressions)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"type-parameters-1",children:"Type Parameters"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"IGenericExpression&lt;T&gt;.T1"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"expressionPattern"})," IGenericExpression<T1>",(0,r.jsx)("br",{}),"\r\nThe sub-expression to look for in the main expression for being replaced"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"newExpressionToReplace"})," IGenericExpression<T1>",(0,r.jsx)("br",{}),"\r\nThe new sub-expression"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ignoreNotMatchedExpressions"})," ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<T>"}),(0,r.jsx)("br",{}),"\r\nNew expression object with replaced sub-expressions"]}),"\n",(0,r.jsx)(n.h3,{id:"replacebypositiont1expressionposition-igenericexpressiont1",children:(0,r.jsx)(n.strong,{children:"ReplaceByPosition<T1>(ExpressionPosition, IGenericExpression<T1>)"})}),"\n",(0,r.jsx)(n.p,{children:"Replaces the sub-expression at a certain position in the expression to which the method is applied."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IGenericExpression<T> ReplaceByPosition<T1>(ExpressionPosition expressionPosition, IGenericExpression<T1> newExpression)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"type-parameters-2",children:"Type Parameters"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"IGenericExpression&lt;T&gt;.T1"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"expressionPosition"})," ",(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition",children:"ExpressionPosition"}),(0,r.jsx)("br",{}),"\r\nPosition of the expression to be replaced"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"newExpression"})," IGenericExpression<T1>",(0,r.jsx)("br",{}),"\r\nThe new sub-expression"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<T>"}),(0,r.jsx)("br",{}),"\r\nNew expression object with replaced sub-expression"]}),"\n",(0,r.jsx)(n.h3,{id:"replacebypositiont1ienumerablestring-igenericexpressiont1",children:(0,r.jsx)(n.strong,{children:"ReplaceByPosition<T1>(IEnumerable<String>, IGenericExpression<T1>)"})}),"\n",(0,r.jsx)(n.p,{children:"Replaces the sub-expression at a certain position in the expression to which the method is applied."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IGenericExpression<T> ReplaceByPosition<T1>(IEnumerable<string> positionPath, IGenericExpression<T1> newExpression)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"type-parameters-3",children:"Type Parameters"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"IGenericExpression&lt;T&gt;.T1"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"positionPath"})," ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1",children:"IEnumerable<String>"}),(0,r.jsx)("br",{}),'\r\nPosition of the expression to be replaced. The position is expressed as a path from\r\nthe root of the expression by using a list of strings "Operand" for unary operators, "LeftOperand"/"RightOperand"\r\nfor binary operators, "Operand(index)" for n-ary operators']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"newExpression"})," IGenericExpression<T1>",(0,r.jsx)("br",{}),"\r\nThe new sub-expression"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<T>"}),(0,r.jsx)("br",{}),"\r\nNew expression object with replaced sub-expression"]}),"\n",(0,r.jsx)(n.h3,{id:"acceptiexpressionvisitor",children:(0,r.jsx)(n.strong,{children:"Accept(IExpressionVisitor)"})}),"\n",(0,r.jsx)(n.p,{children:'Method used for implementing the Visitor design pattern: the visited object must "accept" the visitor object.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"void Accept(IExpressionVisitor visitor)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"visitor"})," ",(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/IExpressionVisitor",children:"IExpressionVisitor"}),(0,r.jsx)("br",{}),"\r\nThe Visitor object"]}),"\n",(0,r.jsx)(n.h3,{id:"tounicodestringint32-boolean",children:(0,r.jsx)(n.strong,{children:"ToUnicodeString(Int32, Boolean)"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the representation of the expression using characters of the Unicode character set."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"string ToUnicodeString(int depth, bool showRationalsAsName)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"depth"})," ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32",children:"Int32"}),(0,r.jsx)("br",{}),"\r\nLevel of the expression tree up to which to print the expression fully expanded."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"showRationalsAsName"})," ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,r.jsx)("br",{}),"\r\nIf true, shows rational numbers with their expression name\r\n(",(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression#name",children:"Name"}),") in place of ",(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression#value",children:"Value"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{})]}),"\n",(0,r.jsx)(n.h3,{id:"rootposition",children:(0,r.jsx)(n.strong,{children:"RootPosition()"})}),"\n",(0,r.jsx)(n.p,{children:"This method can be used as a starting point to build a symbolic path through the expression."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"ExpressionPosition RootPosition()\n"})}),"\n",(0,r.jsx)(n.h4,{id:"returns-8",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition",children:"ExpressionPosition"}),(0,r.jsx)("br",{}),"\r\nReturns the position of the root of the expression"]}),"\n",(0,r.jsx)(n.h3,{id:"withnamestring",children:(0,r.jsx)(n.strong,{children:"WithName(String)"})}),"\n",(0,r.jsx)(n.p,{children:"Changes the name of the expression."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IGenericExpression<T> WithName(string expressionName)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"expressionName"})," ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,r.jsx)("br",{}),"\r\nThe new name of the expression"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-9",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<T>"}),(0,r.jsx)("br",{}),"\r\nThe expression (new object) with the new name"]}),"\n",(0,r.jsx)(n.h3,{id:"applyequivalenceequivalence-checktype",children:(0,r.jsx)(n.strong,{children:"ApplyEquivalence(Equivalence, CheckType)"})}),"\n",(0,r.jsx)(n.p,{children:"Applies an equivalence to the current expression."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IGenericExpression<T> ApplyEquivalence(Equivalence equivalence, CheckType checkType)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"equivalence"})," ",(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence",children:"Equivalence"}),(0,r.jsx)("br",{}),"\r\nThe equivalence to be applied to (a sub-part of) the expression."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"checkType"})," ",(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType",children:"CheckType"}),(0,r.jsx)("br",{}),"\r\nSince the equivalence is described by a left-side expression and a right-side\r\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\r\nand substitution with the right side, or vice versa, or both)."]}),"\n",(0,r.jsx)(n.h4,{id:"returns-10",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<T>"}),(0,r.jsx)("br",{}),"\r\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."]}),"\n",(0,r.jsx)(n.h3,{id:"applyequivalencebypositionienumerablestring-equivalence-checktype",children:(0,r.jsx)(n.strong,{children:"ApplyEquivalenceByPosition(IEnumerable<String>, Equivalence, CheckType)"})}),"\n",(0,r.jsx)(n.p,{children:"Applies an equivalence to the current expression, allowing the user to specify the position in the expression in\r\nwhich the equivalence should be applied."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IGenericExpression<T> ApplyEquivalenceByPosition(IEnumerable<string> positionPath, Equivalence equivalence, CheckType checkType)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"positionPath"})," ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1",children:"IEnumerable<String>"}),(0,r.jsx)("br",{}),'\r\nPosition of the sub-expression to be replaced with an equivalent one.\r\nThe position is expressed as a path from the root of the expression by using a list of strings "Operand" for\r\nunary operators, "LeftOperand"/"RightOperand" for binary operators, "Operand(index)" for n-ary operators']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"equivalence"})," ",(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence",children:"Equivalence"}),(0,r.jsx)("br",{}),"\r\nThe equivalence to be applied to (a sub-part of) the expression."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"checkType"})," ",(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType",children:"CheckType"}),(0,r.jsx)("br",{}),"\r\nSince the equivalence is described by a left-side expression and a right-side\r\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\r\nand substitution with the right side, or vice versa, or both)."]}),"\n",(0,r.jsx)(n.h4,{id:"returns-11",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<T>"}),(0,r.jsx)("br",{}),"\r\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."]}),"\n",(0,r.jsx)(n.h3,{id:"applyequivalencebypositionexpressionposition-equivalence-checktype",children:(0,r.jsx)(n.strong,{children:"ApplyEquivalenceByPosition(ExpressionPosition, Equivalence, CheckType)"})}),"\n",(0,r.jsx)(n.p,{children:"Applies an equivalence to the current expression, allowing the user to specify the position in the expression in\r\nwhich the equivalence should be applied."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:"IGenericExpression<T> ApplyEquivalenceByPosition(ExpressionPosition expressionPosition, Equivalence equivalence, CheckType checkType)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"expressionPosition"})," ",(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition",children:"ExpressionPosition"}),(0,r.jsx)("br",{}),"\r\nPosition of the expression to be replaced"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"equivalence"})," ",(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence",children:"Equivalence"}),(0,r.jsx)("br",{}),"\r\nThe equivalence to be applied to (a sub-part of) the expression."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"checkType"})," ",(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType",children:"CheckType"}),(0,r.jsx)("br",{}),"\r\nSince the equivalence is described by a left-side expression and a right-side\r\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\r\nand substitution with the right side, or vice versa, or both)."]}),"\n",(0,r.jsx)(n.h4,{id:"returns-12",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<T>"}),(0,r.jsx)("br",{}),"\r\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(6540);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);