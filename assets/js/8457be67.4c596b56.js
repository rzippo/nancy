"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[8545],{2729:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/IExpression","title":"IExpression","description":"Core interface for Nancy expressions.","source":"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/IExpression.md","sourceDirName":"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions","slug":"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/IExpression","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/IExpression","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"hide_title":true,"title":"IExpression"},"sidebar":"docsSidebar","previous":{"title":"Expressions","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/Expressions"},"next":{"title":"IGenericNAryExpression<T1, TResult>","permalink":"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/IGenericNAryExpression"}}');var i=n(4848),t=n(8453);const o={hide_title:!0,title:"IExpression"},a="IExpression",c={},l=[{value:"Properties",id:"properties",level:2},{value:"<strong>Name</strong>",id:"name",level:3},{value:"Property Value",id:"property-value",level:4},{value:"<strong>IsComputed</strong>",id:"iscomputed",level:3},{value:"Property Value",id:"property-value-1",level:4},{value:"Methods",id:"methods",level:2},{value:"<strong>ToLatexString(Int32, Boolean)</strong>",id:"tolatexstringint32-boolean",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"<strong>ToUnicodeString(Int32, Boolean)</strong>",id:"tounicodestringint32-boolean",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<strong>ToString()</strong>",id:"tostring",level:3},{value:"Returns",id:"returns-2",level:4},{value:"<strong>ComputeWithoutResult()</strong>",id:"computewithoutresult",level:3},{value:"<strong>Estimate()</strong>",id:"estimate",level:3},{value:"Returns",id:"returns-3",level:4},{value:"<strong>RootPosition()</strong>",id:"rootposition",level:3},{value:"Returns",id:"returns-4",level:4}];function p(e){const s={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"iexpression",children:"IExpression"})}),"\n",(0,i.jsx)(s.p,{children:"Core interface for Nancy expressions.\r\nDoes not specify its return or operand types, and therefore no operation."}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsxs)(s.p,{children:["To be used as a common root for simple variable assignments.\r\nTo have computation methods, see casts to other types like ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",children:"CurveExpression"})," or ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression",children:"RationalExpression"}),"."]})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public interface IExpression\n"})}),"\n",(0,i.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(s.h3,{id:"name",children:(0,i.jsx)(s.strong,{children:"Name"})}),"\n",(0,i.jsx)(s.p,{children:"The name of the expression."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public abstract string Name { get; }\n"})}),"\n",(0,i.jsx)(s.h4,{id:"property-value",children:"Property Value"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"iscomputed",children:(0,i.jsx)(s.strong,{children:"IsComputed"})}),"\n",(0,i.jsx)(s.p,{children:"True if the expression has already been computed."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"public abstract bool IsComputed { get; }\n"})}),"\n",(0,i.jsx)(s.h4,{id:"property-value-1",children:"Property Value"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(s.h3,{id:"tolatexstringint32-boolean",children:(0,i.jsx)(s.strong,{children:"ToLatexString(Int32, Boolean)"})}),"\n",(0,i.jsx)(s.p,{children:"Formats the expression in LaTeX."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"string ToLatexString(int depth, bool showRationalsAsName)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"depth"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32",children:"Int32"}),(0,i.jsx)("br",{}),"\r\nLevel of the expression tree up to which to print the expression fully expanded."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"showRationalsAsName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.p,{children:"If true, shows rational numbers with their expression name in place of their value."}),"\n",(0,i.jsx)(s.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"tounicodestringint32-boolean",children:(0,i.jsx)(s.strong,{children:"ToUnicodeString(Int32, Boolean)"})}),"\n",(0,i.jsx)(s.p,{children:"Returns the representation of the expression using characters of the Unicode character set."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"string ToUnicodeString(int depth, bool showRationalsAsName)\n"})}),"\n",(0,i.jsx)(s.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"depth"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32",children:"Int32"}),(0,i.jsx)("br",{}),"\r\nLevel of the expression tree up to which to print the expression fully expanded."]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"showRationalsAsName"})," ",(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean",children:"Boolean"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.p,{children:"If true, shows rational numbers with their expression name in place of their value."}),"\n",(0,i.jsx)(s.h4,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"tostring",children:(0,i.jsx)(s.strong,{children:"ToString()"})}),"\n",(0,i.jsx)(s.p,{children:"Represents the expression in textual format."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"string ToString()\n"})}),"\n",(0,i.jsx)(s.h4,{id:"returns-2",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.string",children:"String"}),(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(s.h3,{id:"computewithoutresult",children:(0,i.jsx)(s.strong,{children:"ComputeWithoutResult()"})}),"\n",(0,i.jsx)(s.p,{children:"Computes the expression, without returning its result."}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsxs)(s.p,{children:["Useful to perform operations through the ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/IExpression",children:"IExpression"})," interface, avoiding unnecessary casts.\r\nA cast to ",(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression",children:"IGenericExpression<TExpressionResult>"})," is needed to access the computed result value."]})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"void ComputeWithoutResult()\n"})}),"\n",(0,i.jsx)(s.h3,{id:"estimate",children:(0,i.jsx)(s.strong,{children:"Estimate()"})}),"\n",(0,i.jsx)(s.p,{children:"Evaluates the computational complexity of the expression."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"double Estimate()\n"})}),"\n",(0,i.jsx)(s.h4,{id:"returns-3",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.double",children:"Double"}),(0,i.jsx)("br",{}),"\r\nThe value representative of the complexity of the expression"]}),"\n",(0,i.jsx)(s.h3,{id:"rootposition",children:(0,i.jsx)(s.strong,{children:"RootPosition()"})}),"\n",(0,i.jsx)(s.p,{children:"This method can be used as a starting point to build a symbolic path through the expression."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-csharp",children:"ExpressionPosition RootPosition()\n"})}),"\n",(0,i.jsx)(s.h4,{id:"returns-4",children:"Returns"}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition",children:"ExpressionPosition"}),(0,i.jsx)("br",{}),"\r\nReturns the position of the root of the expression"]})]})}function d(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>a});var r=n(6540);const i={},t=r.createContext(i);function o(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);