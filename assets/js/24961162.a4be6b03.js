"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[5854],{3905:(e,n,s)=>{s.d(n,{Zo:()=>m,kt:()=>k});var t=s(7294);function r(e,n,s){return n in e?Object.defineProperty(e,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[n]=s,e}function a(e,n){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),s.push.apply(s,t)}return s}function i(e){for(var n=1;n<arguments.length;n++){var s=null!=arguments[n]?arguments[n]:{};n%2?a(Object(s),!0).forEach((function(n){r(e,n,s[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):a(Object(s)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(s,n))}))}return e}function p(e,n){if(null==e)return{};var s,t,r=function(e,n){if(null==e)return{};var s,t,r={},a=Object.keys(e);for(t=0;t<a.length;t++)s=a[t],n.indexOf(s)>=0||(r[s]=e[s]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)s=a[t],n.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(r[s]=e[s])}return r}var o=t.createContext({}),l=function(e){var n=t.useContext(o),s=n;return e&&(s="function"==typeof e?e(n):i(i({},n),e)),s},m=function(e){var n=l(e.components);return t.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var s=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=l(s),k=r,g=c["".concat(o,".").concat(k)]||c[k]||u[k]||a;return s?t.createElement(g,i(i({ref:n},m),{},{components:s})):t.createElement(g,i({ref:n},m))}));function k(e,n){var s=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=s.length,i=new Array(a);i[0]=c;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var l=2;l<a;l++)i[l]=s[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,s)}c.displayName="MDXCreateElement"},9952:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var t=s(7462),r=(s(7294),s(3905));const a={hide_title:!0},i="CurveExpression",p={unversionedId:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",id:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",title:"CurveExpression",description:"Class which describes NetCal expressions that evaluate to curves. The class aims at providing the main methods to",source:"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression.md",sourceDirName:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions",slug:"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"docsSidebar",previous:{title:"CurveBinaryExpression&lt;T1, T2&gt;",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveBinaryExpression`2"},next:{title:"CurveExpressionExtensions",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpressionExtensions"}},o={},l=[{value:"Fields",id:"fields",level:2},{value:"<strong>Equivalences</strong>",id:"equivalences",level:3},{value:"Properties",id:"properties",level:2},{value:"<strong>Name</strong>",id:"name",level:3},{value:"Property Value",id:"property-value",level:4},{value:"<strong>Settings</strong>",id:"settings",level:3},{value:"Property Value",id:"property-value-1",level:4},{value:"<strong>Value</strong>",id:"value",level:3},{value:"Property Value",id:"property-value-2",level:4},{value:"<strong>IsSubAdditive</strong>",id:"issubadditive",level:3},{value:"Property Value",id:"property-value-3",level:4},{value:"<strong>IsLeftContinuous</strong>",id:"isleftcontinuous",level:3},{value:"Property Value",id:"property-value-4",level:4},{value:"<strong>IsRightContinuous</strong>",id:"isrightcontinuous",level:3},{value:"Property Value",id:"property-value-5",level:4},{value:"<strong>IsNonNegative</strong>",id:"isnonnegative",level:3},{value:"Property Value",id:"property-value-6",level:4},{value:"<strong>IsNonDecreasing</strong>",id:"isnondecreasing",level:3},{value:"Property Value",id:"property-value-7",level:4},{value:"<strong>IsConcave</strong>",id:"isconcave",level:3},{value:"Property Value",id:"property-value-8",level:4},{value:"<strong>IsConvex</strong>",id:"isconvex",level:3},{value:"Property Value",id:"property-value-9",level:4},{value:"<strong>IsZeroAtZero</strong>",id:"iszeroatzero",level:3},{value:"Property Value",id:"property-value-10",level:4},{value:"<strong>IsWellDefined</strong>",id:"iswelldefined",level:3},{value:"Property Value",id:"property-value-11",level:4},{value:"Methods",id:"methods",level:2},{value:"<strong>Negate(String, ExpressionSettings)</strong>",id:"negatestring-expressionsettings",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"<strong>ToNonNegative(String, ExpressionSettings)</strong>",id:"tononnegativestring-expressionsettings",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<strong>SubAdditiveClosure(String, ExpressionSettings)</strong>",id:"subadditiveclosurestring-expressionsettings",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"<strong>SuperAdditiveClosure(String, ExpressionSettings)</strong>",id:"superadditiveclosurestring-expressionsettings",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"<strong>ToUpperNonDecreasing(String, ExpressionSettings)</strong>",id:"touppernondecreasingstring-expressionsettings",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"<strong>ToLowerNonDecreasing(String, ExpressionSettings)</strong>",id:"tolowernondecreasingstring-expressionsettings",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"<strong>ToLeftContinuous(String, ExpressionSettings)</strong>",id:"toleftcontinuousstring-expressionsettings",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"<strong>ToRightContinuous(String, ExpressionSettings)</strong>",id:"torightcontinuousstring-expressionsettings",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"<strong>WithZeroOrigin(String, ExpressionSettings)</strong>",id:"withzerooriginstring-expressionsettings",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"<strong>LowerPseudoInverse(String, ExpressionSettings)</strong>",id:"lowerpseudoinversestring-expressionsettings",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"<strong>UpperPseudoInverse(String, ExpressionSettings)</strong>",id:"upperpseudoinversestring-expressionsettings",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"<strong>Addition(CurveExpression, String, ExpressionSettings)</strong>",id:"additioncurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"<strong>Addition(Curve, String, String, ExpressionSettings)</strong>",id:"additioncurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"<strong>Addition(CurveExpression, Curve, String, ExpressionSettings)</strong>",id:"additioncurveexpression-curve-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"<strong>Subtraction(CurveExpression, String, ExpressionSettings)</strong>",id:"subtractioncurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-14",level:4},{value:"<strong>Subtraction(Curve, String, String, ExpressionSettings)</strong>",id:"subtractioncurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-15",level:4},{value:"<strong>Minimum(CurveExpression, String, ExpressionSettings)</strong>",id:"minimumcurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-16",level:4},{value:"<strong>Minimum(Curve, String, String, ExpressionSettings)</strong>",id:"minimumcurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-17",level:4},{value:"<strong>Maximum(CurveExpression, String, ExpressionSettings)</strong>",id:"maximumcurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-18",level:4},{value:"<strong>Maximum(Curve, String, String, ExpressionSettings)</strong>",id:"maximumcurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-19",level:4},{value:"<strong>Convolution(CurveExpression, String, ExpressionSettings)</strong>",id:"convolutioncurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-20",level:4},{value:"<strong>Convolution(Curve, String, String, ExpressionSettings)</strong>",id:"convolutioncurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-21",level:4},{value:"Returns",id:"returns-21",level:4},{value:"<strong>Deconvolution(CurveExpression, String, ExpressionSettings)</strong>",id:"deconvolutioncurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-22",level:4},{value:"Returns",id:"returns-22",level:4},{value:"<strong>Deconvolution(Curve, String, String, ExpressionSettings)</strong>",id:"deconvolutioncurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-23",level:4},{value:"Returns",id:"returns-23",level:4},{value:"<strong>MaxPlusConvolution(CurveExpression, String, ExpressionSettings)</strong>",id:"maxplusconvolutioncurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-24",level:4},{value:"Returns",id:"returns-24",level:4},{value:"<strong>MaxPlusConvolution(Curve, String, String, ExpressionSettings)</strong>",id:"maxplusconvolutioncurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-25",level:4},{value:"Returns",id:"returns-25",level:4},{value:"<strong>MaxPlusDeconvolution(CurveExpression, String, ExpressionSettings)</strong>",id:"maxplusdeconvolutioncurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-26",level:4},{value:"Returns",id:"returns-26",level:4},{value:"<strong>MaxPlusDeconvolution(Curve, String, String, ExpressionSettings)</strong>",id:"maxplusdeconvolutioncurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-27",level:4},{value:"Returns",id:"returns-27",level:4},{value:"<strong>Composition(CurveExpression, String, ExpressionSettings)</strong>",id:"compositioncurveexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-28",level:4},{value:"Returns",id:"returns-28",level:4},{value:"<strong>Composition(Curve, String, String, ExpressionSettings)</strong>",id:"compositioncurve-string-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-29",level:4},{value:"Returns",id:"returns-29",level:4},{value:"<strong>DelayBy(RationalExpression, String, ExpressionSettings)</strong>",id:"delaybyrationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-30",level:4},{value:"Returns",id:"returns-30",level:4},{value:"<strong>DelayBy(Rational, String, ExpressionSettings)</strong>",id:"delaybyrational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-31",level:4},{value:"Returns",id:"returns-31",level:4},{value:"<strong>AnticipateBy(RationalExpression, String, ExpressionSettings)</strong>",id:"anticipatebyrationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-32",level:4},{value:"Returns",id:"returns-32",level:4},{value:"<strong>AnticipateBy(Rational, String, ExpressionSettings)</strong>",id:"anticipatebyrational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-33",level:4},{value:"Returns",id:"returns-33",level:4},{value:"<strong>Scale(RationalExpression, String, ExpressionSettings)</strong>",id:"scalerationalexpression-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-34",level:4},{value:"Returns",id:"returns-34",level:4},{value:"<strong>Scale(Rational, String, ExpressionSettings)</strong>",id:"scalerational-string-expressionsettings",level:3},{value:"Parameters",id:"parameters-35",level:4},{value:"Returns",id:"returns-35",level:4},{value:"<strong>Compute()</strong>",id:"compute",level:3},{value:"Returns",id:"returns-36",level:4},{value:"<strong>ReplaceByValue&lt;T1&gt;(IGenericExpression&lt;T1&gt;, IGenericExpression&lt;T1&gt;)</strong>",id:"replacebyvaluet1igenericexpressiont1-igenericexpressiont1",level:3},{value:"Type Parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-36",level:4},{value:"Returns",id:"returns-37",level:4},{value:"<strong>ReplaceByPosition&lt;T1&gt;(ExpressionPosition, IGenericExpression&lt;T1&gt;)</strong>",id:"replacebypositiont1expressionposition-igenericexpressiont1",level:3},{value:"Type Parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-37",level:4},{value:"Returns",id:"returns-38",level:4},{value:"<strong>ReplaceByPosition&lt;T1&gt;(IEnumerable&lt;String&gt;, IGenericExpression&lt;T1&gt;)</strong>",id:"replacebypositiont1ienumerablestring-igenericexpressiont1",level:3},{value:"Type Parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-38",level:4},{value:"Returns",id:"returns-39",level:4},{value:"<strong>ApplyEquivalence(Equivalence, CheckType)</strong>",id:"applyequivalenceequivalence-checktype",level:3},{value:"Parameters",id:"parameters-39",level:4},{value:"Returns",id:"returns-40",level:4},{value:"<strong>ApplyEquivalenceByPosition(IEnumerable&lt;String&gt;, Equivalence, CheckType)</strong>",id:"applyequivalencebypositionienumerablestring-equivalence-checktype",level:3},{value:"Parameters",id:"parameters-40",level:4},{value:"Returns",id:"returns-41",level:4},{value:"<strong>ApplyEquivalenceByPosition(ExpressionPosition, Equivalence, CheckType)</strong>",id:"applyequivalencebypositionexpressionposition-equivalence-checktype",level:3},{value:"Parameters",id:"parameters-41",level:4},{value:"Returns",id:"returns-42",level:4},{value:"<strong>Equivalent(IGenericExpression&lt;Curve&gt;)</strong>",id:"equivalentigenericexpressioncurve",level:3},{value:"Parameters",id:"parameters-42",level:4},{value:"Returns",id:"returns-43",level:4},{value:"<strong>AddEquivalence(Type, Equivalence)</strong>",id:"addequivalencetype-equivalence",level:3},{value:"Parameters",id:"parameters-43",level:4},{value:"<strong>Accept(IExpressionVisitor)</strong>",id:"acceptiexpressionvisitor",level:3},{value:"Parameters",id:"parameters-44",level:4},{value:"<strong>Accept(ICurveExpressionVisitor)</strong>",id:"accepticurveexpressionvisitor",level:3},{value:"Parameters",id:"parameters-45",level:4},{value:"<strong>ToLatexString(Int32, Boolean)</strong>",id:"tolatexstringint32-boolean",level:3},{value:"Parameters",id:"parameters-46",level:4},{value:"Returns",id:"returns-44",level:4},{value:"<strong>ToUnicodeString(Int32, Boolean)</strong>",id:"tounicodestringint32-boolean",level:3},{value:"Parameters",id:"parameters-47",level:4},{value:"Returns",id:"returns-45",level:4},{value:"<strong>ToString()</strong>",id:"tostring",level:3},{value:"Returns",id:"returns-46",level:4},{value:"<strong>Estimate()</strong>",id:"estimate",level:3},{value:"Returns",id:"returns-47",level:4},{value:"<strong>RootPosition()</strong>",id:"rootposition",level:3},{value:"Returns",id:"returns-48",level:4},{value:"<strong>WithName(String)</strong>",id:"withnamestring",level:3},{value:"Parameters",id:"parameters-48",level:4},{value:"Returns",id:"returns-49",level:4},{value:"<strong>IsUltimatelyConstant()</strong>",id:"isultimatelyconstant",level:3},{value:"Returns",id:"returns-50",level:4}],m={toc:l};function u(e){let{components:n,...s}=e;return(0,r.kt)("wrapper",(0,t.Z)({},m,s,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"curveexpression"},"CurveExpression"),(0,r.kt)("p",null,"Class which describes NetCal expressions that evaluate to curves. The class aims at providing the main methods to\nbuild, manipulate and print network calculus expressions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract class CurveExpression : Unipi.Nancy.Expressions.Internals.IGenericExpression`1[[Unipi.Nancy.MinPlusAlgebra.Curve, Unipi.Nancy, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], Unipi.Nancy.Expressions.Visitors.IVisitableCurve\n")),(0,r.kt)("p",null,"Inheritance ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.object"},"Object")," \u2192 ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null),"\nImplements ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","Curve",">"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/IVisitableCurve"},"IVisitableCurve")),(0,r.kt)("h2",{id:"fields"},"Fields"),(0,r.kt)("h3",{id:"equivalences"},(0,r.kt)("strong",{parentName:"h3"},"Equivalences")),(0,r.kt)("p",null,'Static dictionary field collecting the well-known equivalences, indexed by the "main" type of equivalence'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static ConcurrentDictionary<Type, List<Equivalence>> Equivalences;\n")),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"name"},(0,r.kt)("strong",{parentName:"h3"},"Name")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public string Name { get; }\n")),(0,r.kt)("h4",{id:"property-value"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"settings"},(0,r.kt)("strong",{parentName:"h3"},"Settings")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public ExpressionSettings Settings { get; }\n")),(0,r.kt)("h4",{id:"property-value-1"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"value"},(0,r.kt)("strong",{parentName:"h3"},"Value")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public Curve Value { get; }\n")),(0,r.kt)("h4",{id:"property-value-2"},"Property Value"),(0,r.kt)("p",null,"Curve",(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"issubadditive"},(0,r.kt)("strong",{parentName:"h3"},"IsSubAdditive")),(0,r.kt)("p",null,"True if the curve described by the expression is sub-additive. Property evaluated avoiding as much as possible\nto make any computation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsSubAdditive { get; }\n")),(0,r.kt)("h4",{id:"property-value-3"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"isleftcontinuous"},(0,r.kt)("strong",{parentName:"h3"},"IsLeftContinuous")),(0,r.kt)("p",null,"True if the curve described by the expression is left continuous. Property evaluated avoiding as much as\npossible to make any computation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsLeftContinuous { get; }\n")),(0,r.kt)("h4",{id:"property-value-4"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"isrightcontinuous"},(0,r.kt)("strong",{parentName:"h3"},"IsRightContinuous")),(0,r.kt)("p",null,"True if the curve described by the expression is right continuous. Property evaluated avoiding as much as\npossible to make any computation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsRightContinuous { get; }\n")),(0,r.kt)("h4",{id:"property-value-5"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"isnonnegative"},(0,r.kt)("strong",{parentName:"h3"},"IsNonNegative")),(0,r.kt)("p",null,"True if the curve described by the expression is non-negative. Property evaluated avoiding as much as\npossible to make any computation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsNonNegative { get; }\n")),(0,r.kt)("h4",{id:"property-value-6"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"isnondecreasing"},(0,r.kt)("strong",{parentName:"h3"},"IsNonDecreasing")),(0,r.kt)("p",null,"True if the curve described by the expression is non-decreasing. Property evaluated avoiding as much as\npossible to make any computation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsNonDecreasing { get; }\n")),(0,r.kt)("h4",{id:"property-value-7"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"isconcave"},(0,r.kt)("strong",{parentName:"h3"},"IsConcave")),(0,r.kt)("p",null,"True if the curve described by the expression is concave. Property evaluated avoiding as much as\npossible to make any computation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsConcave { get; }\n")),(0,r.kt)("h4",{id:"property-value-8"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"isconvex"},(0,r.kt)("strong",{parentName:"h3"},"IsConvex")),(0,r.kt)("p",null,"True if the curve described by the expression is convex. Property evaluated avoiding as much as\npossible to make any computation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsConvex { get; }\n")),(0,r.kt)("h4",{id:"property-value-9"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"iszeroatzero"},(0,r.kt)("strong",{parentName:"h3"},"IsZeroAtZero")),(0,r.kt)("p",null,"True if the curve f described by the expression is 0 in 0 (f(0) = 0). Property evaluated avoiding as much as\npossible to make any computation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsZeroAtZero { get; }\n")),(0,r.kt)("h4",{id:"property-value-10"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"iswelldefined"},(0,r.kt)("strong",{parentName:"h3"},"IsWellDefined")),(0,r.kt)("p",null,"True if the operation described by the expression is well-defined according to the definition in\nin ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/References"},"[","BT08","]")," Section 2.1."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsWellDefined { get; }\n")),(0,r.kt)("h4",{id:"property-value-11"},"Property Value"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"negatestring-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Negate(String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds the opposite operator to the expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression Negate(string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"tononnegativestring-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"ToNonNegative(String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the expression the operation to compute its non-negative version."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression ToNonNegative(string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"subadditiveclosurestring-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"SubAdditiveClosure(String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds the sub-additive closure operator to the expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression SubAdditiveClosure(string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"superadditiveclosurestring-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"SuperAdditiveClosure(String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds the super-additive closure operator to the expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression SuperAdditiveClosure(string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"touppernondecreasingstring-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"ToUpperNonDecreasing(String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the expression the operation to compute its upper non-decreasing version."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression ToUpperNonDecreasing(string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"tolowernondecreasingstring-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"ToLowerNonDecreasing(String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the expression the operation to compute its lower non-decreasing version."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression ToLowerNonDecreasing(string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"toleftcontinuousstring-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"ToLeftContinuous(String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the expression the operation to compute a left continuous version of it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression ToLeftContinuous(string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-6"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"torightcontinuousstring-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"ToRightContinuous(String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the expression the operation to compute a right continuous version of it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression ToRightContinuous(string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-7"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"withzerooriginstring-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"WithZeroOrigin(String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the expression an operation which enforces it to assume 0 at time 0."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression WithZeroOrigin(string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-8"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"lowerpseudoinversestring-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"LowerPseudoInverse(String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the expression the operation to compute the lower pseudo-inverse function,\n",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msubsup",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msubsup"},"f"),(0,r.kt)("mo",{parentName:"msubsup"},"\u2193"),(0,r.kt)("mrow",{parentName:"msubsup"},(0,r.kt)("mo",{parentName:"mrow"},"\u2212"),(0,r.kt)("mn",{parentName:"mrow"},"1"))),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mi",{parentName:"mrow"},"inf"),(0,r.kt)("mo",{parentName:"mrow"},"\u2061"),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"{"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow"},":"),(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"\u2265"),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"}")),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mi",{parentName:"mrow"},"sup"),(0,r.kt)("mo",{parentName:"mrow"},"\u2061"),(0,r.kt)("mrow",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"{"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow"},":"),(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"<"),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",fence:"true"},"}"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"f^{-1}_\\downarrow(x) = \\inf \\left\\{ t : f(t) \\ge x \\right\\} = \\sup \\left\\{ t : f(t) < x \\right\\}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1.2917em",verticalAlign:"-0.4374em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8542em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.3987em",marginLeft:"-0.1076em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mrel mtight"},"\u2193"))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.1031em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.4374em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mop"},"in",(0,r.kt)("span",{parentName:"span",style:{marginRight:"0.07778em"}},"f")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"{"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},":"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2265"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},"}")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mop"},"sup"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"minner"},(0,r.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"{"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},":"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"<"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},"}")))))),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression LowerPseudoInverse(string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-9"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"upperpseudoinversestring-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"UpperPseudoInverse(String, ExpressionSettings)")),(0,r.kt)("p",null,"Adds to the expression the operation to compute the upper pseudo-inverse function,\n",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msubsup",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msubsup"},"f"),(0,r.kt)("mo",{parentName:"msubsup"},"\u2191"),(0,r.kt)("mrow",{parentName:"msubsup"},(0,r.kt)("mo",{parentName:"mrow"},"\u2212"),(0,r.kt)("mn",{parentName:"mrow"},"1"))),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mi",{parentName:"mrow"},"inf"),(0,r.kt)("mo",{parentName:"mrow"},"\u2061"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"{"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow"},":"),(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},">"),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"}"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mi",{parentName:"mrow"},"sup"),(0,r.kt)("mo",{parentName:"mrow"},"\u2061"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"{"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow"},":"),(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"\u2264"),(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"}")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"f^{-1}_\\uparrow(x) = \\inf\\{ t : f(t) > x \\} = \\sup\\{ t : f(t) \\le x \\}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1.2917em",verticalAlign:"-0.4374em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8542em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.3987em",marginLeft:"-0.1076em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mrel mtight"},"\u2191"))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.1031em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.4374em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mop"},"in",(0,r.kt)("span",{parentName:"span",style:{marginRight:"0.07778em"}},"f")),(0,r.kt)("span",{parentName:"span",className:"mopen"},"{"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},":"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},">"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose"},"}"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mop"},"sup"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"{"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},":"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2264"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"),(0,r.kt)("span",{parentName:"span",className:"mclose"},"}"))))),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression UpperPseudoInverse(string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-10"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"additioncurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Addition(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the addition between the current expression and the one passed as\nargument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression Addition(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-11"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-11"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"additioncurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Addition(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the addition between the current expression and the curve (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression Addition(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-12"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-12"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"additioncurveexpression-curve-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Addition(CurveExpression, Curve, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the addition between the expression !:left and the curve\n!:right (internally converted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static CurveExpression Addition(CurveExpression left, Curve right, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-13"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"left")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"right")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-13"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"subtractioncurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Subtraction(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the subtraction between the current expression and the one passed as\nargument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression Subtraction(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-14"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-14"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"subtractioncurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Subtraction(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the subtraction between the current expression and the curve (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression Subtraction(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-15"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-15"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"minimumcurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Minimum(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the minimum between the current expression and the one passed as\nargument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression Minimum(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-16"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-16"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"minimumcurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Minimum(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the minimum between the current expression and the curve (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression Minimum(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-17"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-17"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maximumcurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Maximum(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the maximum between the current expression and the one passed as\nargument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression Maximum(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-18"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-18"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maximumcurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Maximum(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the maximum between the current expression and the curve (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression Maximum(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-19"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-19"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"convolutioncurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Convolution(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the convolution between the current expression and the one passed as\nargument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression Convolution(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-20"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-20"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"convolutioncurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Convolution(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the convolution between the current expression and the curve (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression Convolution(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-21"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-21"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"deconvolutioncurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Deconvolution(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the deconvolution between the current expression and the one passed as\nargument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression Deconvolution(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-22"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-22"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"deconvolutioncurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Deconvolution(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the deconvolution between the current expression and the curve (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression Deconvolution(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-23"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-23"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maxplusconvolutioncurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"MaxPlusConvolution(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the max-plus convolution between the current expression and the one passed\nas argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression MaxPlusConvolution(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-24"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-24"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maxplusconvolutioncurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"MaxPlusConvolution(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the max-plus convolution between the current expression and the curve (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression MaxPlusConvolution(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-25"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-25"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maxplusdeconvolutioncurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"MaxPlusDeconvolution(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the max-plus deconvolution between the current expression and the one\npassed as argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression MaxPlusDeconvolution(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-26"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-26"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"maxplusdeconvolutioncurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"MaxPlusDeconvolution(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the max-plus deconvolution between the current expression and the curve (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression MaxPlusDeconvolution(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-27"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-27"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"compositioncurveexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Composition(CurveExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the composition between the current expression and the one passed as\nargument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression Composition(CurveExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-28"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-28"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"compositioncurve-string-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Composition(Curve, String, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the composition between the current expression and the curve (internally\nconverted to ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConcreteCurveExpression"},"ConcreteCurveExpression"),") passed as argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression Composition(Curve curve, string name, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-29"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curve")," Curve",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"name")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-29"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"delaybyrationalexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"DelayBy(RationalExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to delay the curve corresponding to the current expression\nby the rational number described by the argument !:expression of type\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression DelayBy(RationalExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-30"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-30"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"delaybyrational-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"DelayBy(Rational, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to delay the curve corresponding to the current expression\nby the rational number !:delay."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression DelayBy(Rational delay, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-31"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"delay")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-31"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"anticipatebyrationalexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"AnticipateBy(RationalExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to anticipate the curve corresponding to the current\nexpression by the rational number described by the argument !:expression of type\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression AnticipateBy(RationalExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-32"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-32"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"anticipatebyrational-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"AnticipateBy(Rational, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to anticipate the curve corresponding to the current\nexpression by the rational number !:time."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression AnticipateBy(Rational time, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-33"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"time")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-33"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"scalerationalexpression-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Scale(RationalExpression, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to scale the curve corresponding to the current expression\nby the rational number described by the argument !:expression of type\n",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression Scale(RationalExpression expression, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-34"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalExpression"},"RationalExpression"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-34"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"scalerational-string-expressionsettings"},(0,r.kt)("strong",{parentName:"h3"},"Scale(Rational, String, ExpressionSettings)")),(0,r.kt)("p",null,"Creates a new expression composed of the operation to scale the curve corresponding to the current expression\nby the rational number !:scaleFactor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression Scale(Rational scaleFactor, string expressionName, ExpressionSettings settings)\n")),(0,r.kt)("h4",{id:"parameters-35"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"scaleFactor")," Rational",(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"settings")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-35"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"compute"},(0,r.kt)("strong",{parentName:"h3"},"Compute()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public Curve Compute()\n")),(0,r.kt)("h4",{id:"returns-36"},"Returns"),(0,r.kt)("p",null,"Curve",(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"replacebyvaluet1igenericexpressiont1-igenericexpressiont1"},(0,r.kt)("strong",{parentName:"h3"},"ReplaceByValue","<","T1",">","(IGenericExpression","<","T1",">",", IGenericExpression","<","T1",">",")")),(0,r.kt)("p",null,"Replaces every occurence of a sub-expression in the expression to which the method is applied."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression ReplaceByValue<T1>(IGenericExpression<T1> expressionPattern, IGenericExpression<T1> newExpressionToReplace)\n")),(0,r.kt)("h4",{id:"type-parameters"},"Type Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CurveExpression.T1"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"parameters-36"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionPattern")," IGenericExpression","<","T1",">",(0,r.kt)("br",null),"\nThe sub-expression to look for in the main expression for being replaced."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"newExpressionToReplace")," IGenericExpression","<","T1",">",(0,r.kt)("br",null),"\nThe new sub-expression."),(0,r.kt)("h4",{id:"returns-37"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null),"\nNew expression object (of type ) with replaced sub-expressions."),(0,r.kt)("h3",{id:"replacebypositiont1expressionposition-igenericexpressiont1"},(0,r.kt)("strong",{parentName:"h3"},"ReplaceByPosition","<","T1",">","(ExpressionPosition, IGenericExpression","<","T1",">",")")),(0,r.kt)("p",null,"Replaces the sub-expression at a certain position in the expression to which the method is applied."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression ReplaceByPosition<T1>(ExpressionPosition expressionPosition, IGenericExpression<T1> newExpressionToReplace)\n")),(0,r.kt)("h4",{id:"type-parameters-1"},"Type Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CurveExpression.T1"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"parameters-37"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionPosition")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition"},"ExpressionPosition"),(0,r.kt)("br",null),"\nPosition of the expression to be replaced."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"newExpressionToReplace")," IGenericExpression","<","T1",">",(0,r.kt)("br",null),"\nThe new sub-expression."),(0,r.kt)("h4",{id:"returns-38"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null),"\nNew expression object (of type ) with replaced sub-expression."),(0,r.kt)("h3",{id:"replacebypositiont1ienumerablestring-igenericexpressiont1"},(0,r.kt)("strong",{parentName:"h3"},"ReplaceByPosition","<","T1",">","(IEnumerable","<","String",">",", IGenericExpression","<","T1",">",")")),(0,r.kt)("p",null,"Replaces the sub-expression at a certain position in the expression to which the method is applied."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression ReplaceByPosition<T1>(IEnumerable<string> positionPath, IGenericExpression<T1> newExpressionToReplace)\n")),(0,r.kt)("h4",{id:"type-parameters-2"},"Type Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CurveExpression.T1"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"parameters-38"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"positionPath")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1"},"IEnumerable","<","String",">"),(0,r.kt)("br",null),'\nPosition of the expression to be replaced. The position is expressed as a path from\nthe root of the expression by using a list of strings "Operand" for unary operators, "LeftOperand"/"RightOperand"\nfor binary operators, "Operand(index)" for n-ary operators.'),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"newExpressionToReplace")," IGenericExpression","<","T1",">",(0,r.kt)("br",null),"\nThe new sub-expression."),(0,r.kt)("h4",{id:"returns-39"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null),"\nNew expression object (of type ) with the replaced sub-expression."),(0,r.kt)("h3",{id:"applyequivalenceequivalence-checktype"},(0,r.kt)("strong",{parentName:"h3"},"ApplyEquivalence(Equivalence, CheckType)")),(0,r.kt)("p",null,"Applies an equivalence to the current expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression ApplyEquivalence(Equivalence equivalence, CheckType checkType)\n")),(0,r.kt)("h4",{id:"parameters-39"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"equivalence")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence"},"Equivalence"),(0,r.kt)("br",null),"\nThe equivalence to be applied to (a sub-part of) the expression."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"checkType")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType"},"CheckType"),(0,r.kt)("br",null),"\nSince the equivalence is described by a left-side expression and a right-side\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\nand substitution with the right side, or vice versa, or both)."),(0,r.kt)("h4",{id:"returns-40"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null),"\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."),(0,r.kt)("h3",{id:"applyequivalencebypositionienumerablestring-equivalence-checktype"},(0,r.kt)("strong",{parentName:"h3"},"ApplyEquivalenceByPosition(IEnumerable","<","String",">",", Equivalence, CheckType)")),(0,r.kt)("p",null,"Applies an equivalence to the current expression, allowing the user to specify the position in the expression in\nwhich the equivalence should be applied."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression ApplyEquivalenceByPosition(IEnumerable<string> positionPath, Equivalence equivalence, CheckType checkType)\n")),(0,r.kt)("h4",{id:"parameters-40"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"positionPath")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1"},"IEnumerable","<","String",">"),(0,r.kt)("br",null),'\nPosition of the sub-expression to be replaced with an equivalent one.\nThe position is expressed as a path from the root of the expression by using a list of strings "Operand" for\nunary operators, "LeftOperand"/"RightOperand" for binary operators, "Operand(index)" for n-ary operators'),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"equivalence")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence"},"Equivalence"),(0,r.kt)("br",null),"\nThe equivalence to be applied to (a sub-part of) the expression."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"checkType")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType"},"CheckType"),(0,r.kt)("br",null),"\nSince the equivalence is described by a left-side expression and a right-side\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\nand substitution with the right side, or vice versa, or both)."),(0,r.kt)("h4",{id:"returns-41"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null),"\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."),(0,r.kt)("h3",{id:"applyequivalencebypositionexpressionposition-equivalence-checktype"},(0,r.kt)("strong",{parentName:"h3"},"ApplyEquivalenceByPosition(ExpressionPosition, Equivalence, CheckType)")),(0,r.kt)("p",null,"Applies an equivalence to the current expression, allowing the user to specify the position in the expression in\nwhich the equivalence should be applied."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression ApplyEquivalenceByPosition(ExpressionPosition expressionPosition, Equivalence equivalence, CheckType checkType)\n")),(0,r.kt)("h4",{id:"parameters-41"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionPosition")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition"},"ExpressionPosition"),(0,r.kt)("br",null),"\nPosition of the expression to be replaced"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"equivalence")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence"},"Equivalence"),(0,r.kt)("br",null),"\nThe equivalence to be applied to (a sub-part of) the expression."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"checkType")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/CheckType"},"CheckType"),(0,r.kt)("br",null),"\nSince the equivalence is described by a left-side expression and a right-side\nexpression, this parameter identifies the direction of application of the equivalence (match of the left side,\nand substitution with the right side, or vice versa, or both)."),(0,r.kt)("h4",{id:"returns-42"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null),"\nThe new equivalent expression if the equivalence can be applied, the original expression otherwise."),(0,r.kt)("h3",{id:"equivalentigenericexpressioncurve"},(0,r.kt)("strong",{parentName:"h3"},"Equivalent(IGenericExpression","<","Curve",">",")")),(0,r.kt)("p",null,"Checks if two expressions are equivalent by computing their values"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool Equivalent(IGenericExpression<Curve> other)\n")),(0,r.kt)("h4",{id:"parameters-42"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"other")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","Curve",">"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-43"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"addequivalencetype-equivalence"},(0,r.kt)("strong",{parentName:"h3"},"AddEquivalence(Type, Equivalence)")),(0,r.kt)("p",null,"Adds an equivalence to the static field ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression#equivalences"},"Equivalences"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public static void AddEquivalence(Type type, Equivalence equivalence)\n")),(0,r.kt)("h4",{id:"parameters-43"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"type")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.type"},"Type"),(0,r.kt)("br",null),"\nThe main type of operation (e.g., ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/ConvolutionExpression"},"ConvolutionExpression")," in the equivalence\n$f \\otimes f = f) involved in the equivalence."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"equivalence")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Equivalences/Equivalence"},"Equivalence"),(0,r.kt)("br",null),"\nThe equivalence to be added."),(0,r.kt)("h3",{id:"acceptiexpressionvisitor"},(0,r.kt)("strong",{parentName:"h3"},"Accept(IExpressionVisitor)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public void Accept(IExpressionVisitor visitor)\n")),(0,r.kt)("h4",{id:"parameters-44"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"visitor")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/IExpressionVisitor"},"IExpressionVisitor"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"accepticurveexpressionvisitor"},(0,r.kt)("strong",{parentName:"h3"},"Accept(ICurveExpressionVisitor)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract void Accept(ICurveExpressionVisitor visitor)\n")),(0,r.kt)("h4",{id:"parameters-45"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"visitor")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/ICurveExpressionVisitor"},"ICurveExpressionVisitor"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"tolatexstringint32-boolean"},(0,r.kt)("strong",{parentName:"h3"},"ToLatexString(Int32, Boolean)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public string ToLatexString(int depth, bool showRationalsAsName)\n")),(0,r.kt)("h4",{id:"parameters-46"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"depth")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32"},"Int32"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"showRationalsAsName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-44"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"tounicodestringint32-boolean"},(0,r.kt)("strong",{parentName:"h3"},"ToUnicodeString(Int32, Boolean)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public string ToUnicodeString(int depth, bool showRationalsAsName)\n")),(0,r.kt)("h4",{id:"parameters-47"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"depth")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.int32"},"Int32"),(0,r.kt)("br",null)),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"showRationalsAsName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)),(0,r.kt)("h4",{id:"returns-45"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"tostring"},(0,r.kt)("strong",{parentName:"h3"},"ToString()")),(0,r.kt)("p",null,"Returns a string that represents the current expression using the Unicode character set."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public string ToString()\n")),(0,r.kt)("h4",{id:"returns-46"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"estimate"},(0,r.kt)("strong",{parentName:"h3"},"Estimate()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public double Estimate()\n")),(0,r.kt)("h4",{id:"returns-47"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.double"},"Double"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"rootposition"},(0,r.kt)("strong",{parentName:"h3"},"RootPosition()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public ExpressionPosition RootPosition()\n")),(0,r.kt)("h4",{id:"returns-48"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.ExpressionsUtility/ExpressionPosition"},"ExpressionPosition"),(0,r.kt)("br",null)),(0,r.kt)("h3",{id:"withnamestring"},(0,r.kt)("strong",{parentName:"h3"},"WithName(String)")),(0,r.kt)("p",null,"Changes the name of the expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public CurveExpression WithName(string expressionName)\n")),(0,r.kt)("h4",{id:"parameters-48"},"Parameters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expressionName")," ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,r.kt)("br",null),"\nThe new name of the expression"),(0,r.kt)("h4",{id:"returns-49"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression"),(0,r.kt)("br",null),"\nThe expression (new object of type ) with the new name"),(0,r.kt)("h3",{id:"isultimatelyconstant"},(0,r.kt)("strong",{parentName:"h3"},"IsUltimatelyConstant()")),(0,r.kt)("p",null,"Returns true if for ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow"},"\u2265")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"t \\ge")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7719em",verticalAlign:"-0.136em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2265")))))," PseudoPeriodStart the curve expression is constant.\nImplemented by computing the value of the expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsUltimatelyConstant()\n")),(0,r.kt)("h4",{id:"returns-50"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,r.kt)("br",null)))}u.isMDXComponent=!0}}]);