"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[9202],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>y});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(t),y=a,v=d["".concat(p,".").concat(y)]||d[y]||c[y]||s;return t?r.createElement(v,o(o({ref:n},u),{},{components:t})):r.createElement(v,o({ref:n},u))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=d;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4905:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const s={hide_title:!0},o="CurveUnaryExpression&lt;T&gt;",i={unversionedId:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveUnaryExpression`1",id:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveUnaryExpression`1",title:"CurveUnaryExpression&lt;T&gt;",description:"Class which describes unary expressions (root operation has only one operand) whose value is a Curve",source:"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveUnaryExpression`1.md",sourceDirName:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions",slug:"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveUnaryExpression`1",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveUnaryExpression`1",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"docsSidebar",previous:{title:"CurveNAryExpression",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveNAryExpression"},next:{title:"ExpressionSettings",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"}},p={},l=[{value:"Type Parameters",id:"type-parameters",level:4},{value:"Properties",id:"properties",level:2},{value:"<strong>Expression</strong>",id:"expression",level:3},{value:"Property Value",id:"property-value",level:4},{value:"<strong>Name</strong>",id:"name",level:3},{value:"Property Value",id:"property-value-1",level:4},{value:"<strong>Settings</strong>",id:"settings",level:3},{value:"Property Value",id:"property-value-2",level:4},{value:"<strong>Value</strong>",id:"value",level:3},{value:"Property Value",id:"property-value-3",level:4},{value:"<strong>IsSubAdditive</strong>",id:"issubadditive",level:3},{value:"Property Value",id:"property-value-4",level:4},{value:"<strong>IsLeftContinuous</strong>",id:"isleftcontinuous",level:3},{value:"Property Value",id:"property-value-5",level:4},{value:"<strong>IsRightContinuous</strong>",id:"isrightcontinuous",level:3},{value:"Property Value",id:"property-value-6",level:4},{value:"<strong>IsNonNegative</strong>",id:"isnonnegative",level:3},{value:"Property Value",id:"property-value-7",level:4},{value:"<strong>IsNonDecreasing</strong>",id:"isnondecreasing",level:3},{value:"Property Value",id:"property-value-8",level:4},{value:"<strong>IsConcave</strong>",id:"isconcave",level:3},{value:"Property Value",id:"property-value-9",level:4},{value:"<strong>IsConvex</strong>",id:"isconvex",level:3},{value:"Property Value",id:"property-value-10",level:4},{value:"<strong>IsZeroAtZero</strong>",id:"iszeroatzero",level:3},{value:"Property Value",id:"property-value-11",level:4},{value:"<strong>IsWellDefined</strong>",id:"iswelldefined",level:3},{value:"Property Value",id:"property-value-12",level:4}],u={toc:l};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"curveunaryexpressiont"},"CurveUnaryExpression","<","T",">"),(0,a.kt)("p",null,"Class which describes unary expressions (root operation has only one operand) whose value is a Curve\nobject."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract class CurveUnaryExpression<T> : CurveExpression, Unipi.Nancy.Expressions.Internals.IGenericExpression`1[[Unipi.Nancy.MinPlusAlgebra.Curve, Unipi.Nancy, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], Unipi.Nancy.Expressions.Visitors.IVisitableCurve, \n")),(0,a.kt)("h4",{id:"type-parameters"},"Type Parameters"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CurveUnaryExpression&lt;T&gt;.T"),(0,a.kt)("br",null),"\nThe type of the value of the operand expression"),(0,a.kt)("p",null,"Inheritance ",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.object"},"Object")," \u2192 ",(0,a.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveExpression"},"CurveExpression")," \u2192 ",(0,a.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/CurveUnaryExpression%601"},"CurveUnaryExpression","<","T",">"),(0,a.kt)("br",null),"\nImplements ",(0,a.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Internals/IGenericExpression%601"},"IGenericExpression","<","Curve",">"),", ",(0,a.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions.Visitors/IVisitableCurve"},"IVisitableCurve"),", IGenericUnaryExpression","<","T, Curve",">"),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("h3",{id:"expression"},(0,a.kt)("strong",{parentName:"h3"},"Expression")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public IGenericExpression<T> Expression { get; set; }\n")),(0,a.kt)("h4",{id:"property-value"},"Property Value"),(0,a.kt)("p",null,"IGenericExpression","<","T",">",(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"name"},(0,a.kt)("strong",{parentName:"h3"},"Name")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public string Name { get; }\n")),(0,a.kt)("h4",{id:"property-value-1"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.string"},"String"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"settings"},(0,a.kt)("strong",{parentName:"h3"},"Settings")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public ExpressionSettings Settings { get; }\n")),(0,a.kt)("h4",{id:"property-value-2"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/ExpressionSettings"},"ExpressionSettings"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"value"},(0,a.kt)("strong",{parentName:"h3"},"Value")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public Curve Value { get; }\n")),(0,a.kt)("h4",{id:"property-value-3"},"Property Value"),(0,a.kt)("p",null,"Curve",(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"issubadditive"},(0,a.kt)("strong",{parentName:"h3"},"IsSubAdditive")),(0,a.kt)("p",null,"True if the curve described by the expression is sub-additive. Property evaluated avoiding as much as possible\nto make any computation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsSubAdditive { get; }\n")),(0,a.kt)("h4",{id:"property-value-4"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"isleftcontinuous"},(0,a.kt)("strong",{parentName:"h3"},"IsLeftContinuous")),(0,a.kt)("p",null,"True if the curve described by the expression is left continuous. Property evaluated avoiding as much as\npossible to make any computation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsLeftContinuous { get; }\n")),(0,a.kt)("h4",{id:"property-value-5"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"isrightcontinuous"},(0,a.kt)("strong",{parentName:"h3"},"IsRightContinuous")),(0,a.kt)("p",null,"True if the curve described by the expression is right continuous. Property evaluated avoiding as much as\npossible to make any computation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsRightContinuous { get; }\n")),(0,a.kt)("h4",{id:"property-value-6"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"isnonnegative"},(0,a.kt)("strong",{parentName:"h3"},"IsNonNegative")),(0,a.kt)("p",null,"True if the curve described by the expression is non-negative. Property evaluated avoiding as much as\npossible to make any computation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsNonNegative { get; }\n")),(0,a.kt)("h4",{id:"property-value-7"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"isnondecreasing"},(0,a.kt)("strong",{parentName:"h3"},"IsNonDecreasing")),(0,a.kt)("p",null,"True if the curve described by the expression is non-decreasing. Property evaluated avoiding as much as\npossible to make any computation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsNonDecreasing { get; }\n")),(0,a.kt)("h4",{id:"property-value-8"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"isconcave"},(0,a.kt)("strong",{parentName:"h3"},"IsConcave")),(0,a.kt)("p",null,"True if the curve described by the expression is concave. Property evaluated avoiding as much as\npossible to make any computation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsConcave { get; }\n")),(0,a.kt)("h4",{id:"property-value-9"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"isconvex"},(0,a.kt)("strong",{parentName:"h3"},"IsConvex")),(0,a.kt)("p",null,"True if the curve described by the expression is convex. Property evaluated avoiding as much as\npossible to make any computation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsConvex { get; }\n")),(0,a.kt)("h4",{id:"property-value-10"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"iszeroatzero"},(0,a.kt)("strong",{parentName:"h3"},"IsZeroAtZero")),(0,a.kt)("p",null,"True if the curve f described by the expression is 0 in 0 (f(0) = 0). Property evaluated avoiding as much as\npossible to make any computation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsZeroAtZero { get; }\n")),(0,a.kt)("h4",{id:"property-value-11"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)),(0,a.kt)("h3",{id:"iswelldefined"},(0,a.kt)("strong",{parentName:"h3"},"IsWellDefined")),(0,a.kt)("p",null,"True if the operation described by the expression is well-defined according to the definition in\nin ",(0,a.kt)("a",{parentName:"p",href:"/docs/nancy/Unipi.Nancy.Expressions/References"},"[","BT08","]")," Section 2.1."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public bool IsWellDefined { get; }\n")),(0,a.kt)("h4",{id:"property-value-12"},"Property Value"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.boolean"},"Boolean"),(0,a.kt)("br",null)))}c.isMDXComponent=!0}}]);