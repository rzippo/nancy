"use strict";(self.webpackChunknancy_docs=self.webpackChunknancy_docs||[]).push([[2673],{3905:(e,n,r)=>{r.d(n,{Zo:()=>l,kt:()=>d});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=t.createContext({}),c=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},l=function(e){var n=c(e.components);return t.createElement(p.Provider,{value:n},e.children)},y={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,s=e.originalType,p=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),u=c(r),d=i,f=u["".concat(p,".").concat(d)]||u[d]||y[d]||s;return r?t.createElement(f,o(o({ref:n},l),{},{components:r})):t.createElement(f,o({ref:n},l))}));function d(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=r.length,o=new Array(s);o[0]=u;var a={};for(var p in n)hasOwnProperty.call(n,p)&&(a[p]=n[p]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var c=2;c<s;c++)o[c]=r[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2951:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>y,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var t=r(7462),i=(r(7294),r(3905));const s={hide_title:!0},o="IGenericNAryExpression&lt;T1, TResult&gt;",a={unversionedId:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/IGenericNAryExpression`2",id:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/IGenericNAryExpression`2",title:"IGenericNAryExpression&lt;T1, TResult&gt;",description:"Interface with members and functions which allow to define a n-ary expression, i.e. an expression whose root node",source:"@site/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/IGenericNAryExpression`2.md",sourceDirName:"nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions",slug:"/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/IGenericNAryExpression`2",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/IGenericNAryExpression`2",draft:!1,tags:[],version:"current",frontMatter:{hide_title:!0},sidebar:"docsSidebar",previous:{title:"Expressions",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/Expressions"},next:{title:"RationalBinaryExpression&lt;TLeftOperand, TRightOperand&gt;",permalink:"/nancy/docs/nancy/Unipi.Nancy.Expressions/Unipi.Nancy.Expressions/RationalBinaryExpression`2"}},p={},c=[{value:"Type Parameters",id:"type-parameters",level:4},{value:"Properties",id:"properties",level:2},{value:"<strong>Expressions</strong>",id:"expressions",level:3},{value:"Property Value",id:"property-value",level:4}],l={toc:c};function y(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"igenericnaryexpressiont1-tresult"},"IGenericNAryExpression","<","T1, TResult",">"),(0,i.kt)("p",null,"Interface with members and functions which allow to define a n-ary expression, i.e. an expression whose root node\ncorresponds to an associative and commutative operation that involves n operands (n ",">","= 2)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public interface IGenericNAryExpression<T1, TResult> : \n")),(0,i.kt)("h4",{id:"type-parameters"},"Type Parameters"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"IGenericNAryExpression&lt;T1, TResult&gt;.T1"),(0,i.kt)("br",null),"\nOperands type"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"IGenericNAryExpression&lt;T1, TResult&gt;.TResult"),(0,i.kt)("br",null),"\nResult type"),(0,i.kt)("p",null,"Implements IGenericExpression","<","TResult",">"),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"expressions"},(0,i.kt)("strong",{parentName:"h3"},"Expressions")),(0,i.kt)("p",null,"Collection of expressions on which the n-ary operation is applied"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract IReadOnlyCollection<IGenericExpression<T1>> Expressions { get; }\n")),(0,i.kt)("h4",{id:"property-value"},"Property Value"),(0,i.kt)("p",null,"IReadOnlyCollection","<","IGenericExpression","<","T1",">",">",(0,i.kt)("br",null)))}y.isMDXComponent=!0}}]);