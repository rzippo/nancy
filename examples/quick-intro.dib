#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!markdown

This tutorials shows the code used for the examples in the *Quick Intro*.

The following two cells are setup: they reference the necessary packages (Nancy and plotting extensions) and import the namespaces

> Note: at the time of writing, the first execution of the first cell yields `Error: Failed to load kernel extension`.
>
> However, running the cell again will not yield any error.

#!csharp

// this package includes both Nancy and the extensions to plot in .NET Interactive
#r "nuget: Unipi.Nancy.Interactive, 1.0.13"

#!csharp

using Unipi.Nancy.Numerics;
using Unipi.Nancy.MinPlusAlgebra;
using Unipi.Nancy.NetworkCalculus;
using Unipi.Nancy.Interactive;

#!markdown

The first example shows the generic `Curve` constructor, which can be used to represent any UPP curve.

#!csharp

var c = new Curve(
    baseSequence: new Sequence(new Element[]
    {
        new Point(time: 0, value: 0),
        new Segment(startTime: 0, endTime: 2, rightLimitAtStartTime:0, slope: 1),
        new Point(2, 2),
        new Segment(2,  3, 2, 0),
        new Point(3, 2),
        new Segment(3, 4, 2, 1)
    }),
    pseudoPeriodStart: 2,
    pseudoPeriodLength: 2,
    pseudoPeriodHeight: 1
);
Plots.Plot(c, upTo: 10);

#!markdown

The library also provides simplified constructors for common types of curves.

#!csharp

var sc = new RateLatencyServiceCurve(rate: 3, latency: 3);
var ac = new SigmaRhoArrivalCurve(sigma: 4, rho: 1);
Plots.Plot([sc, ac], upTo: 10);

#!markdown

Example of delay bound, computed for the curves above.

#!csharp

var delay = Curve.HorizontalDeviation(ac, sc);
Console.WriteLine(delay);

#!markdown

Another example of delay bound, for a trickier example (from [1, p. 121]).

#!csharp

var sc = Curve.Minimum(
    new RateLatencyServiceCurve(3, 0),
    new RateLatencyServiceCurve(3, 4) + 3
);
var ac = new SigmaRhoArrivalCurve(1, 1);
Plots.Plot(sc, ac);
var delay = Curve.HorizontalDeviation(ac, sc);
Console.WriteLine(delay);

#!markdown

Example of computing and plotting the FIFO residual service curve.

#!csharp

var beta = new RateLatencyServiceCurve(3, 2);
var alpha = new SigmaRhoArrivalCurve(3, 2);
var theta = 4;
var delta_theta = new DelayServiceCurve(theta);

var alpha_theta = Curve.Convolution(alpha, delta_theta);
var diff = Curve.Subtraction(beta, alpha_theta, nonNegative: true);
var residual = Curve.Minimum(diff, delta_theta);
Plots.Plot(residual, "residual sc", 10);

#!markdown

Example computing and plotting scrict service curve for IWRR.

#!csharp

var weights = new []{4, 6, 7, 10};
var l_min = new []{4096, 3072, 4608, 3072};
var l_max = new []{8704, 5632, 6656, 8192};
var beta = new RateLatencyServiceCurve(
    rate: 10000, // 10 Mb/s, but using ms as time unit
    latency: 0
);
var unit_rate = new RateLatencyServiceCurve(1, 0);

int Phi_i_j(int i, int j, int x)
{
    var a = (x / weights[i]) * weights[j];  // division between positive integers is already floored
    var b = weights[j] - weights[i];
    b = b > 0 ? b : 0;
    var c = Math.Min(x % weights[i] + 1, weights[j]);
    return a + b + c;
}

int Psi_i(int i, int x)
{
    var sum = x;
    for(int j = 0; j < weights.Length; j++)
        if(j != i)
            sum += Phi_i_j(i, j, (x / l_min[i])) * l_max[j];
    return sum;
}

int L_tot(int i)
{
    var sum = weights[i] * l_min[i];
    for(int j = 0; j < weights.Length; j++)
    {
        if(i != j)
            sum += weights[i] * l_max[i];
    }
    return sum;
}

int i = 0; // the flow of interest
var stairs = new List<Curve>();
for(int k = 0; k < weights[i]; k++)
{
    var stair = new StairCurve(l_min[i], L_tot(i));
    var delayed_stair = stair.DelayBy(Psi_i(i, k * l_min[i])); 
    stairs.Add( delayed_stair );
}
var U_i = Curve.Addition(stairs); // summation of min-plus curves
var gamma_i = Curve.Convolution(unit_rate, U_i);
var beta_i = Curve.Composition(gamma_i, beta);
Plots.Plot(beta_i, "iwrr sc");
